/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/largeFaceListOperationsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a LargeFaceListOperations. */
var LargeFaceListOperations = /** @class */ (function () {
    /**
     * Create a LargeFaceListOperations.
     * @param {FaceClientContext} client Reference to the service client.
     */
    function LargeFaceListOperations(client) {
        this.client = client;
    }
    LargeFaceListOperations.prototype.create = function (largeFaceListId, name, options, callback) {
        return this.client.sendOperationRequest({
            largeFaceListId: largeFaceListId,
            name: name,
            options: options
        }, createOperationSpec, callback);
    };
    LargeFaceListOperations.prototype.get = function (largeFaceListId, options, callback) {
        return this.client.sendOperationRequest({
            largeFaceListId: largeFaceListId,
            options: options
        }, getOperationSpec, callback);
    };
    LargeFaceListOperations.prototype.update = function (largeFaceListId, options, callback) {
        return this.client.sendOperationRequest({
            largeFaceListId: largeFaceListId,
            options: options
        }, updateOperationSpec, callback);
    };
    LargeFaceListOperations.prototype.deleteMethod = function (largeFaceListId, options, callback) {
        return this.client.sendOperationRequest({
            largeFaceListId: largeFaceListId,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    LargeFaceListOperations.prototype.getTrainingStatus = function (largeFaceListId, options, callback) {
        return this.client.sendOperationRequest({
            largeFaceListId: largeFaceListId,
            options: options
        }, getTrainingStatusOperationSpec, callback);
    };
    LargeFaceListOperations.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    LargeFaceListOperations.prototype.train = function (largeFaceListId, options, callback) {
        return this.client.sendOperationRequest({
            largeFaceListId: largeFaceListId,
            options: options
        }, trainOperationSpec, callback);
    };
    LargeFaceListOperations.prototype.deleteFace = function (largeFaceListId, persistedFaceId, options, callback) {
        return this.client.sendOperationRequest({
            largeFaceListId: largeFaceListId,
            persistedFaceId: persistedFaceId,
            options: options
        }, deleteFaceOperationSpec, callback);
    };
    LargeFaceListOperations.prototype.getFace = function (largeFaceListId, persistedFaceId, options, callback) {
        return this.client.sendOperationRequest({
            largeFaceListId: largeFaceListId,
            persistedFaceId: persistedFaceId,
            options: options
        }, getFaceOperationSpec, callback);
    };
    LargeFaceListOperations.prototype.updateFace = function (largeFaceListId, persistedFaceId, options, callback) {
        return this.client.sendOperationRequest({
            largeFaceListId: largeFaceListId,
            persistedFaceId: persistedFaceId,
            options: options
        }, updateFaceOperationSpec, callback);
    };
    LargeFaceListOperations.prototype.addFaceFromUrl = function (largeFaceListId, url, options, callback) {
        return this.client.sendOperationRequest({
            largeFaceListId: largeFaceListId,
            url: url,
            options: options
        }, addFaceFromUrlOperationSpec, callback);
    };
    LargeFaceListOperations.prototype.listFaces = function (largeFaceListId, options, callback) {
        return this.client.sendOperationRequest({
            largeFaceListId: largeFaceListId,
            options: options
        }, listFacesOperationSpec, callback);
    };
    LargeFaceListOperations.prototype.addFaceFromStream = function (largeFaceListId, image, options, callback) {
        return this.client.sendOperationRequest({
            largeFaceListId: largeFaceListId,
            image: image,
            options: options
        }, addFaceFromStreamOperationSpec, callback);
    };
    return LargeFaceListOperations;
}());
export { LargeFaceListOperations };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var createOperationSpec = {
    httpMethod: "PUT",
    path: "largefacelists/{largeFaceListId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.largeFaceListId
    ],
    requestBody: {
        parameterPath: {
            name: "name",
            userData: [
                "options",
                "userData"
            ],
            recognitionModel: [
                "options",
                "recognitionModel"
            ]
        },
        mapper: __assign(__assign({}, Mappers.MetaDataContract), { required: true })
    },
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "largefacelists/{largeFaceListId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.largeFaceListId
    ],
    queryParameters: [
        Parameters.returnRecognitionModel
    ],
    responses: {
        200: {
            bodyMapper: Mappers.LargeFaceList
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "largefacelists/{largeFaceListId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.largeFaceListId
    ],
    requestBody: {
        parameterPath: {
            name: [
                "options",
                "name"
            ],
            userData: [
                "options",
                "userData"
            ]
        },
        mapper: __assign(__assign({}, Mappers.NameAndUserDataContract), { required: true })
    },
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "largefacelists/{largeFaceListId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.largeFaceListId
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var getTrainingStatusOperationSpec = {
    httpMethod: "GET",
    path: "largefacelists/{largeFaceListId}/training",
    urlParameters: [
        Parameters.endpoint,
        Parameters.largeFaceListId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TrainingStatus
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "largefacelists",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.returnRecognitionModel,
        Parameters.start0,
        Parameters.top0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LargeFaceList"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var trainOperationSpec = {
    httpMethod: "POST",
    path: "largefacelists/{largeFaceListId}/train",
    urlParameters: [
        Parameters.endpoint,
        Parameters.largeFaceListId
    ],
    responses: {
        202: {},
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var deleteFaceOperationSpec = {
    httpMethod: "DELETE",
    path: "largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.largeFaceListId,
        Parameters.persistedFaceId
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var getFaceOperationSpec = {
    httpMethod: "GET",
    path: "largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.largeFaceListId,
        Parameters.persistedFaceId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PersistedFace
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var updateFaceOperationSpec = {
    httpMethod: "PATCH",
    path: "largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.largeFaceListId,
        Parameters.persistedFaceId
    ],
    requestBody: {
        parameterPath: {
            userData: [
                "options",
                "userData"
            ]
        },
        mapper: __assign(__assign({}, Mappers.UpdateFaceRequest), { required: true })
    },
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var addFaceFromUrlOperationSpec = {
    httpMethod: "POST",
    path: "largefacelists/{largeFaceListId}/persistedfaces",
    urlParameters: [
        Parameters.endpoint,
        Parameters.largeFaceListId
    ],
    queryParameters: [
        Parameters.userData,
        Parameters.targetFace,
        Parameters.detectionModel
    ],
    requestBody: {
        parameterPath: {
            url: "url"
        },
        mapper: __assign(__assign({}, Mappers.ImageUrl), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.PersistedFace
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var listFacesOperationSpec = {
    httpMethod: "GET",
    path: "largefacelists/{largeFaceListId}/persistedfaces",
    urlParameters: [
        Parameters.endpoint,
        Parameters.largeFaceListId
    ],
    queryParameters: [
        Parameters.start0,
        Parameters.top0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PersistedFace"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var addFaceFromStreamOperationSpec = {
    httpMethod: "POST",
    path: "largefacelists/{largeFaceListId}/persistedfaces",
    urlParameters: [
        Parameters.endpoint,
        Parameters.largeFaceListId
    ],
    queryParameters: [
        Parameters.userData,
        Parameters.targetFace,
        Parameters.detectionModel
    ],
    requestBody: {
        parameterPath: "image",
        mapper: {
            required: true,
            serializedName: "Image",
            type: {
                name: "Stream"
            }
        }
    },
    contentType: "application/octet-stream",
    responses: {
        200: {
            bodyMapper: Mappers.PersistedFace
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=largeFaceListOperations.js.map