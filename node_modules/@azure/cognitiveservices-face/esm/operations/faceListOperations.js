/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/faceListOperationsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a FaceListOperations. */
var FaceListOperations = /** @class */ (function () {
    /**
     * Create a FaceListOperations.
     * @param {FaceClientContext} client Reference to the service client.
     */
    function FaceListOperations(client) {
        this.client = client;
    }
    FaceListOperations.prototype.create = function (faceListId, name, options, callback) {
        return this.client.sendOperationRequest({
            faceListId: faceListId,
            name: name,
            options: options
        }, createOperationSpec, callback);
    };
    FaceListOperations.prototype.get = function (faceListId, options, callback) {
        return this.client.sendOperationRequest({
            faceListId: faceListId,
            options: options
        }, getOperationSpec, callback);
    };
    FaceListOperations.prototype.update = function (faceListId, options, callback) {
        return this.client.sendOperationRequest({
            faceListId: faceListId,
            options: options
        }, updateOperationSpec, callback);
    };
    FaceListOperations.prototype.deleteMethod = function (faceListId, options, callback) {
        return this.client.sendOperationRequest({
            faceListId: faceListId,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    FaceListOperations.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    FaceListOperations.prototype.deleteFace = function (faceListId, persistedFaceId, options, callback) {
        return this.client.sendOperationRequest({
            faceListId: faceListId,
            persistedFaceId: persistedFaceId,
            options: options
        }, deleteFaceOperationSpec, callback);
    };
    FaceListOperations.prototype.addFaceFromUrl = function (faceListId, url, options, callback) {
        return this.client.sendOperationRequest({
            faceListId: faceListId,
            url: url,
            options: options
        }, addFaceFromUrlOperationSpec, callback);
    };
    FaceListOperations.prototype.addFaceFromStream = function (faceListId, image, options, callback) {
        return this.client.sendOperationRequest({
            faceListId: faceListId,
            image: image,
            options: options
        }, addFaceFromStreamOperationSpec, callback);
    };
    return FaceListOperations;
}());
export { FaceListOperations };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var createOperationSpec = {
    httpMethod: "PUT",
    path: "facelists/{faceListId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.faceListId
    ],
    requestBody: {
        parameterPath: {
            name: "name",
            userData: [
                "options",
                "userData"
            ],
            recognitionModel: [
                "options",
                "recognitionModel"
            ]
        },
        mapper: __assign(__assign({}, Mappers.MetaDataContract), { required: true })
    },
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "facelists/{faceListId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.faceListId
    ],
    queryParameters: [
        Parameters.returnRecognitionModel
    ],
    responses: {
        200: {
            bodyMapper: Mappers.FaceList
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "facelists/{faceListId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.faceListId
    ],
    requestBody: {
        parameterPath: {
            name: [
                "options",
                "name"
            ],
            userData: [
                "options",
                "userData"
            ]
        },
        mapper: __assign(__assign({}, Mappers.NameAndUserDataContract), { required: true })
    },
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "facelists/{faceListId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.faceListId
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "facelists",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.returnRecognitionModel
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FaceList"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var deleteFaceOperationSpec = {
    httpMethod: "DELETE",
    path: "facelists/{faceListId}/persistedfaces/{persistedFaceId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.faceListId,
        Parameters.persistedFaceId
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var addFaceFromUrlOperationSpec = {
    httpMethod: "POST",
    path: "facelists/{faceListId}/persistedfaces",
    urlParameters: [
        Parameters.endpoint,
        Parameters.faceListId
    ],
    queryParameters: [
        Parameters.userData,
        Parameters.targetFace,
        Parameters.detectionModel
    ],
    requestBody: {
        parameterPath: {
            url: "url"
        },
        mapper: __assign(__assign({}, Mappers.ImageUrl), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.PersistedFace
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var addFaceFromStreamOperationSpec = {
    httpMethod: "POST",
    path: "facelists/{faceListId}/persistedfaces",
    urlParameters: [
        Parameters.endpoint,
        Parameters.faceListId
    ],
    queryParameters: [
        Parameters.userData,
        Parameters.targetFace,
        Parameters.detectionModel
    ],
    requestBody: {
        parameterPath: "image",
        mapper: {
            required: true,
            serializedName: "Image",
            type: {
                name: "Stream"
            }
        }
    },
    contentType: "application/octet-stream",
    responses: {
        200: {
            bodyMapper: Mappers.PersistedFace
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=faceListOperations.js.map