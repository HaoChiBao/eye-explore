/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/faceMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Face. */
var Face = /** @class */ (function () {
    /**
     * Create a Face.
     * @param {FaceClientContext} client Reference to the service client.
     */
    function Face(client) {
        this.client = client;
    }
    Face.prototype.findSimilar = function (faceId, options, callback) {
        return this.client.sendOperationRequest({
            faceId: faceId,
            options: options
        }, findSimilarOperationSpec, callback);
    };
    Face.prototype.group = function (faceIds, options, callback) {
        return this.client.sendOperationRequest({
            faceIds: faceIds,
            options: options
        }, groupOperationSpec, callback);
    };
    Face.prototype.identify = function (faceIds, options, callback) {
        return this.client.sendOperationRequest({
            faceIds: faceIds,
            options: options
        }, identifyOperationSpec, callback);
    };
    Face.prototype.verifyFaceToFace = function (faceId1, faceId2, options, callback) {
        return this.client.sendOperationRequest({
            faceId1: faceId1,
            faceId2: faceId2,
            options: options
        }, verifyFaceToFaceOperationSpec, callback);
    };
    Face.prototype.detectWithUrl = function (url, options, callback) {
        return this.client.sendOperationRequest({
            url: url,
            options: options
        }, detectWithUrlOperationSpec, callback);
    };
    Face.prototype.verifyFaceToPerson = function (faceId, personId, options, callback) {
        return this.client.sendOperationRequest({
            faceId: faceId,
            personId: personId,
            options: options
        }, verifyFaceToPersonOperationSpec, callback);
    };
    Face.prototype.detectWithStream = function (image, options, callback) {
        return this.client.sendOperationRequest({
            image: image,
            options: options
        }, detectWithStreamOperationSpec, callback);
    };
    return Face;
}());
export { Face };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var findSimilarOperationSpec = {
    httpMethod: "POST",
    path: "findsimilars",
    urlParameters: [
        Parameters.endpoint
    ],
    requestBody: {
        parameterPath: {
            faceId: "faceId",
            faceListId: [
                "options",
                "faceListId"
            ],
            largeFaceListId: [
                "options",
                "largeFaceListId"
            ],
            faceIds: [
                "options",
                "faceIds"
            ],
            maxNumOfCandidatesReturned: [
                "options",
                "maxNumOfCandidatesReturned"
            ],
            mode: [
                "options",
                "mode"
            ]
        },
        mapper: __assign(__assign({}, Mappers.FindSimilarRequest), { required: true })
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SimilarFace"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var groupOperationSpec = {
    httpMethod: "POST",
    path: "group",
    urlParameters: [
        Parameters.endpoint
    ],
    requestBody: {
        parameterPath: {
            faceIds: "faceIds"
        },
        mapper: __assign(__assign({}, Mappers.GroupRequest), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.GroupResult
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var identifyOperationSpec = {
    httpMethod: "POST",
    path: "identify",
    urlParameters: [
        Parameters.endpoint
    ],
    requestBody: {
        parameterPath: {
            faceIds: "faceIds",
            personGroupId: [
                "options",
                "personGroupId"
            ],
            largePersonGroupId: [
                "options",
                "largePersonGroupId"
            ],
            maxNumOfCandidatesReturned: [
                "options",
                "maxNumOfCandidatesReturned"
            ],
            confidenceThreshold: [
                "options",
                "confidenceThreshold"
            ]
        },
        mapper: __assign(__assign({}, Mappers.IdentifyRequest), { required: true })
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IdentifyResult"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var verifyFaceToFaceOperationSpec = {
    httpMethod: "POST",
    path: "verify",
    urlParameters: [
        Parameters.endpoint
    ],
    requestBody: {
        parameterPath: {
            faceId1: "faceId1",
            faceId2: "faceId2"
        },
        mapper: __assign(__assign({}, Mappers.VerifyFaceToFaceRequest), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VerifyResult
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var detectWithUrlOperationSpec = {
    httpMethod: "POST",
    path: "detect",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.returnFaceId,
        Parameters.returnFaceLandmarks,
        Parameters.returnFaceAttributes,
        Parameters.recognitionModel,
        Parameters.returnRecognitionModel,
        Parameters.detectionModel,
        Parameters.faceIdTimeToLive
    ],
    requestBody: {
        parameterPath: {
            url: "url"
        },
        mapper: __assign(__assign({}, Mappers.ImageUrl), { required: true })
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DetectedFace"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var verifyFaceToPersonOperationSpec = {
    httpMethod: "POST",
    path: "verify",
    urlParameters: [
        Parameters.endpoint
    ],
    requestBody: {
        parameterPath: {
            faceId: "faceId",
            personGroupId: [
                "options",
                "personGroupId"
            ],
            largePersonGroupId: [
                "options",
                "largePersonGroupId"
            ],
            personId: "personId"
        },
        mapper: __assign(__assign({}, Mappers.VerifyFaceToPersonRequest), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VerifyResult
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var detectWithStreamOperationSpec = {
    httpMethod: "POST",
    path: "detect",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.returnFaceId,
        Parameters.returnFaceLandmarks,
        Parameters.returnFaceAttributes,
        Parameters.recognitionModel,
        Parameters.returnRecognitionModel,
        Parameters.detectionModel,
        Parameters.faceIdTimeToLive
    ],
    requestBody: {
        parameterPath: "image",
        mapper: {
            required: true,
            serializedName: "Image",
            type: {
                name: "Stream"
            }
        }
    },
    contentType: "application/octet-stream",
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DetectedFace"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=face.js.map