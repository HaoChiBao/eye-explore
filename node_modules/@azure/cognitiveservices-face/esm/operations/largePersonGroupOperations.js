/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/largePersonGroupOperationsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a LargePersonGroupOperations. */
var LargePersonGroupOperations = /** @class */ (function () {
    /**
     * Create a LargePersonGroupOperations.
     * @param {FaceClientContext} client Reference to the service client.
     */
    function LargePersonGroupOperations(client) {
        this.client = client;
    }
    LargePersonGroupOperations.prototype.create = function (largePersonGroupId, name, options, callback) {
        return this.client.sendOperationRequest({
            largePersonGroupId: largePersonGroupId,
            name: name,
            options: options
        }, createOperationSpec, callback);
    };
    LargePersonGroupOperations.prototype.deleteMethod = function (largePersonGroupId, options, callback) {
        return this.client.sendOperationRequest({
            largePersonGroupId: largePersonGroupId,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    LargePersonGroupOperations.prototype.get = function (largePersonGroupId, options, callback) {
        return this.client.sendOperationRequest({
            largePersonGroupId: largePersonGroupId,
            options: options
        }, getOperationSpec, callback);
    };
    LargePersonGroupOperations.prototype.update = function (largePersonGroupId, options, callback) {
        return this.client.sendOperationRequest({
            largePersonGroupId: largePersonGroupId,
            options: options
        }, updateOperationSpec, callback);
    };
    LargePersonGroupOperations.prototype.getTrainingStatus = function (largePersonGroupId, options, callback) {
        return this.client.sendOperationRequest({
            largePersonGroupId: largePersonGroupId,
            options: options
        }, getTrainingStatusOperationSpec, callback);
    };
    LargePersonGroupOperations.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    LargePersonGroupOperations.prototype.train = function (largePersonGroupId, options, callback) {
        return this.client.sendOperationRequest({
            largePersonGroupId: largePersonGroupId,
            options: options
        }, trainOperationSpec, callback);
    };
    return LargePersonGroupOperations;
}());
export { LargePersonGroupOperations };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var createOperationSpec = {
    httpMethod: "PUT",
    path: "largepersongroups/{largePersonGroupId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.largePersonGroupId
    ],
    requestBody: {
        parameterPath: {
            name: "name",
            userData: [
                "options",
                "userData"
            ],
            recognitionModel: [
                "options",
                "recognitionModel"
            ]
        },
        mapper: __assign(__assign({}, Mappers.MetaDataContract), { required: true })
    },
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "largepersongroups/{largePersonGroupId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.largePersonGroupId
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "largepersongroups/{largePersonGroupId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.largePersonGroupId
    ],
    queryParameters: [
        Parameters.returnRecognitionModel
    ],
    responses: {
        200: {
            bodyMapper: Mappers.LargePersonGroup
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "largepersongroups/{largePersonGroupId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.largePersonGroupId
    ],
    requestBody: {
        parameterPath: {
            name: [
                "options",
                "name"
            ],
            userData: [
                "options",
                "userData"
            ]
        },
        mapper: __assign(__assign({}, Mappers.NameAndUserDataContract), { required: true })
    },
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var getTrainingStatusOperationSpec = {
    httpMethod: "GET",
    path: "largepersongroups/{largePersonGroupId}/training",
    urlParameters: [
        Parameters.endpoint,
        Parameters.largePersonGroupId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TrainingStatus
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "largepersongroups",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.start1,
        Parameters.top1,
        Parameters.returnRecognitionModel
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LargePersonGroup"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var trainOperationSpec = {
    httpMethod: "POST",
    path: "largepersongroups/{largePersonGroupId}/train",
    urlParameters: [
        Parameters.endpoint,
        Parameters.largePersonGroupId
    ],
    responses: {
        202: {},
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=largePersonGroupOperations.js.map