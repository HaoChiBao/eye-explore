import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { FaceClientContext } from "../faceClientContext";
/** Class representing a PersonGroupOperations. */
export declare class PersonGroupOperations {
    private readonly client;
    /**
     * Create a PersonGroupOperations.
     * @param {FaceClientContext} client Reference to the service client.
     */
    constructor(client: FaceClientContext);
    /**
     * Create a new person group with specified personGroupId, name, user-provided userData and
     * recognitionModel.
     * <br /> A person group is the container of the uploaded person data, including face recognition
     * features.
     * <br /> After creation, use [PersonGroup Person -
     * Create](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/create) to add persons
     * into the group, and then call [PersonGroup -
     * Train](https://docs.microsoft.com/rest/api/faceapi/persongroup/train) to get this group ready
     * for [Face - Identify](https://docs.microsoft.com/rest/api/faceapi/face/identify).
     * <br /> No image will be stored. Only the person's extracted face features and userData will be
     * stored on server until [PersonGroup Person -
     * Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete) or [PersonGroup -
     * Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete) is called.
     * <br/>'recognitionModel' should be specified to associate with this person group. The default
     * value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly
     * specify the model you need in this parameter. New faces that are added to an existing person
     * group will use the recognition model that's already associated with the collection. Existing
     * face features in a person group can't be updated to features extracted by another version of
     * recognition model.
     *
     * Person group quota:
     * * Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000 persons.
     * * S0-tier subscription quota: 1,000,000 person groups. Each holds up to 10,000 persons.
     * * to handle larger scale face identification problem, please consider using
     * [LargePersonGroup](https://docs.microsoft.com/rest/api/faceapi/largepersongroup).
     * @param personGroupId Id referencing a particular person group.
     * @param name User defined name, maximum length is 128.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    create(personGroupId: string, name: string, options?: Models.PersonGroupCreateOptionalParams): Promise<msRest.RestResponse>;
    /**
     * @param personGroupId Id referencing a particular person group.
     * @param name User defined name, maximum length is 128.
     * @param callback The callback
     */
    create(personGroupId: string, name: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param personGroupId Id referencing a particular person group.
     * @param name User defined name, maximum length is 128.
     * @param options The optional parameters
     * @param callback The callback
     */
    create(personGroupId: string, name: string, options: Models.PersonGroupCreateOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * Delete an existing person group. Persisted face features of all people in the person group will
     * also be deleted.
     * @param personGroupId Id referencing a particular person group.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(personGroupId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param personGroupId Id referencing a particular person group.
     * @param callback The callback
     */
    deleteMethod(personGroupId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param personGroupId Id referencing a particular person group.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(personGroupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Retrieve person group name, userData and recognitionModel. To get person information under this
     * personGroup, use [PersonGroup Person -
     * List](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/list).
     * @param personGroupId Id referencing a particular person group.
     * @param [options] The optional parameters
     * @returns Promise<Models.PersonGroupGetResponse>
     */
    get(personGroupId: string, options?: Models.PersonGroupGetOptionalParams): Promise<Models.PersonGroupGetResponse>;
    /**
     * @param personGroupId Id referencing a particular person group.
     * @param callback The callback
     */
    get(personGroupId: string, callback: msRest.ServiceCallback<Models.PersonGroup>): void;
    /**
     * @param personGroupId Id referencing a particular person group.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(personGroupId: string, options: Models.PersonGroupGetOptionalParams, callback: msRest.ServiceCallback<Models.PersonGroup>): void;
    /**
     * Update an existing person group's display name and userData. The properties which does not
     * appear in request body will not be updated.
     * @param personGroupId Id referencing a particular person group.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    update(personGroupId: string, options?: Models.PersonGroupUpdateOptionalParams): Promise<msRest.RestResponse>;
    /**
     * @param personGroupId Id referencing a particular person group.
     * @param callback The callback
     */
    update(personGroupId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param personGroupId Id referencing a particular person group.
     * @param options The optional parameters
     * @param callback The callback
     */
    update(personGroupId: string, options: Models.PersonGroupUpdateOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * Retrieve the training status of a person group (completed or ongoing).
     * @param personGroupId Id referencing a particular person group.
     * @param [options] The optional parameters
     * @returns Promise<Models.PersonGroupGetTrainingStatusResponse>
     */
    getTrainingStatus(personGroupId: string, options?: msRest.RequestOptionsBase): Promise<Models.PersonGroupGetTrainingStatusResponse>;
    /**
     * @param personGroupId Id referencing a particular person group.
     * @param callback The callback
     */
    getTrainingStatus(personGroupId: string, callback: msRest.ServiceCallback<Models.TrainingStatus>): void;
    /**
     * @param personGroupId Id referencing a particular person group.
     * @param options The optional parameters
     * @param callback The callback
     */
    getTrainingStatus(personGroupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TrainingStatus>): void;
    /**
     * List person groups’ personGroupId, name, userData and recognitionModel.<br />
     * * Person groups are stored in alphabetical order of personGroupId.
     * * "start" parameter (string, optional) is a user-provided personGroupId value that returned
     * entries have larger ids by string comparison. "start" set to empty to indicate return from the
     * first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000
     * entries can be returned in one call. To fetch more, you can specify "start" with the last
     * returned entry’s Id of the current call.
     * <br />
     * For example, total 5 person groups: "group1", ..., "group5".
     * <br /> "start=&top=" will return all 5 groups.
     * <br /> "start=&top=2" will return "group1", "group2".
     * <br /> "start=group2&top=3" will return "group3", "group4", "group5".
     * @param [options] The optional parameters
     * @returns Promise<Models.PersonGroupListResponse>
     */
    list(options?: Models.PersonGroupListOptionalParams): Promise<Models.PersonGroupListResponse>;
    /**
     * @param callback The callback
     */
    list(callback: msRest.ServiceCallback<Models.PersonGroup[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    list(options: Models.PersonGroupListOptionalParams, callback: msRest.ServiceCallback<Models.PersonGroup[]>): void;
    /**
     * Queue a person group training task, the training task may not be started immediately.
     * @param personGroupId Id referencing a particular person group.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    train(personGroupId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param personGroupId Id referencing a particular person group.
     * @param callback The callback
     */
    train(personGroupId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param personGroupId Id referencing a particular person group.
     * @param options The optional parameters
     * @param callback The callback
     */
    train(personGroupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
}
//# sourceMappingURL=personGroupOperations.d.ts.map