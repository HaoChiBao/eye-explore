/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/snapshotOperationsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a SnapshotOperations. */
var SnapshotOperations = /** @class */ (function () {
    /**
     * Create a SnapshotOperations.
     * @param {FaceClientContext} client Reference to the service client.
     */
    function SnapshotOperations(client) {
        this.client = client;
    }
    SnapshotOperations.prototype.take = function (type, objectId, applyScope, options, callback) {
        return this.client.sendOperationRequest({
            type: type,
            objectId: objectId,
            applyScope: applyScope,
            options: options
        }, takeOperationSpec, callback);
    };
    SnapshotOperations.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    SnapshotOperations.prototype.get = function (snapshotId, options, callback) {
        return this.client.sendOperationRequest({
            snapshotId: snapshotId,
            options: options
        }, getOperationSpec, callback);
    };
    SnapshotOperations.prototype.update = function (snapshotId, options, callback) {
        return this.client.sendOperationRequest({
            snapshotId: snapshotId,
            options: options
        }, updateOperationSpec, callback);
    };
    SnapshotOperations.prototype.deleteMethod = function (snapshotId, options, callback) {
        return this.client.sendOperationRequest({
            snapshotId: snapshotId,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    SnapshotOperations.prototype.apply = function (snapshotId, objectId, options, callback) {
        return this.client.sendOperationRequest({
            snapshotId: snapshotId,
            objectId: objectId,
            options: options
        }, applyOperationSpec, callback);
    };
    SnapshotOperations.prototype.getOperationStatus = function (operationId, options, callback) {
        return this.client.sendOperationRequest({
            operationId: operationId,
            options: options
        }, getOperationStatusOperationSpec, callback);
    };
    return SnapshotOperations;
}());
export { SnapshotOperations };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var takeOperationSpec = {
    httpMethod: "POST",
    path: "snapshots",
    urlParameters: [
        Parameters.endpoint
    ],
    requestBody: {
        parameterPath: {
            type: "type",
            objectId: "objectId",
            applyScope: "applyScope",
            userData: [
                "options",
                "userData"
            ]
        },
        mapper: __assign(__assign({}, Mappers.TakeSnapshotRequest), { required: true })
    },
    responses: {
        202: {
            headersMapper: Mappers.SnapshotTakeHeaders
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "snapshots",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.type,
        Parameters.applyScope
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Snapshot"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "snapshots/{snapshotId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.snapshotId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Snapshot
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "snapshots/{snapshotId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.snapshotId
    ],
    requestBody: {
        parameterPath: {
            applyScope: [
                "options",
                "applyScope"
            ],
            userData: [
                "options",
                "userData"
            ]
        },
        mapper: __assign(__assign({}, Mappers.UpdateSnapshotRequest), { required: true })
    },
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "snapshots/{snapshotId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.snapshotId
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var applyOperationSpec = {
    httpMethod: "POST",
    path: "snapshots/{snapshotId}/apply",
    urlParameters: [
        Parameters.endpoint,
        Parameters.snapshotId
    ],
    requestBody: {
        parameterPath: {
            objectId: "objectId",
            mode: [
                "options",
                "mode"
            ]
        },
        mapper: __assign(__assign({}, Mappers.ApplySnapshotRequest), { required: true })
    },
    responses: {
        202: {
            headersMapper: Mappers.SnapshotApplyHeaders
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var getOperationStatusOperationSpec = {
    httpMethod: "GET",
    path: "operations/{operationId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.operationId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=snapshotOperations.js.map