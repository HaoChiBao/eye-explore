{"version":3,"file":"cognitiveservices-face.js","sources":["../node_modules/tslib/tslib.es6.js","../src/models/index.ts","../src/models/mappers.ts","../src/models/faceMappers.ts","../src/models/parameters.ts","../src/operations/face.ts","../src/models/personGroupPersonMappers.ts","../src/operations/personGroupPerson.ts","../src/models/personGroupOperationsMappers.ts","../src/operations/personGroupOperations.ts","../src/models/faceListOperationsMappers.ts","../src/operations/faceListOperations.ts","../src/models/largePersonGroupPersonMappers.ts","../src/operations/largePersonGroupPerson.ts","../src/models/largePersonGroupOperationsMappers.ts","../src/operations/largePersonGroupOperations.ts","../src/models/largeFaceListOperationsMappers.ts","../src/operations/largeFaceListOperations.ts","../src/models/snapshotOperationsMappers.ts","../src/operations/snapshotOperations.ts","../src/faceClientContext.ts","../src/faceClient.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\n/**\n * Error body.\n */\nexport interface ErrorModel {\n  code?: string;\n  message?: string;\n}\n\n/**\n * Error information returned by the API\n */\nexport interface APIError {\n  error?: ErrorModel;\n}\n\n/**\n * A rectangle within which a face can be found\n */\nexport interface FaceRectangle {\n  /**\n   * The width of the rectangle, in pixels.\n   */\n  width: number;\n  /**\n   * The height of the rectangle, in pixels.\n   */\n  height: number;\n  /**\n   * The distance from the left edge if the image to the left edge of the rectangle, in pixels.\n   */\n  left: number;\n  /**\n   * The distance from the top edge if the image to the top edge of the rectangle, in pixels.\n   */\n  top: number;\n}\n\n/**\n * Coordinates within an image\n */\nexport interface Coordinate {\n  /**\n   * The horizontal component, in pixels.\n   */\n  x: number;\n  /**\n   * The vertical component, in pixels.\n   */\n  y: number;\n}\n\n/**\n * A collection of 27-point face landmarks pointing to the important positions of face components.\n */\nexport interface FaceLandmarks {\n  pupilLeft?: Coordinate;\n  pupilRight?: Coordinate;\n  noseTip?: Coordinate;\n  mouthLeft?: Coordinate;\n  mouthRight?: Coordinate;\n  eyebrowLeftOuter?: Coordinate;\n  eyebrowLeftInner?: Coordinate;\n  eyeLeftOuter?: Coordinate;\n  eyeLeftTop?: Coordinate;\n  eyeLeftBottom?: Coordinate;\n  eyeLeftInner?: Coordinate;\n  eyebrowRightInner?: Coordinate;\n  eyebrowRightOuter?: Coordinate;\n  eyeRightInner?: Coordinate;\n  eyeRightTop?: Coordinate;\n  eyeRightBottom?: Coordinate;\n  eyeRightOuter?: Coordinate;\n  noseRootLeft?: Coordinate;\n  noseRootRight?: Coordinate;\n  noseLeftAlarTop?: Coordinate;\n  noseRightAlarTop?: Coordinate;\n  noseLeftAlarOutTip?: Coordinate;\n  noseRightAlarOutTip?: Coordinate;\n  upperLipTop?: Coordinate;\n  upperLipBottom?: Coordinate;\n  underLipTop?: Coordinate;\n  underLipBottom?: Coordinate;\n}\n\n/**\n * Properties describing facial hair attributes.\n */\nexport interface FacialHair {\n  moustache?: number;\n  beard?: number;\n  sideburns?: number;\n}\n\n/**\n * Properties indicating head pose of the face.\n */\nexport interface HeadPose {\n  roll?: number;\n  yaw?: number;\n  pitch?: number;\n}\n\n/**\n * Properties describing facial emotion in form of confidence ranging from 0 to 1.\n */\nexport interface Emotion {\n  anger?: number;\n  contempt?: number;\n  disgust?: number;\n  fear?: number;\n  happiness?: number;\n  neutral?: number;\n  sadness?: number;\n  surprise?: number;\n}\n\n/**\n * Hair color and associated confidence\n */\nexport interface HairColor {\n  /**\n   * Name of the hair color. Possible values include: 'unknown', 'white', 'gray', 'blond', 'brown',\n   * 'red', 'black', 'other'\n   */\n  color?: HairColorType;\n  /**\n   * Confidence level of the color\n   */\n  confidence?: number;\n}\n\n/**\n * Properties describing hair attributes.\n */\nexport interface Hair {\n  /**\n   * A number describing confidence level of whether the person is bald.\n   */\n  bald?: number;\n  /**\n   * A boolean value describing whether the hair is visible in the image.\n   */\n  invisible?: boolean;\n  /**\n   * An array of candidate colors and confidence level in the presence of each.\n   */\n  hairColor?: HairColor[];\n}\n\n/**\n * Properties describing the presence of makeup on a given face.\n */\nexport interface Makeup {\n  /**\n   * A boolean value describing whether eye makeup is present on a face.\n   */\n  eyeMakeup?: boolean;\n  /**\n   * A boolean value describing whether lip makeup is present on a face.\n   */\n  lipMakeup?: boolean;\n}\n\n/**\n * Properties describing occlusions on a given face.\n */\nexport interface Occlusion {\n  /**\n   * A boolean value indicating whether forehead is occluded.\n   */\n  foreheadOccluded?: boolean;\n  /**\n   * A boolean value indicating whether eyes are occluded.\n   */\n  eyeOccluded?: boolean;\n  /**\n   * A boolean value indicating whether the mouth is occluded.\n   */\n  mouthOccluded?: boolean;\n}\n\n/**\n * Accessory item and corresponding confidence level.\n */\nexport interface Accessory {\n  /**\n   * Type of an accessory. Possible values include: 'headWear', 'glasses', 'mask'\n   */\n  type?: AccessoryType;\n  /**\n   * Confidence level of an accessory\n   */\n  confidence?: number;\n}\n\n/**\n * Properties describing any presence of blur within the image.\n */\nexport interface Blur {\n  /**\n   * An enum value indicating level of blurriness. Possible values include: 'Low', 'Medium', 'High'\n   */\n  blurLevel?: BlurLevel;\n  /**\n   * A number indicating level of blurriness ranging from 0 to 1.\n   */\n  value?: number;\n}\n\n/**\n * Properties describing exposure level of the image.\n */\nexport interface Exposure {\n  /**\n   * An enum value indicating level of exposure. Possible values include: 'UnderExposure',\n   * 'GoodExposure', 'OverExposure'\n   */\n  exposureLevel?: ExposureLevel;\n  /**\n   * A number indicating level of exposure level ranging from 0 to 1. [0, 0.25) is under exposure.\n   * [0.25, 0.75) is good exposure. [0.75, 1] is over exposure.\n   */\n  value?: number;\n}\n\n/**\n * Properties describing noise level of the image.\n */\nexport interface Noise {\n  /**\n   * An enum value indicating level of noise. Possible values include: 'Low', 'Medium', 'High'\n   */\n  noiseLevel?: NoiseLevel;\n  /**\n   * A number indicating level of noise level ranging from 0 to 1. [0, 0.25) is under exposure.\n   * [0.25, 0.75) is good exposure. [0.75, 1] is over exposure. [0, 0.3) is low noise level. [0.3,\n   * 0.7) is medium noise level. [0.7, 1] is high noise level.\n   */\n  value?: number;\n}\n\n/**\n * Properties describing the presence of a mask on a given face.\n */\nexport interface Mask {\n  /**\n   * Mask type if any of the face. Possible values include: 'noMask', 'faceMask',\n   * 'otherMaskOrOcclusion', 'uncertain'\n   */\n  type?: MaskType;\n  /**\n   * A boolean value indicating whether nose and mouth are covered.\n   */\n  noseAndMouthCovered?: boolean;\n}\n\n/**\n * Face Attributes\n */\nexport interface FaceAttributes {\n  /**\n   * Age in years\n   */\n  age?: number;\n  /**\n   * Possible gender of the face. Possible values include: 'male', 'female'\n   */\n  gender?: Gender;\n  /**\n   * Smile intensity, a number between [0,1]\n   */\n  smile?: number;\n  /**\n   * Properties describing facial hair attributes.\n   */\n  facialHair?: FacialHair;\n  /**\n   * Glasses type if any of the face. Possible values include: 'noGlasses', 'readingGlasses',\n   * 'sunglasses', 'swimmingGoggles'\n   */\n  glasses?: GlassesType;\n  /**\n   * Properties indicating head pose of the face.\n   */\n  headPose?: HeadPose;\n  /**\n   * Properties describing facial emotion in form of confidence ranging from 0 to 1.\n   */\n  emotion?: Emotion;\n  /**\n   * Properties describing hair attributes.\n   */\n  hair?: Hair;\n  /**\n   * Properties describing the presence of makeup on a given face.\n   */\n  makeup?: Makeup;\n  /**\n   * Properties describing occlusions on a given face.\n   */\n  occlusion?: Occlusion;\n  /**\n   * Properties describing any accessories on a given face.\n   */\n  accessories?: Accessory[];\n  /**\n   * Properties describing any presence of blur within the image.\n   */\n  blur?: Blur;\n  /**\n   * Properties describing exposure level of the image.\n   */\n  exposure?: Exposure;\n  /**\n   * Properties describing noise level of the image.\n   */\n  noise?: Noise;\n  /**\n   * Properties describing the presence of a mask on a given face.\n   */\n  mask?: Mask;\n  /**\n   * Properties describing the overall image quality regarding whether the image being used in the\n   * detection is of sufficient quality to attempt face recognition on. Possible values include:\n   * 'Low', 'Medium', 'High'\n   */\n  qualityForRecognition?: QualityForRecognition;\n}\n\n/**\n * Detected Face object.\n */\nexport interface DetectedFace {\n  faceId?: string;\n  /**\n   * Possible values include: 'recognition_01', 'recognition_02', 'recognition_03',\n   * 'recognition_04'. Default value: 'recognition_01'.\n   */\n  recognitionModel?: RecognitionModel;\n  faceRectangle: FaceRectangle;\n  faceLandmarks?: FaceLandmarks;\n  faceAttributes?: FaceAttributes;\n}\n\n/**\n * Request body for find similar operation.\n */\nexport interface FindSimilarRequest {\n  /**\n   * FaceId of the query face. User needs to call Face - Detect first to get a valid faceId. Note\n   * that this faceId is not persisted and will expire at the time specified by faceIdTimeToLive\n   * after the detection call\n   */\n  faceId: string;\n  /**\n   * An existing user-specified unique candidate face list, created in Face List - Create a Face\n   * List. Face list contains a set of persistedFaceIds which are persisted and will never expire.\n   * Parameter faceListId, largeFaceListId and faceIds should not be provided at the same time.\n   */\n  faceListId?: string;\n  /**\n   * An existing user-specified unique candidate large face list, created in LargeFaceList -\n   * Create. Large face list contains a set of persistedFaceIds which are persisted and will never\n   * expire. Parameter faceListId, largeFaceListId and faceIds should not be provided at the same\n   * time.\n   */\n  largeFaceListId?: string;\n  /**\n   * An array of candidate faceIds. All of them are created by Face - Detect and the faceIds will\n   * expire at the time specified by faceIdTimeToLive after the detection call. The number of\n   * faceIds is limited to 1000. Parameter faceListId, largeFaceListId and faceIds should not be\n   * provided at the same time.\n   */\n  faceIds?: string[];\n  /**\n   * The number of top similar faces returned. The valid range is [1, 1000]. Default value: 20.\n   */\n  maxNumOfCandidatesReturned?: number;\n  /**\n   * Similar face searching mode. It can be \"matchPerson\" or \"matchFace\". Possible values include:\n   * 'matchPerson', 'matchFace'. Default value: 'matchPerson'.\n   */\n  mode?: FindSimilarMatchMode;\n}\n\n/**\n * Response body for find similar face operation.\n */\nexport interface SimilarFace {\n  /**\n   * FaceId of candidate face when find by faceIds. faceId is created by Face - Detect and will\n   * expire at the time specified by faceIdTimeToLive after the detection call\n   */\n  faceId?: string;\n  /**\n   * PersistedFaceId of candidate face when find by faceListId. persistedFaceId in face list is\n   * persisted and will not expire. As showed in below response\n   */\n  persistedFaceId?: string;\n  /**\n   * Similarity confidence of the candidate face. The higher confidence, the more similar. Range\n   * between [0,1].\n   */\n  confidence: number;\n}\n\n/**\n * Request body for group request.\n */\nexport interface GroupRequest {\n  /**\n   * Array of candidate faceId created by Face - Detect. The maximum is 1000 faces\n   */\n  faceIds: string[];\n}\n\n/**\n * An array of face groups based on face similarity.\n */\nexport interface GroupResult {\n  /**\n   * A partition of the original faces based on face similarity. Groups are ranked by number of\n   * faces\n   */\n  groups: string[][];\n  /**\n   * Face ids array of faces that cannot find any similar faces from original faces.\n   */\n  messyGroup?: string[];\n}\n\n/**\n * Request body for identify face operation.\n */\nexport interface IdentifyRequest {\n  /**\n   * Array of query faces faceIds, created by the Face - Detect. Each of the faces are identified\n   * independently. The valid number of faceIds is between [1, 10].\n   */\n  faceIds: string[];\n  /**\n   * PersonGroupId of the target person group, created by PersonGroup - Create. Parameter\n   * personGroupId and largePersonGroupId should not be provided at the same time.\n   */\n  personGroupId?: string;\n  /**\n   * LargePersonGroupId of the target large person group, created by LargePersonGroup - Create.\n   * Parameter personGroupId and largePersonGroupId should not be provided at the same time.\n   */\n  largePersonGroupId?: string;\n  /**\n   * The range of maxNumOfCandidatesReturned is between 1 and 100 (default is 1). Default value: 1.\n   */\n  maxNumOfCandidatesReturned?: number;\n  /**\n   * Confidence threshold of identification, used to judge whether one face belong to one person.\n   * The range of confidenceThreshold is [0, 1] (default specified by algorithm).\n   */\n  confidenceThreshold?: number;\n}\n\n/**\n * All possible faces that may qualify.\n */\nexport interface IdentifyCandidate {\n  /**\n   * Id of candidate\n   */\n  personId: string;\n  /**\n   * Confidence threshold of identification, used to judge whether one face belong to one person.\n   * The range of confidenceThreshold is [0, 1] (default specified by algorithm).\n   */\n  confidence: number;\n}\n\n/**\n * Response body for identify face operation.\n */\nexport interface IdentifyResult {\n  /**\n   * FaceId of the query face\n   */\n  faceId: string;\n  /**\n   * Identified person candidates for that face (ranked by confidence). Array size should be no\n   * larger than input maxNumOfCandidatesReturned. If no person is identified, will return an empty\n   * array.\n   */\n  candidates: IdentifyCandidate[];\n}\n\n/**\n * Request body for face to person verification.\n */\nexport interface VerifyFaceToPersonRequest {\n  /**\n   * FaceId of the face, comes from Face - Detect\n   */\n  faceId: string;\n  /**\n   * Using existing personGroupId and personId for fast loading a specified person. personGroupId\n   * is created in PersonGroup - Create. Parameter personGroupId and largePersonGroupId should not\n   * be provided at the same time.\n   */\n  personGroupId?: string;\n  /**\n   * Using existing largePersonGroupId and personId for fast loading a specified person.\n   * largePersonGroupId is created in LargePersonGroup - Create. Parameter personGroupId and\n   * largePersonGroupId should not be provided at the same time.\n   */\n  largePersonGroupId?: string;\n  /**\n   * Specify a certain person in a person group or a large person group. personId is created in\n   * PersonGroup Person - Create or LargePersonGroup Person - Create.\n   */\n  personId: string;\n}\n\n/**\n * Request body for face to face verification.\n */\nexport interface VerifyFaceToFaceRequest {\n  /**\n   * FaceId of the first face, comes from Face - Detect\n   */\n  faceId1: string;\n  /**\n   * FaceId of the second face, comes from Face - Detect\n   */\n  faceId2: string;\n}\n\n/**\n * Result of the verify operation.\n */\nexport interface VerifyResult {\n  /**\n   * True if the two faces belong to the same person or the face belongs to the person, otherwise\n   * false.\n   */\n  isIdentical: boolean;\n  /**\n   * A number indicates the similarity confidence of whether two faces belong to the same person,\n   * or whether the face belongs to the person. By default, isIdentical is set to True if\n   * similarity confidence is greater than or equal to 0.5. This is useful for advanced users to\n   * override \"isIdentical\" and fine-tune the result on their own data.\n   */\n  confidence: number;\n}\n\n/**\n * PersonFace object.\n */\nexport interface PersistedFace {\n  /**\n   * The persistedFaceId of the target face, which is persisted and will not expire. Different from\n   * faceId created by Face - Detect and will expire in at the time specified by faceIdTimeToLive\n   * after the detection call.\n   */\n  persistedFaceId: string;\n  /**\n   * User-provided data attached to the face. The size limit is 1KB.\n   */\n  userData?: string;\n}\n\n/**\n * A combination of user defined name and user specified data for the person,\n * largePersonGroup/personGroup, and largeFaceList/faceList.\n */\nexport interface NonNullableNameAndNullableUserDataContract {\n  /**\n   * User defined name, maximum length is 128.\n   */\n  name: string;\n  /**\n   * User specified data. Length should not exceed 16KB.\n   */\n  userData?: string;\n}\n\n/**\n * A combination of user defined name and user specified data and recognition model name for\n * largePersonGroup/personGroup, and largeFaceList/faceList.\n */\nexport interface MetaDataContract extends NonNullableNameAndNullableUserDataContract {\n  /**\n   * Possible values include: 'recognition_01', 'recognition_02', 'recognition_03',\n   * 'recognition_04'. Default value: 'recognition_01'.\n   */\n  recognitionModel?: RecognitionModel;\n}\n\n/**\n * Face list object.\n */\nexport interface FaceList extends MetaDataContract {\n  /**\n   * FaceListId of the target face list.\n   */\n  faceListId: string;\n  /**\n   * Persisted faces within the face list.\n   */\n  persistedFaces?: PersistedFace[];\n}\n\n/**\n * Person group object.\n */\nexport interface PersonGroup extends MetaDataContract {\n  /**\n   * PersonGroupId of the target person group.\n   */\n  personGroupId: string;\n}\n\n/**\n * A combination of user defined name and user specified data for the person,\n * largePersonGroup/personGroup, and largeFaceList/faceList.\n */\nexport interface NameAndUserDataContract {\n  /**\n   * User defined name, maximum length is 128.\n   */\n  name?: string;\n  /**\n   * User specified data. Length should not exceed 16KB.\n   */\n  userData?: string;\n}\n\n/**\n * Person object.\n */\nexport interface Person extends NameAndUserDataContract {\n  /**\n   * PersonId of the target face list.\n   */\n  personId: string;\n  /**\n   * PersistedFaceIds of registered faces in the person. These persistedFaceIds are returned from\n   * Person - Add a Person Face, and will not expire.\n   */\n  persistedFaceIds?: string[];\n}\n\n/**\n * Large face list object.\n */\nexport interface LargeFaceList extends MetaDataContract {\n  /**\n   * LargeFaceListId of the target large face list.\n   */\n  largeFaceListId: string;\n}\n\n/**\n * Large person group object.\n */\nexport interface LargePersonGroup extends MetaDataContract {\n  /**\n   * LargePersonGroupId of the target large person groups\n   */\n  largePersonGroupId: string;\n}\n\n/**\n * Request to update face data.\n */\nexport interface UpdateFaceRequest {\n  /**\n   * User-provided data attached to the face. The size limit is 1KB.\n   */\n  userData?: string;\n}\n\n/**\n * Training status object.\n */\nexport interface TrainingStatus {\n  /**\n   * Training status: notstarted, running, succeeded, failed. If the training process is waiting to\n   * perform, the status is notstarted. If the training is ongoing, the status is running. Status\n   * succeed means this person group or large person group is ready for Face - Identify, or this\n   * large face list is ready for Face - Find Similar. Status failed is often caused by no person\n   * or no persisted face exist in the person group or large person group, or no persisted face\n   * exist in the large face list. Possible values include: 'nonstarted', 'running', 'succeeded',\n   * 'failed'\n   */\n  status: TrainingStatusType;\n  /**\n   * A combined UTC date and time string that describes the created time of the person group, large\n   * person group or large face list.\n   */\n  created: Date;\n  /**\n   * A combined UTC date and time string that describes the last modify time of the person group,\n   * large person group or large face list, could be null value when the group is not successfully\n   * trained.\n   */\n  lastAction?: Date;\n  /**\n   * A combined UTC date and time string that describes the last successful training time of the\n   * person group, large person group or large face list.\n   */\n  lastSuccessfulTraining?: Date;\n  /**\n   * Show failure message when training failed (omitted when training succeed).\n   */\n  message?: string;\n}\n\n/**\n * Request body for applying snapshot operation.\n */\nexport interface ApplySnapshotRequest {\n  /**\n   * User specified target object id to be created from the snapshot.\n   */\n  objectId: string;\n  /**\n   * Snapshot applying mode. Currently only CreateNew is supported, which means the apply operation\n   * will fail if target subscription already contains an object of same type and using the same\n   * objectId. Users can specify the \"objectId\" in request body to avoid such conflicts. Possible\n   * values include: 'CreateNew'. Default value: 'CreateNew'.\n   */\n  mode?: SnapshotApplyMode;\n}\n\n/**\n * Snapshot object.\n */\nexport interface Snapshot {\n  /**\n   * Snapshot id.\n   */\n  id: string;\n  /**\n   * Azure Cognitive Service Face account id of the subscriber who created the snapshot by Snapshot\n   * - Take.\n   */\n  account: string;\n  /**\n   * Type of the source object in the snapshot, specified by the subscriber who created the\n   * snapshot when calling Snapshot - Take. Currently FaceList, PersonGroup, LargeFaceList and\n   * LargePersonGroup are supported. Possible values include: 'FaceList', 'LargeFaceList',\n   * 'LargePersonGroup', 'PersonGroup'\n   */\n  type: SnapshotObjectType;\n  /**\n   * Array of the target Face subscription ids for the snapshot, specified by the user who created\n   * the snapshot when calling Snapshot - Take. For each snapshot, only subscriptions included in\n   * the applyScope of Snapshot - Take can apply it.\n   */\n  applyScope: string[];\n  /**\n   * User specified data about the snapshot for any purpose. Length should not exceed 16KB.\n   */\n  userData?: string;\n  /**\n   * A combined UTC date and time string that describes the created time of the snapshot. E.g.\n   * 2018-12-25T11:41:02.2331413Z.\n   */\n  createdTime: Date;\n  /**\n   * A combined UTC date and time string that describes the last time when the snapshot was created\n   * or updated by Snapshot - Update. E.g. 2018-12-25T11:51:27.8705696Z.\n   */\n  lastUpdateTime: Date;\n}\n\n/**\n * Request body for taking snapshot operation.\n */\nexport interface TakeSnapshotRequest {\n  /**\n   * User specified type for the source object to take snapshot from. Currently FaceList,\n   * PersonGroup, LargeFaceList and LargePersonGroup are supported. Possible values include:\n   * 'FaceList', 'LargeFaceList', 'LargePersonGroup', 'PersonGroup'\n   */\n  type: SnapshotObjectType;\n  /**\n   * User specified source object id to take snapshot from.\n   */\n  objectId: string;\n  /**\n   * User specified array of target Face subscription ids for the snapshot. For each snapshot, only\n   * subscriptions included in the applyScope of Snapshot - Take can apply it.\n   */\n  applyScope: string[];\n  /**\n   * User specified data about the snapshot for any purpose. Length should not exceed 16KB.\n   */\n  userData?: string;\n}\n\n/**\n * Request body for updating a snapshot, with a combination of user defined apply scope and user\n * specified data.\n */\nexport interface UpdateSnapshotRequest {\n  /**\n   * Array of the target Face subscription ids for the snapshot, specified by the user who created\n   * the snapshot when calling Snapshot - Take. For each snapshot, only subscriptions included in\n   * the applyScope of Snapshot - Take can apply it.\n   */\n  applyScope?: string[];\n  /**\n   * User specified data about the snapshot for any purpose. Length should not exceed 16KB.\n   */\n  userData?: string;\n}\n\n/**\n * Operation status object. Operation refers to the asynchronous backend task including taking a\n * snapshot and applying a snapshot.\n */\nexport interface OperationStatus {\n  /**\n   * Operation status: notstarted, running, succeeded, failed. If the operation is requested and\n   * waiting to perform, the status is notstarted. If the operation is ongoing in backend, the\n   * status is running. Status succeeded means the operation is completed successfully,\n   * specifically for snapshot taking operation, it illustrates the snapshot is well taken and\n   * ready to apply, and for snapshot applying operation, it presents the target object has\n   * finished creating by the snapshot and ready to be used. Status failed is often caused by\n   * editing the source object while taking the snapshot or editing the target object while\n   * applying the snapshot before completion, see the field \"message\" to check the failure reason.\n   * Possible values include: 'notstarted', 'running', 'succeeded', 'failed'\n   */\n  status: OperationStatusType;\n  /**\n   * A combined UTC date and time string that describes the time when the operation (take or apply\n   * a snapshot) is requested. E.g. 2018-12-25T11:41:02.2331413Z.\n   */\n  createdTime: Date;\n  /**\n   * A combined UTC date and time string that describes the last time the operation (take or apply\n   * a snapshot) is actively migrating data. The lastActionTime will keep increasing until the\n   * operation finishes. E.g. 2018-12-25T11:51:27.8705696Z.\n   */\n  lastActionTime?: Date;\n  /**\n   * When the operation succeeds successfully, for snapshot taking operation the snapshot id will\n   * be included in this field, and for snapshot applying operation, the path to get the target\n   * object will be returned in this field.\n   */\n  resourceLocation?: string;\n  /**\n   * Show failure message when operation fails (omitted when operation succeeds).\n   */\n  message?: string;\n}\n\n/**\n * An interface representing ImageUrl.\n */\nexport interface ImageUrl {\n  /**\n   * Publicly reachable URL of an image\n   */\n  url: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FaceFindSimilarOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * An existing user-specified unique candidate face list, created in Face List - Create a Face\n   * List. Face list contains a set of persistedFaceIds which are persisted and will never expire.\n   * Parameter faceListId, largeFaceListId and faceIds should not be provided at the same time.\n   */\n  faceListId?: string;\n  /**\n   * An existing user-specified unique candidate large face list, created in LargeFaceList -\n   * Create. Large face list contains a set of persistedFaceIds which are persisted and will never\n   * expire. Parameter faceListId, largeFaceListId and faceIds should not be provided at the same\n   * time.\n   */\n  largeFaceListId?: string;\n  /**\n   * An array of candidate faceIds. All of them are created by Face - Detect and the faceIds will\n   * expire at the time specified by faceIdTimeToLive after the detection call. The number of\n   * faceIds is limited to 1000. Parameter faceListId, largeFaceListId and faceIds should not be\n   * provided at the same time.\n   */\n  faceIds?: string[];\n  /**\n   * The number of top similar faces returned. The valid range is [1, 1000]. Default value: 20.\n   */\n  maxNumOfCandidatesReturned?: number;\n  /**\n   * Similar face searching mode. It can be \"matchPerson\" or \"matchFace\". Possible values include:\n   * 'matchPerson', 'matchFace'. Default value: 'matchPerson'.\n   */\n  mode?: FindSimilarMatchMode;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FaceIdentifyOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * PersonGroupId of the target person group, created by PersonGroup - Create. Parameter\n   * personGroupId and largePersonGroupId should not be provided at the same time.\n   */\n  personGroupId?: string;\n  /**\n   * LargePersonGroupId of the target large person group, created by LargePersonGroup - Create.\n   * Parameter personGroupId and largePersonGroupId should not be provided at the same time.\n   */\n  largePersonGroupId?: string;\n  /**\n   * The range of maxNumOfCandidatesReturned is between 1 and 100 (default is 1). Default value: 1.\n   */\n  maxNumOfCandidatesReturned?: number;\n  /**\n   * Confidence threshold of identification, used to judge whether one face belong to one person.\n   * The range of confidenceThreshold is [0, 1] (default specified by algorithm).\n   */\n  confidenceThreshold?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FaceDetectWithUrlOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * A value indicating whether the operation should return faceIds of detected faces. Default\n   * value: true.\n   */\n  returnFaceId?: boolean;\n  /**\n   * A value indicating whether the operation should return landmarks of the detected faces.\n   * Default value: false.\n   */\n  returnFaceLandmarks?: boolean;\n  /**\n   * Analyze and return the one or more specified face attributes in the comma-separated string\n   * like \"returnFaceAttributes=age,gender\". The available attributes depends on the\n   * 'detectionModel' specified. 'detection_01' supports age, gender, headPose, smile, facialHair,\n   * glasses, emotion, hair, makeup, occlusion, accessories, blur, exposure, noise, and\n   * qualityForRecognition. While 'detection_02' does not support any attributes and 'detection_03'\n   * only supports mask and qualityForRecognition. Additionally, qualityForRecognition is only\n   * supported when the 'recognitionModel' is specified as 'recognition_03' or 'recognition_04'.\n   * Note that each face attribute analysis has additional computational and time cost.\n   */\n  returnFaceAttributes?: FaceAttributeType[];\n  /**\n   * Name of recognition model. Recognition model is used when the face features are extracted and\n   * associated with detected faceIds, (Large)FaceList or (Large)PersonGroup. A recognition model\n   * name can be provided when performing Face - Detect or (Large)FaceList - Create or\n   * (Large)PersonGroup - Create. The default value is 'recognition_01', if latest model needed,\n   * please explicitly specify the model you need. Possible values include: 'recognition_01',\n   * 'recognition_02', 'recognition_03', 'recognition_04'. Default value: 'recognition_01'.\n   */\n  recognitionModel?: RecognitionModel;\n  /**\n   * A value indicating whether the operation should return 'recognitionModel' in response. Default\n   * value: false.\n   */\n  returnRecognitionModel?: boolean;\n  /**\n   * Name of detection model. Detection model is used to detect faces in the submitted image. A\n   * detection model name can be provided when performing Face - Detect or (Large)FaceList - Add\n   * Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model\n   * is needed, please explicitly specify it. Possible values include: 'detection_01',\n   * 'detection_02', 'detection_03'. Default value: 'detection_01'.\n   */\n  detectionModel?: DetectionModel;\n  /**\n   * The number of seconds for the faceId being cached. Supported range from 60 seconds up to 86400\n   * seconds. The default value is 86400 (24 hours). Default value: 86400.\n   */\n  faceIdTimeToLive?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FaceVerifyFaceToPersonOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * Using existing personGroupId and personId for fast loading a specified person. personGroupId\n   * is created in PersonGroup - Create. Parameter personGroupId and largePersonGroupId should not\n   * be provided at the same time.\n   */\n  personGroupId?: string;\n  /**\n   * Using existing largePersonGroupId and personId for fast loading a specified person.\n   * largePersonGroupId is created in LargePersonGroup - Create. Parameter personGroupId and\n   * largePersonGroupId should not be provided at the same time.\n   */\n  largePersonGroupId?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FaceDetectWithStreamOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * A value indicating whether the operation should return faceIds of detected faces. Default\n   * value: true.\n   */\n  returnFaceId?: boolean;\n  /**\n   * A value indicating whether the operation should return landmarks of the detected faces.\n   * Default value: false.\n   */\n  returnFaceLandmarks?: boolean;\n  /**\n   * Analyze and return the one or more specified face attributes in the comma-separated string\n   * like \"returnFaceAttributes=age,gender\". The available attributes depends on the\n   * 'detectionModel' specified. 'detection_01' supports age, gender, headPose, smile, facialHair,\n   * glasses, emotion, hair, makeup, occlusion, accessories, blur, exposure, noise, and\n   * qualityForRecognition. While 'detection_02' does not support any attributes and 'detection_03'\n   * only supports mask and qualityForRecognition. Additionally, qualityForRecognition is only\n   * supported when the 'recognitionModel' is specified as 'recognition_03' or 'recognition_04'.\n   * Note that each face attribute analysis has additional computational and time cost.\n   */\n  returnFaceAttributes?: FaceAttributeType[];\n  /**\n   * Name of recognition model. Recognition model is used when the face features are extracted and\n   * associated with detected faceIds, (Large)FaceList or (Large)PersonGroup. A recognition model\n   * name can be provided when performing Face - Detect or (Large)FaceList - Create or\n   * (Large)PersonGroup - Create. The default value is 'recognition_01', if latest model needed,\n   * please explicitly specify the model you need. Possible values include: 'recognition_01',\n   * 'recognition_02', 'recognition_03', 'recognition_04'. Default value: 'recognition_01'.\n   */\n  recognitionModel?: RecognitionModel;\n  /**\n   * A value indicating whether the operation should return 'recognitionModel' in response. Default\n   * value: false.\n   */\n  returnRecognitionModel?: boolean;\n  /**\n   * Name of detection model. Detection model is used to detect faces in the submitted image. A\n   * detection model name can be provided when performing Face - Detect or (Large)FaceList - Add\n   * Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model\n   * is needed, please explicitly specify it. Possible values include: 'detection_01',\n   * 'detection_02', 'detection_03'. Default value: 'detection_01'.\n   */\n  detectionModel?: DetectionModel;\n  /**\n   * The number of seconds for the faceId being cached. Supported range from 60 seconds up to 86400\n   * seconds. The default value is 86400 (24 hours). Default value: 86400.\n   */\n  faceIdTimeToLive?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface PersonGroupPersonCreateOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * User defined name, maximum length is 128.\n   */\n  name?: string;\n  /**\n   * User specified data. Length should not exceed 16KB.\n   */\n  userData?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface PersonGroupPersonListOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * Starting person id to return (used to list a range of persons).\n   */\n  start?: string;\n  /**\n   * Number of persons to return starting with the person id indicated by the 'start' parameter.\n   */\n  top?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface PersonGroupPersonUpdateOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * User defined name, maximum length is 128.\n   */\n  name?: string;\n  /**\n   * User specified data. Length should not exceed 16KB.\n   */\n  userData?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface PersonGroupPersonUpdateFaceOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * User-provided data attached to the face. The size limit is 1KB.\n   */\n  userData?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface PersonGroupPersonAddFaceFromUrlOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * User-specified data about the face for any purpose. The maximum length is 1KB.\n   */\n  userData?: string;\n  /**\n   * A face rectangle to specify the target face to be added to a person in the format of\n   * \"targetFace=left,top,width,height\". E.g. \"targetFace=10,10,100,100\". If there is more than one\n   * face in the image, targetFace is required to specify which face to add. No targetFace means\n   * there is only one face detected in the entire image.\n   */\n  targetFace?: number[];\n  /**\n   * Name of detection model. Detection model is used to detect faces in the submitted image. A\n   * detection model name can be provided when performing Face - Detect or (Large)FaceList - Add\n   * Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model\n   * is needed, please explicitly specify it. Possible values include: 'detection_01',\n   * 'detection_02', 'detection_03'. Default value: 'detection_01'.\n   */\n  detectionModel?: DetectionModel;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface PersonGroupPersonAddFaceFromStreamOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * User-specified data about the face for any purpose. The maximum length is 1KB.\n   */\n  userData?: string;\n  /**\n   * A face rectangle to specify the target face to be added to a person in the format of\n   * \"targetFace=left,top,width,height\". E.g. \"targetFace=10,10,100,100\". If there is more than one\n   * face in the image, targetFace is required to specify which face to add. No targetFace means\n   * there is only one face detected in the entire image.\n   */\n  targetFace?: number[];\n  /**\n   * Name of detection model. Detection model is used to detect faces in the submitted image. A\n   * detection model name can be provided when performing Face - Detect or (Large)FaceList - Add\n   * Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model\n   * is needed, please explicitly specify it. Possible values include: 'detection_01',\n   * 'detection_02', 'detection_03'. Default value: 'detection_01'.\n   */\n  detectionModel?: DetectionModel;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface PersonGroupCreateOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * User specified data. Length should not exceed 16KB.\n   */\n  userData?: string;\n  /**\n   * Possible values include: 'recognition_01', 'recognition_02', 'recognition_03',\n   * 'recognition_04'. Default value: 'recognition_01'.\n   */\n  recognitionModel?: RecognitionModel;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface PersonGroupGetOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * A value indicating whether the operation should return 'recognitionModel' in response. Default\n   * value: false.\n   */\n  returnRecognitionModel?: boolean;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface PersonGroupUpdateOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * User defined name, maximum length is 128.\n   */\n  name?: string;\n  /**\n   * User specified data. Length should not exceed 16KB.\n   */\n  userData?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface PersonGroupListOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * List person groups from the least personGroupId greater than the \"start\".\n   */\n  start?: string;\n  /**\n   * The number of person groups to list. Default value: 1000.\n   */\n  top?: number;\n  /**\n   * A value indicating whether the operation should return 'recognitionModel' in response. Default\n   * value: false.\n   */\n  returnRecognitionModel?: boolean;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FaceListCreateOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * User specified data. Length should not exceed 16KB.\n   */\n  userData?: string;\n  /**\n   * Possible values include: 'recognition_01', 'recognition_02', 'recognition_03',\n   * 'recognition_04'. Default value: 'recognition_01'.\n   */\n  recognitionModel?: RecognitionModel;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FaceListGetOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * A value indicating whether the operation should return 'recognitionModel' in response. Default\n   * value: false.\n   */\n  returnRecognitionModel?: boolean;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FaceListUpdateOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * User defined name, maximum length is 128.\n   */\n  name?: string;\n  /**\n   * User specified data. Length should not exceed 16KB.\n   */\n  userData?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FaceListListOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * A value indicating whether the operation should return 'recognitionModel' in response. Default\n   * value: false.\n   */\n  returnRecognitionModel?: boolean;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FaceListAddFaceFromUrlOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * User-specified data about the face for any purpose. The maximum length is 1KB.\n   */\n  userData?: string;\n  /**\n   * A face rectangle to specify the target face to be added to a person in the format of\n   * \"targetFace=left,top,width,height\". E.g. \"targetFace=10,10,100,100\". If there is more than one\n   * face in the image, targetFace is required to specify which face to add. No targetFace means\n   * there is only one face detected in the entire image.\n   */\n  targetFace?: number[];\n  /**\n   * Name of detection model. Detection model is used to detect faces in the submitted image. A\n   * detection model name can be provided when performing Face - Detect or (Large)FaceList - Add\n   * Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model\n   * is needed, please explicitly specify it. Possible values include: 'detection_01',\n   * 'detection_02', 'detection_03'. Default value: 'detection_01'.\n   */\n  detectionModel?: DetectionModel;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FaceListAddFaceFromStreamOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * User-specified data about the face for any purpose. The maximum length is 1KB.\n   */\n  userData?: string;\n  /**\n   * A face rectangle to specify the target face to be added to a person in the format of\n   * \"targetFace=left,top,width,height\". E.g. \"targetFace=10,10,100,100\". If there is more than one\n   * face in the image, targetFace is required to specify which face to add. No targetFace means\n   * there is only one face detected in the entire image.\n   */\n  targetFace?: number[];\n  /**\n   * Name of detection model. Detection model is used to detect faces in the submitted image. A\n   * detection model name can be provided when performing Face - Detect or (Large)FaceList - Add\n   * Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model\n   * is needed, please explicitly specify it. Possible values include: 'detection_01',\n   * 'detection_02', 'detection_03'. Default value: 'detection_01'.\n   */\n  detectionModel?: DetectionModel;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface LargePersonGroupPersonCreateOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * User defined name, maximum length is 128.\n   */\n  name?: string;\n  /**\n   * User specified data. Length should not exceed 16KB.\n   */\n  userData?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface LargePersonGroupPersonListOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * Starting person id to return (used to list a range of persons).\n   */\n  start?: string;\n  /**\n   * Number of persons to return starting with the person id indicated by the 'start' parameter.\n   */\n  top?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface LargePersonGroupPersonUpdateOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * User defined name, maximum length is 128.\n   */\n  name?: string;\n  /**\n   * User specified data. Length should not exceed 16KB.\n   */\n  userData?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface LargePersonGroupPersonUpdateFaceOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * User-provided data attached to the face. The size limit is 1KB.\n   */\n  userData?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface LargePersonGroupPersonAddFaceFromUrlOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * User-specified data about the face for any purpose. The maximum length is 1KB.\n   */\n  userData?: string;\n  /**\n   * A face rectangle to specify the target face to be added to a person in the format of\n   * \"targetFace=left,top,width,height\". E.g. \"targetFace=10,10,100,100\". If there is more than one\n   * face in the image, targetFace is required to specify which face to add. No targetFace means\n   * there is only one face detected in the entire image.\n   */\n  targetFace?: number[];\n  /**\n   * Name of detection model. Detection model is used to detect faces in the submitted image. A\n   * detection model name can be provided when performing Face - Detect or (Large)FaceList - Add\n   * Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model\n   * is needed, please explicitly specify it. Possible values include: 'detection_01',\n   * 'detection_02', 'detection_03'. Default value: 'detection_01'.\n   */\n  detectionModel?: DetectionModel;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface LargePersonGroupPersonAddFaceFromStreamOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * User-specified data about the face for any purpose. The maximum length is 1KB.\n   */\n  userData?: string;\n  /**\n   * A face rectangle to specify the target face to be added to a person in the format of\n   * \"targetFace=left,top,width,height\". E.g. \"targetFace=10,10,100,100\". If there is more than one\n   * face in the image, targetFace is required to specify which face to add. No targetFace means\n   * there is only one face detected in the entire image.\n   */\n  targetFace?: number[];\n  /**\n   * Name of detection model. Detection model is used to detect faces in the submitted image. A\n   * detection model name can be provided when performing Face - Detect or (Large)FaceList - Add\n   * Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model\n   * is needed, please explicitly specify it. Possible values include: 'detection_01',\n   * 'detection_02', 'detection_03'. Default value: 'detection_01'.\n   */\n  detectionModel?: DetectionModel;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface LargePersonGroupCreateOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * User specified data. Length should not exceed 16KB.\n   */\n  userData?: string;\n  /**\n   * Possible values include: 'recognition_01', 'recognition_02', 'recognition_03',\n   * 'recognition_04'. Default value: 'recognition_01'.\n   */\n  recognitionModel?: RecognitionModel;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface LargePersonGroupGetOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * A value indicating whether the operation should return 'recognitionModel' in response. Default\n   * value: false.\n   */\n  returnRecognitionModel?: boolean;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface LargePersonGroupUpdateOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * User defined name, maximum length is 128.\n   */\n  name?: string;\n  /**\n   * User specified data. Length should not exceed 16KB.\n   */\n  userData?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface LargePersonGroupListOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * List large person groups from the least largePersonGroupId greater than the \"start\".\n   */\n  start?: string;\n  /**\n   * The number of large person groups to list. Default value: 1000.\n   */\n  top?: number;\n  /**\n   * A value indicating whether the operation should return 'recognitionModel' in response. Default\n   * value: false.\n   */\n  returnRecognitionModel?: boolean;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface LargeFaceListCreateOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * User specified data. Length should not exceed 16KB.\n   */\n  userData?: string;\n  /**\n   * Possible values include: 'recognition_01', 'recognition_02', 'recognition_03',\n   * 'recognition_04'. Default value: 'recognition_01'.\n   */\n  recognitionModel?: RecognitionModel;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface LargeFaceListGetOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * A value indicating whether the operation should return 'recognitionModel' in response. Default\n   * value: false.\n   */\n  returnRecognitionModel?: boolean;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface LargeFaceListUpdateOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * User defined name, maximum length is 128.\n   */\n  name?: string;\n  /**\n   * User specified data. Length should not exceed 16KB.\n   */\n  userData?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface LargeFaceListListOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * A value indicating whether the operation should return 'recognitionModel' in response. Default\n   * value: false.\n   */\n  returnRecognitionModel?: boolean;\n  /**\n   * Starting large face list id to return (used to list a range of large face lists).\n   */\n  start?: string;\n  /**\n   * Number of large face lists to return starting with the large face list id indicated by the\n   * 'start' parameter.\n   */\n  top?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface LargeFaceListUpdateFaceOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * User-provided data attached to the face. The size limit is 1KB.\n   */\n  userData?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface LargeFaceListAddFaceFromUrlOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * User-specified data about the face for any purpose. The maximum length is 1KB.\n   */\n  userData?: string;\n  /**\n   * A face rectangle to specify the target face to be added to a person in the format of\n   * \"targetFace=left,top,width,height\". E.g. \"targetFace=10,10,100,100\". If there is more than one\n   * face in the image, targetFace is required to specify which face to add. No targetFace means\n   * there is only one face detected in the entire image.\n   */\n  targetFace?: number[];\n  /**\n   * Name of detection model. Detection model is used to detect faces in the submitted image. A\n   * detection model name can be provided when performing Face - Detect or (Large)FaceList - Add\n   * Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model\n   * is needed, please explicitly specify it. Possible values include: 'detection_01',\n   * 'detection_02', 'detection_03'. Default value: 'detection_01'.\n   */\n  detectionModel?: DetectionModel;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface LargeFaceListListFacesOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * Starting face id to return (used to list a range of faces).\n   */\n  start?: string;\n  /**\n   * Number of faces to return starting with the face id indicated by the 'start' parameter.\n   */\n  top?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface LargeFaceListAddFaceFromStreamOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * User-specified data about the face for any purpose. The maximum length is 1KB.\n   */\n  userData?: string;\n  /**\n   * A face rectangle to specify the target face to be added to a person in the format of\n   * \"targetFace=left,top,width,height\". E.g. \"targetFace=10,10,100,100\". If there is more than one\n   * face in the image, targetFace is required to specify which face to add. No targetFace means\n   * there is only one face detected in the entire image.\n   */\n  targetFace?: number[];\n  /**\n   * Name of detection model. Detection model is used to detect faces in the submitted image. A\n   * detection model name can be provided when performing Face - Detect or (Large)FaceList - Add\n   * Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model\n   * is needed, please explicitly specify it. Possible values include: 'detection_01',\n   * 'detection_02', 'detection_03'. Default value: 'detection_01'.\n   */\n  detectionModel?: DetectionModel;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface SnapshotTakeOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * User specified data about the snapshot for any purpose. Length should not exceed 16KB.\n   */\n  userData?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface SnapshotListOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * User specified object type as a search filter. Possible values include: 'FaceList',\n   * 'LargeFaceList', 'LargePersonGroup', 'PersonGroup'\n   */\n  type?: SnapshotObjectType;\n  /**\n   * User specified snapshot apply scopes as a search filter. ApplyScope is an array of the target\n   * Azure subscription ids for the snapshot, specified by the user who created the snapshot by\n   * Snapshot - Take.\n   */\n  applyScope?: string[];\n}\n\n/**\n * Optional Parameters.\n */\nexport interface SnapshotUpdateOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * Array of the target Face subscription ids for the snapshot, specified by the user who created\n   * the snapshot when calling Snapshot - Take. For each snapshot, only subscriptions included in\n   * the applyScope of Snapshot - Take can apply it.\n   */\n  applyScope?: string[];\n  /**\n   * User specified data about the snapshot for any purpose. Length should not exceed 16KB.\n   */\n  userData?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface SnapshotApplyOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * Snapshot applying mode. Currently only CreateNew is supported, which means the apply operation\n   * will fail if target subscription already contains an object of same type and using the same\n   * objectId. Users can specify the \"objectId\" in request body to avoid such conflicts. Possible\n   * values include: 'CreateNew'. Default value: 'CreateNew'.\n   */\n  mode?: SnapshotApplyMode;\n}\n\n/**\n * Defines headers for Take operation.\n */\nexport interface SnapshotTakeHeaders {\n  /**\n   * Operation location with an operation id used to track the progress of taking snapshot. The\n   * returned id is the operation id, rather than snapshot id. Snapshot id can be obtained only\n   * when the operation status becomes \"succeeded\" in OperationStatus - Get.\n   */\n  operationLocation: string;\n}\n\n/**\n * Defines headers for Apply operation.\n */\nexport interface SnapshotApplyHeaders {\n  /**\n   * Operation location with an operation id used to track the progress of applying the snapshot by\n   * OperationStatus - Get.\n   */\n  operationLocation: string;\n}\n\n/**\n * Defines values for RecognitionModel.\n * Possible values include: 'recognition_01', 'recognition_02', 'recognition_03', 'recognition_04'\n * @readonly\n * @enum {string}\n */\nexport type RecognitionModel = 'recognition_01' | 'recognition_02' | 'recognition_03' | 'recognition_04';\n\n/**\n * Defines values for Gender.\n * Possible values include: 'male', 'female'\n * @readonly\n * @enum {string}\n */\nexport type Gender = 'male' | 'female';\n\n/**\n * Defines values for GlassesType.\n * Possible values include: 'noGlasses', 'readingGlasses', 'sunglasses', 'swimmingGoggles'\n * @readonly\n * @enum {string}\n */\nexport type GlassesType = 'noGlasses' | 'readingGlasses' | 'sunglasses' | 'swimmingGoggles';\n\n/**\n * Defines values for HairColorType.\n * Possible values include: 'unknown', 'white', 'gray', 'blond', 'brown', 'red', 'black', 'other'\n * @readonly\n * @enum {string}\n */\nexport type HairColorType = 'unknown' | 'white' | 'gray' | 'blond' | 'brown' | 'red' | 'black' | 'other';\n\n/**\n * Defines values for AccessoryType.\n * Possible values include: 'headWear', 'glasses', 'mask'\n * @readonly\n * @enum {string}\n */\nexport type AccessoryType = 'headWear' | 'glasses' | 'mask';\n\n/**\n * Defines values for BlurLevel.\n * Possible values include: 'Low', 'Medium', 'High'\n * @readonly\n * @enum {string}\n */\nexport type BlurLevel = 'Low' | 'Medium' | 'High';\n\n/**\n * Defines values for ExposureLevel.\n * Possible values include: 'UnderExposure', 'GoodExposure', 'OverExposure'\n * @readonly\n * @enum {string}\n */\nexport type ExposureLevel = 'UnderExposure' | 'GoodExposure' | 'OverExposure';\n\n/**\n * Defines values for NoiseLevel.\n * Possible values include: 'Low', 'Medium', 'High'\n * @readonly\n * @enum {string}\n */\nexport type NoiseLevel = 'Low' | 'Medium' | 'High';\n\n/**\n * Defines values for MaskType.\n * Possible values include: 'noMask', 'faceMask', 'otherMaskOrOcclusion', 'uncertain'\n * @readonly\n * @enum {string}\n */\nexport type MaskType = 'noMask' | 'faceMask' | 'otherMaskOrOcclusion' | 'uncertain';\n\n/**\n * Defines values for QualityForRecognition.\n * Possible values include: 'Low', 'Medium', 'High'\n * @readonly\n * @enum {string}\n */\nexport type QualityForRecognition = 'Low' | 'Medium' | 'High';\n\n/**\n * Defines values for FindSimilarMatchMode.\n * Possible values include: 'matchPerson', 'matchFace'\n * @readonly\n * @enum {string}\n */\nexport type FindSimilarMatchMode = 'matchPerson' | 'matchFace';\n\n/**\n * Defines values for TrainingStatusType.\n * Possible values include: 'nonstarted', 'running', 'succeeded', 'failed'\n * @readonly\n * @enum {string}\n */\nexport type TrainingStatusType = 'nonstarted' | 'running' | 'succeeded' | 'failed';\n\n/**\n * Defines values for SnapshotApplyMode.\n * Possible values include: 'CreateNew'\n * @readonly\n * @enum {string}\n */\nexport type SnapshotApplyMode = 'CreateNew';\n\n/**\n * Defines values for SnapshotObjectType.\n * Possible values include: 'FaceList', 'LargeFaceList', 'LargePersonGroup', 'PersonGroup'\n * @readonly\n * @enum {string}\n */\nexport type SnapshotObjectType = 'FaceList' | 'LargeFaceList' | 'LargePersonGroup' | 'PersonGroup';\n\n/**\n * Defines values for OperationStatusType.\n * Possible values include: 'notstarted', 'running', 'succeeded', 'failed'\n * @readonly\n * @enum {string}\n */\nexport type OperationStatusType = 'notstarted' | 'running' | 'succeeded' | 'failed';\n\n/**\n * Defines values for FaceAttributeType.\n * Possible values include: 'age', 'gender', 'headPose', 'smile', 'facialHair', 'glasses',\n * 'emotion', 'hair', 'makeup', 'occlusion', 'accessories', 'blur', 'exposure', 'noise', 'mask',\n * 'qualityForRecognition'\n * @readonly\n * @enum {string}\n */\nexport type FaceAttributeType = 'age' | 'gender' | 'headPose' | 'smile' | 'facialHair' | 'glasses' | 'emotion' | 'hair' | 'makeup' | 'occlusion' | 'accessories' | 'blur' | 'exposure' | 'noise' | 'mask' | 'qualityForRecognition';\n\n/**\n * Defines values for DetectionModel.\n * Possible values include: 'detection_01', 'detection_02', 'detection_03'\n * @readonly\n * @enum {string}\n */\nexport type DetectionModel = 'detection_01' | 'detection_02' | 'detection_03';\n\n/**\n * Contains response data for the findSimilar operation.\n */\nexport type FaceFindSimilarResponse = Array<SimilarFace> & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: SimilarFace[];\n    };\n};\n\n/**\n * Contains response data for the group operation.\n */\nexport type FaceGroupResponse = GroupResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: GroupResult;\n    };\n};\n\n/**\n * Contains response data for the identify operation.\n */\nexport type FaceIdentifyResponse = Array<IdentifyResult> & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: IdentifyResult[];\n    };\n};\n\n/**\n * Contains response data for the verifyFaceToFace operation.\n */\nexport type FaceVerifyFaceToFaceResponse = VerifyResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: VerifyResult;\n    };\n};\n\n/**\n * Contains response data for the detectWithUrl operation.\n */\nexport type FaceDetectWithUrlResponse = Array<DetectedFace> & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: DetectedFace[];\n    };\n};\n\n/**\n * Contains response data for the verifyFaceToPerson operation.\n */\nexport type FaceVerifyFaceToPersonResponse = VerifyResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: VerifyResult;\n    };\n};\n\n/**\n * Contains response data for the detectWithStream operation.\n */\nexport type FaceDetectWithStreamResponse = Array<DetectedFace> & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: DetectedFace[];\n    };\n};\n\n/**\n * Contains response data for the create operation.\n */\nexport type PersonGroupPersonCreateResponse = Person & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Person;\n    };\n};\n\n/**\n * Contains response data for the list operation.\n */\nexport type PersonGroupPersonListResponse = Array<Person> & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Person[];\n    };\n};\n\n/**\n * Contains response data for the get operation.\n */\nexport type PersonGroupPersonGetResponse = Person & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Person;\n    };\n};\n\n/**\n * Contains response data for the getFace operation.\n */\nexport type PersonGroupPersonGetFaceResponse = PersistedFace & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: PersistedFace;\n    };\n};\n\n/**\n * Contains response data for the addFaceFromUrl operation.\n */\nexport type PersonGroupPersonAddFaceFromUrlResponse = PersistedFace & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: PersistedFace;\n    };\n};\n\n/**\n * Contains response data for the addFaceFromStream operation.\n */\nexport type PersonGroupPersonAddFaceFromStreamResponse = PersistedFace & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: PersistedFace;\n    };\n};\n\n/**\n * Contains response data for the get operation.\n */\nexport type PersonGroupGetResponse = PersonGroup & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: PersonGroup;\n    };\n};\n\n/**\n * Contains response data for the getTrainingStatus operation.\n */\nexport type PersonGroupGetTrainingStatusResponse = TrainingStatus & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: TrainingStatus;\n    };\n};\n\n/**\n * Contains response data for the list operation.\n */\nexport type PersonGroupListResponse = Array<PersonGroup> & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: PersonGroup[];\n    };\n};\n\n/**\n * Contains response data for the get operation.\n */\nexport type FaceListGetResponse = FaceList & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: FaceList;\n    };\n};\n\n/**\n * Contains response data for the list operation.\n */\nexport type FaceListListResponse = Array<FaceList> & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: FaceList[];\n    };\n};\n\n/**\n * Contains response data for the addFaceFromUrl operation.\n */\nexport type FaceListAddFaceFromUrlResponse = PersistedFace & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: PersistedFace;\n    };\n};\n\n/**\n * Contains response data for the addFaceFromStream operation.\n */\nexport type FaceListAddFaceFromStreamResponse = PersistedFace & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: PersistedFace;\n    };\n};\n\n/**\n * Contains response data for the create operation.\n */\nexport type LargePersonGroupPersonCreateResponse = Person & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Person;\n    };\n};\n\n/**\n * Contains response data for the list operation.\n */\nexport type LargePersonGroupPersonListResponse = Array<Person> & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Person[];\n    };\n};\n\n/**\n * Contains response data for the get operation.\n */\nexport type LargePersonGroupPersonGetResponse = Person & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Person;\n    };\n};\n\n/**\n * Contains response data for the getFace operation.\n */\nexport type LargePersonGroupPersonGetFaceResponse = PersistedFace & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: PersistedFace;\n    };\n};\n\n/**\n * Contains response data for the addFaceFromUrl operation.\n */\nexport type LargePersonGroupPersonAddFaceFromUrlResponse = PersistedFace & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: PersistedFace;\n    };\n};\n\n/**\n * Contains response data for the addFaceFromStream operation.\n */\nexport type LargePersonGroupPersonAddFaceFromStreamResponse = PersistedFace & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: PersistedFace;\n    };\n};\n\n/**\n * Contains response data for the get operation.\n */\nexport type LargePersonGroupGetResponse = LargePersonGroup & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: LargePersonGroup;\n    };\n};\n\n/**\n * Contains response data for the getTrainingStatus operation.\n */\nexport type LargePersonGroupGetTrainingStatusResponse = TrainingStatus & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: TrainingStatus;\n    };\n};\n\n/**\n * Contains response data for the list operation.\n */\nexport type LargePersonGroupListResponse = Array<LargePersonGroup> & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: LargePersonGroup[];\n    };\n};\n\n/**\n * Contains response data for the get operation.\n */\nexport type LargeFaceListGetResponse = LargeFaceList & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: LargeFaceList;\n    };\n};\n\n/**\n * Contains response data for the getTrainingStatus operation.\n */\nexport type LargeFaceListGetTrainingStatusResponse = TrainingStatus & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: TrainingStatus;\n    };\n};\n\n/**\n * Contains response data for the list operation.\n */\nexport type LargeFaceListListResponse = Array<LargeFaceList> & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: LargeFaceList[];\n    };\n};\n\n/**\n * Contains response data for the getFace operation.\n */\nexport type LargeFaceListGetFaceResponse = PersistedFace & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: PersistedFace;\n    };\n};\n\n/**\n * Contains response data for the addFaceFromUrl operation.\n */\nexport type LargeFaceListAddFaceFromUrlResponse = PersistedFace & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: PersistedFace;\n    };\n};\n\n/**\n * Contains response data for the listFaces operation.\n */\nexport type LargeFaceListListFacesResponse = Array<PersistedFace> & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: PersistedFace[];\n    };\n};\n\n/**\n * Contains response data for the addFaceFromStream operation.\n */\nexport type LargeFaceListAddFaceFromStreamResponse = PersistedFace & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: PersistedFace;\n    };\n};\n\n/**\n * Contains response data for the take operation.\n */\nexport type SnapshotTakeResponse = SnapshotTakeHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: SnapshotTakeHeaders;\n    };\n};\n\n/**\n * Contains response data for the list operation.\n */\nexport type SnapshotListResponse = Array<Snapshot> & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Snapshot[];\n    };\n};\n\n/**\n * Contains response data for the get operation.\n */\nexport type SnapshotGetResponse = Snapshot & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Snapshot;\n    };\n};\n\n/**\n * Contains response data for the apply operation.\n */\nexport type SnapshotApplyResponse = SnapshotApplyHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: SnapshotApplyHeaders;\n    };\n};\n\n/**\n * Contains response data for the getOperationStatus operation.\n */\nexport type SnapshotGetOperationStatusResponse = OperationStatus & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: OperationStatus;\n    };\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\n\nexport const ErrorModel: msRest.CompositeMapper = {\n  serializedName: \"Error\",\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const APIError: msRest.CompositeMapper = {\n  serializedName: \"APIError\",\n  type: {\n    name: \"Composite\",\n    className: \"APIError\",\n    modelProperties: {\n      error: {\n        serializedName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorModel\"\n        }\n      }\n    }\n  }\n};\n\nexport const FaceRectangle: msRest.CompositeMapper = {\n  serializedName: \"FaceRectangle\",\n  type: {\n    name: \"Composite\",\n    className: \"FaceRectangle\",\n    modelProperties: {\n      width: {\n        required: true,\n        serializedName: \"width\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      height: {\n        required: true,\n        serializedName: \"height\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      left: {\n        required: true,\n        serializedName: \"left\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      top: {\n        required: true,\n        serializedName: \"top\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Coordinate: msRest.CompositeMapper = {\n  serializedName: \"Coordinate\",\n  type: {\n    name: \"Composite\",\n    className: \"Coordinate\",\n    modelProperties: {\n      x: {\n        required: true,\n        serializedName: \"x\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      y: {\n        required: true,\n        serializedName: \"y\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const FaceLandmarks: msRest.CompositeMapper = {\n  serializedName: \"FaceLandmarks\",\n  type: {\n    name: \"Composite\",\n    className: \"FaceLandmarks\",\n    modelProperties: {\n      pupilLeft: {\n        serializedName: \"pupilLeft\",\n        type: {\n          name: \"Composite\",\n          className: \"Coordinate\"\n        }\n      },\n      pupilRight: {\n        serializedName: \"pupilRight\",\n        type: {\n          name: \"Composite\",\n          className: \"Coordinate\"\n        }\n      },\n      noseTip: {\n        serializedName: \"noseTip\",\n        type: {\n          name: \"Composite\",\n          className: \"Coordinate\"\n        }\n      },\n      mouthLeft: {\n        serializedName: \"mouthLeft\",\n        type: {\n          name: \"Composite\",\n          className: \"Coordinate\"\n        }\n      },\n      mouthRight: {\n        serializedName: \"mouthRight\",\n        type: {\n          name: \"Composite\",\n          className: \"Coordinate\"\n        }\n      },\n      eyebrowLeftOuter: {\n        serializedName: \"eyebrowLeftOuter\",\n        type: {\n          name: \"Composite\",\n          className: \"Coordinate\"\n        }\n      },\n      eyebrowLeftInner: {\n        serializedName: \"eyebrowLeftInner\",\n        type: {\n          name: \"Composite\",\n          className: \"Coordinate\"\n        }\n      },\n      eyeLeftOuter: {\n        serializedName: \"eyeLeftOuter\",\n        type: {\n          name: \"Composite\",\n          className: \"Coordinate\"\n        }\n      },\n      eyeLeftTop: {\n        serializedName: \"eyeLeftTop\",\n        type: {\n          name: \"Composite\",\n          className: \"Coordinate\"\n        }\n      },\n      eyeLeftBottom: {\n        serializedName: \"eyeLeftBottom\",\n        type: {\n          name: \"Composite\",\n          className: \"Coordinate\"\n        }\n      },\n      eyeLeftInner: {\n        serializedName: \"eyeLeftInner\",\n        type: {\n          name: \"Composite\",\n          className: \"Coordinate\"\n        }\n      },\n      eyebrowRightInner: {\n        serializedName: \"eyebrowRightInner\",\n        type: {\n          name: \"Composite\",\n          className: \"Coordinate\"\n        }\n      },\n      eyebrowRightOuter: {\n        serializedName: \"eyebrowRightOuter\",\n        type: {\n          name: \"Composite\",\n          className: \"Coordinate\"\n        }\n      },\n      eyeRightInner: {\n        serializedName: \"eyeRightInner\",\n        type: {\n          name: \"Composite\",\n          className: \"Coordinate\"\n        }\n      },\n      eyeRightTop: {\n        serializedName: \"eyeRightTop\",\n        type: {\n          name: \"Composite\",\n          className: \"Coordinate\"\n        }\n      },\n      eyeRightBottom: {\n        serializedName: \"eyeRightBottom\",\n        type: {\n          name: \"Composite\",\n          className: \"Coordinate\"\n        }\n      },\n      eyeRightOuter: {\n        serializedName: \"eyeRightOuter\",\n        type: {\n          name: \"Composite\",\n          className: \"Coordinate\"\n        }\n      },\n      noseRootLeft: {\n        serializedName: \"noseRootLeft\",\n        type: {\n          name: \"Composite\",\n          className: \"Coordinate\"\n        }\n      },\n      noseRootRight: {\n        serializedName: \"noseRootRight\",\n        type: {\n          name: \"Composite\",\n          className: \"Coordinate\"\n        }\n      },\n      noseLeftAlarTop: {\n        serializedName: \"noseLeftAlarTop\",\n        type: {\n          name: \"Composite\",\n          className: \"Coordinate\"\n        }\n      },\n      noseRightAlarTop: {\n        serializedName: \"noseRightAlarTop\",\n        type: {\n          name: \"Composite\",\n          className: \"Coordinate\"\n        }\n      },\n      noseLeftAlarOutTip: {\n        serializedName: \"noseLeftAlarOutTip\",\n        type: {\n          name: \"Composite\",\n          className: \"Coordinate\"\n        }\n      },\n      noseRightAlarOutTip: {\n        serializedName: \"noseRightAlarOutTip\",\n        type: {\n          name: \"Composite\",\n          className: \"Coordinate\"\n        }\n      },\n      upperLipTop: {\n        serializedName: \"upperLipTop\",\n        type: {\n          name: \"Composite\",\n          className: \"Coordinate\"\n        }\n      },\n      upperLipBottom: {\n        serializedName: \"upperLipBottom\",\n        type: {\n          name: \"Composite\",\n          className: \"Coordinate\"\n        }\n      },\n      underLipTop: {\n        serializedName: \"underLipTop\",\n        type: {\n          name: \"Composite\",\n          className: \"Coordinate\"\n        }\n      },\n      underLipBottom: {\n        serializedName: \"underLipBottom\",\n        type: {\n          name: \"Composite\",\n          className: \"Coordinate\"\n        }\n      }\n    }\n  }\n};\n\nexport const FacialHair: msRest.CompositeMapper = {\n  serializedName: \"FacialHair\",\n  type: {\n    name: \"Composite\",\n    className: \"FacialHair\",\n    modelProperties: {\n      moustache: {\n        nullable: false,\n        serializedName: \"moustache\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      beard: {\n        nullable: false,\n        serializedName: \"beard\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      sideburns: {\n        nullable: false,\n        serializedName: \"sideburns\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const HeadPose: msRest.CompositeMapper = {\n  serializedName: \"HeadPose\",\n  type: {\n    name: \"Composite\",\n    className: \"HeadPose\",\n    modelProperties: {\n      roll: {\n        nullable: false,\n        serializedName: \"roll\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      yaw: {\n        nullable: false,\n        serializedName: \"yaw\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      pitch: {\n        nullable: false,\n        serializedName: \"pitch\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Emotion: msRest.CompositeMapper = {\n  serializedName: \"Emotion\",\n  type: {\n    name: \"Composite\",\n    className: \"Emotion\",\n    modelProperties: {\n      anger: {\n        nullable: false,\n        serializedName: \"anger\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      contempt: {\n        nullable: false,\n        serializedName: \"contempt\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      disgust: {\n        nullable: false,\n        serializedName: \"disgust\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      fear: {\n        nullable: false,\n        serializedName: \"fear\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      happiness: {\n        nullable: false,\n        serializedName: \"happiness\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      neutral: {\n        nullable: false,\n        serializedName: \"neutral\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      sadness: {\n        nullable: false,\n        serializedName: \"sadness\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      surprise: {\n        nullable: false,\n        serializedName: \"surprise\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const HairColor: msRest.CompositeMapper = {\n  serializedName: \"HairColor\",\n  type: {\n    name: \"Composite\",\n    className: \"HairColor\",\n    modelProperties: {\n      color: {\n        nullable: false,\n        serializedName: \"color\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"unknown\",\n            \"white\",\n            \"gray\",\n            \"blond\",\n            \"brown\",\n            \"red\",\n            \"black\",\n            \"other\"\n          ]\n        }\n      },\n      confidence: {\n        nullable: false,\n        serializedName: \"confidence\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Hair: msRest.CompositeMapper = {\n  serializedName: \"Hair\",\n  type: {\n    name: \"Composite\",\n    className: \"Hair\",\n    modelProperties: {\n      bald: {\n        nullable: false,\n        serializedName: \"bald\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      invisible: {\n        nullable: false,\n        serializedName: \"invisible\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      hairColor: {\n        serializedName: \"hairColor\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"HairColor\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Makeup: msRest.CompositeMapper = {\n  serializedName: \"Makeup\",\n  type: {\n    name: \"Composite\",\n    className: \"Makeup\",\n    modelProperties: {\n      eyeMakeup: {\n        nullable: false,\n        serializedName: \"eyeMakeup\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      lipMakeup: {\n        nullable: false,\n        serializedName: \"lipMakeup\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const Occlusion: msRest.CompositeMapper = {\n  serializedName: \"Occlusion\",\n  type: {\n    name: \"Composite\",\n    className: \"Occlusion\",\n    modelProperties: {\n      foreheadOccluded: {\n        nullable: false,\n        serializedName: \"foreheadOccluded\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      eyeOccluded: {\n        nullable: false,\n        serializedName: \"eyeOccluded\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      mouthOccluded: {\n        nullable: false,\n        serializedName: \"mouthOccluded\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const Accessory: msRest.CompositeMapper = {\n  serializedName: \"Accessory\",\n  type: {\n    name: \"Composite\",\n    className: \"Accessory\",\n    modelProperties: {\n      type: {\n        nullable: false,\n        serializedName: \"type\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"headWear\",\n            \"glasses\",\n            \"mask\"\n          ]\n        }\n      },\n      confidence: {\n        nullable: false,\n        serializedName: \"confidence\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Blur: msRest.CompositeMapper = {\n  serializedName: \"Blur\",\n  type: {\n    name: \"Composite\",\n    className: \"Blur\",\n    modelProperties: {\n      blurLevel: {\n        nullable: false,\n        serializedName: \"blurLevel\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Low\",\n            \"Medium\",\n            \"High\"\n          ]\n        }\n      },\n      value: {\n        nullable: false,\n        serializedName: \"value\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Exposure: msRest.CompositeMapper = {\n  serializedName: \"Exposure\",\n  type: {\n    name: \"Composite\",\n    className: \"Exposure\",\n    modelProperties: {\n      exposureLevel: {\n        nullable: false,\n        serializedName: \"exposureLevel\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"UnderExposure\",\n            \"GoodExposure\",\n            \"OverExposure\"\n          ]\n        }\n      },\n      value: {\n        nullable: false,\n        serializedName: \"value\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Noise: msRest.CompositeMapper = {\n  serializedName: \"Noise\",\n  type: {\n    name: \"Composite\",\n    className: \"Noise\",\n    modelProperties: {\n      noiseLevel: {\n        nullable: false,\n        serializedName: \"noiseLevel\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Low\",\n            \"Medium\",\n            \"High\"\n          ]\n        }\n      },\n      value: {\n        nullable: false,\n        serializedName: \"value\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Mask: msRest.CompositeMapper = {\n  serializedName: \"Mask\",\n  type: {\n    name: \"Composite\",\n    className: \"Mask\",\n    modelProperties: {\n      type: {\n        nullable: false,\n        serializedName: \"type\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"noMask\",\n            \"faceMask\",\n            \"otherMaskOrOcclusion\",\n            \"uncertain\"\n          ]\n        }\n      },\n      noseAndMouthCovered: {\n        nullable: false,\n        serializedName: \"noseAndMouthCovered\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const FaceAttributes: msRest.CompositeMapper = {\n  serializedName: \"FaceAttributes\",\n  type: {\n    name: \"Composite\",\n    className: \"FaceAttributes\",\n    modelProperties: {\n      age: {\n        serializedName: \"age\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      gender: {\n        serializedName: \"gender\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"male\",\n            \"female\"\n          ]\n        }\n      },\n      smile: {\n        serializedName: \"smile\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      facialHair: {\n        serializedName: \"facialHair\",\n        type: {\n          name: \"Composite\",\n          className: \"FacialHair\"\n        }\n      },\n      glasses: {\n        serializedName: \"glasses\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"noGlasses\",\n            \"readingGlasses\",\n            \"sunglasses\",\n            \"swimmingGoggles\"\n          ]\n        }\n      },\n      headPose: {\n        serializedName: \"headPose\",\n        type: {\n          name: \"Composite\",\n          className: \"HeadPose\"\n        }\n      },\n      emotion: {\n        serializedName: \"emotion\",\n        type: {\n          name: \"Composite\",\n          className: \"Emotion\"\n        }\n      },\n      hair: {\n        serializedName: \"hair\",\n        type: {\n          name: \"Composite\",\n          className: \"Hair\"\n        }\n      },\n      makeup: {\n        serializedName: \"makeup\",\n        type: {\n          name: \"Composite\",\n          className: \"Makeup\"\n        }\n      },\n      occlusion: {\n        serializedName: \"occlusion\",\n        type: {\n          name: \"Composite\",\n          className: \"Occlusion\"\n        }\n      },\n      accessories: {\n        serializedName: \"accessories\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Accessory\"\n            }\n          }\n        }\n      },\n      blur: {\n        serializedName: \"blur\",\n        type: {\n          name: \"Composite\",\n          className: \"Blur\"\n        }\n      },\n      exposure: {\n        serializedName: \"exposure\",\n        type: {\n          name: \"Composite\",\n          className: \"Exposure\"\n        }\n      },\n      noise: {\n        serializedName: \"noise\",\n        type: {\n          name: \"Composite\",\n          className: \"Noise\"\n        }\n      },\n      mask: {\n        serializedName: \"mask\",\n        type: {\n          name: \"Composite\",\n          className: \"Mask\"\n        }\n      },\n      qualityForRecognition: {\n        serializedName: \"qualityForRecognition\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Low\",\n            \"Medium\",\n            \"High\"\n          ]\n        }\n      }\n    }\n  }\n};\n\nexport const DetectedFace: msRest.CompositeMapper = {\n  serializedName: \"DetectedFace\",\n  type: {\n    name: \"Composite\",\n    className: \"DetectedFace\",\n    modelProperties: {\n      faceId: {\n        serializedName: \"faceId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      recognitionModel: {\n        nullable: false,\n        serializedName: \"recognitionModel\",\n        defaultValue: 'recognition_01',\n        type: {\n          name: \"String\"\n        }\n      },\n      faceRectangle: {\n        required: true,\n        serializedName: \"faceRectangle\",\n        type: {\n          name: \"Composite\",\n          className: \"FaceRectangle\"\n        }\n      },\n      faceLandmarks: {\n        serializedName: \"faceLandmarks\",\n        type: {\n          name: \"Composite\",\n          className: \"FaceLandmarks\"\n        }\n      },\n      faceAttributes: {\n        serializedName: \"faceAttributes\",\n        type: {\n          name: \"Composite\",\n          className: \"FaceAttributes\"\n        }\n      }\n    }\n  }\n};\n\nexport const FindSimilarRequest: msRest.CompositeMapper = {\n  serializedName: \"FindSimilarRequest\",\n  type: {\n    name: \"Composite\",\n    className: \"FindSimilarRequest\",\n    modelProperties: {\n      faceId: {\n        required: true,\n        serializedName: \"faceId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      faceListId: {\n        serializedName: \"faceListId\",\n        constraints: {\n          MaxLength: 64,\n          Pattern: /^[a-z0-9-_]+$/\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      largeFaceListId: {\n        serializedName: \"largeFaceListId\",\n        constraints: {\n          MaxLength: 64,\n          Pattern: /^[a-z0-9-_]+$/\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      faceIds: {\n        serializedName: \"faceIds\",\n        constraints: {\n          MaxItems: 1000\n        },\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Uuid\"\n            }\n          }\n        }\n      },\n      maxNumOfCandidatesReturned: {\n        serializedName: \"maxNumOfCandidatesReturned\",\n        defaultValue: 20,\n        constraints: {\n          InclusiveMaximum: 1000,\n          InclusiveMinimum: 1\n        },\n        type: {\n          name: \"Number\"\n        }\n      },\n      mode: {\n        nullable: false,\n        serializedName: \"mode\",\n        defaultValue: 'matchPerson',\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"matchPerson\",\n            \"matchFace\"\n          ]\n        }\n      }\n    }\n  }\n};\n\nexport const SimilarFace: msRest.CompositeMapper = {\n  serializedName: \"SimilarFace\",\n  type: {\n    name: \"Composite\",\n    className: \"SimilarFace\",\n    modelProperties: {\n      faceId: {\n        serializedName: \"faceId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      persistedFaceId: {\n        serializedName: \"persistedFaceId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      confidence: {\n        required: true,\n        serializedName: \"confidence\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const GroupRequest: msRest.CompositeMapper = {\n  serializedName: \"GroupRequest\",\n  type: {\n    name: \"Composite\",\n    className: \"GroupRequest\",\n    modelProperties: {\n      faceIds: {\n        required: true,\n        serializedName: \"faceIds\",\n        constraints: {\n          MaxItems: 1000\n        },\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Uuid\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const GroupResult: msRest.CompositeMapper = {\n  serializedName: \"GroupResult\",\n  type: {\n    name: \"Composite\",\n    className: \"GroupResult\",\n    modelProperties: {\n      groups: {\n        required: true,\n        serializedName: \"groups\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Sequence\",\n              element: {\n                type: {\n                  name: \"Uuid\"\n                }\n              }\n            }\n          }\n        }\n      },\n      messyGroup: {\n        serializedName: \"messyGroup\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Uuid\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const IdentifyRequest: msRest.CompositeMapper = {\n  serializedName: \"IdentifyRequest\",\n  type: {\n    name: \"Composite\",\n    className: \"IdentifyRequest\",\n    modelProperties: {\n      faceIds: {\n        required: true,\n        serializedName: \"faceIds\",\n        constraints: {\n          MaxItems: 10\n        },\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Uuid\"\n            }\n          }\n        }\n      },\n      personGroupId: {\n        serializedName: \"personGroupId\",\n        constraints: {\n          MaxLength: 64,\n          Pattern: /^[a-z0-9-_]+$/\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      largePersonGroupId: {\n        serializedName: \"largePersonGroupId\",\n        constraints: {\n          MaxLength: 64,\n          Pattern: /^[a-z0-9-_]+$/\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      maxNumOfCandidatesReturned: {\n        serializedName: \"maxNumOfCandidatesReturned\",\n        defaultValue: 1,\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 1\n        },\n        type: {\n          name: \"Number\"\n        }\n      },\n      confidenceThreshold: {\n        serializedName: \"confidenceThreshold\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const IdentifyCandidate: msRest.CompositeMapper = {\n  serializedName: \"IdentifyCandidate\",\n  type: {\n    name: \"Composite\",\n    className: \"IdentifyCandidate\",\n    modelProperties: {\n      personId: {\n        required: true,\n        serializedName: \"personId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      confidence: {\n        required: true,\n        serializedName: \"confidence\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const IdentifyResult: msRest.CompositeMapper = {\n  serializedName: \"IdentifyResult\",\n  type: {\n    name: \"Composite\",\n    className: \"IdentifyResult\",\n    modelProperties: {\n      faceId: {\n        required: true,\n        serializedName: \"faceId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      candidates: {\n        required: true,\n        serializedName: \"candidates\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"IdentifyCandidate\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const VerifyFaceToPersonRequest: msRest.CompositeMapper = {\n  serializedName: \"VerifyFaceToPersonRequest\",\n  type: {\n    name: \"Composite\",\n    className: \"VerifyFaceToPersonRequest\",\n    modelProperties: {\n      faceId: {\n        required: true,\n        serializedName: \"faceId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      personGroupId: {\n        serializedName: \"personGroupId\",\n        constraints: {\n          MaxLength: 64,\n          Pattern: /^[a-z0-9-_]+$/\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      largePersonGroupId: {\n        serializedName: \"largePersonGroupId\",\n        constraints: {\n          MaxLength: 64,\n          Pattern: /^[a-z0-9-_]+$/\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      personId: {\n        required: true,\n        serializedName: \"personId\",\n        type: {\n          name: \"Uuid\"\n        }\n      }\n    }\n  }\n};\n\nexport const VerifyFaceToFaceRequest: msRest.CompositeMapper = {\n  serializedName: \"VerifyFaceToFaceRequest\",\n  type: {\n    name: \"Composite\",\n    className: \"VerifyFaceToFaceRequest\",\n    modelProperties: {\n      faceId1: {\n        required: true,\n        serializedName: \"faceId1\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      faceId2: {\n        required: true,\n        serializedName: \"faceId2\",\n        type: {\n          name: \"Uuid\"\n        }\n      }\n    }\n  }\n};\n\nexport const VerifyResult: msRest.CompositeMapper = {\n  serializedName: \"VerifyResult\",\n  type: {\n    name: \"Composite\",\n    className: \"VerifyResult\",\n    modelProperties: {\n      isIdentical: {\n        required: true,\n        serializedName: \"isIdentical\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      confidence: {\n        required: true,\n        serializedName: \"confidence\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const PersistedFace: msRest.CompositeMapper = {\n  serializedName: \"PersistedFace\",\n  type: {\n    name: \"Composite\",\n    className: \"PersistedFace\",\n    modelProperties: {\n      persistedFaceId: {\n        required: true,\n        serializedName: \"persistedFaceId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      userData: {\n        serializedName: \"userData\",\n        constraints: {\n          MaxLength: 1024\n        },\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NonNullableNameAndNullableUserDataContract: msRest.CompositeMapper = {\n  serializedName: \"NonNullableNameAndNullableUserDataContract\",\n  type: {\n    name: \"Composite\",\n    className: \"NonNullableNameAndNullableUserDataContract\",\n    modelProperties: {\n      name: {\n        required: true,\n        serializedName: \"name\",\n        constraints: {\n          MaxLength: 128,\n          MinLength: 1\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      userData: {\n        serializedName: \"userData\",\n        constraints: {\n          MaxLength: 16384\n        },\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MetaDataContract: msRest.CompositeMapper = {\n  serializedName: \"MetaDataContract\",\n  type: {\n    name: \"Composite\",\n    className: \"MetaDataContract\",\n    modelProperties: {\n      ...NonNullableNameAndNullableUserDataContract.type.modelProperties,\n      recognitionModel: {\n        nullable: false,\n        serializedName: \"recognitionModel\",\n        defaultValue: 'recognition_01',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FaceList: msRest.CompositeMapper = {\n  serializedName: \"FaceList\",\n  type: {\n    name: \"Composite\",\n    className: \"FaceList\",\n    modelProperties: {\n      ...MetaDataContract.type.modelProperties,\n      faceListId: {\n        required: true,\n        serializedName: \"faceListId\",\n        constraints: {\n          MaxLength: 64,\n          Pattern: /^[a-z0-9-_]+$/\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      persistedFaces: {\n        serializedName: \"persistedFaces\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PersistedFace\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const PersonGroup: msRest.CompositeMapper = {\n  serializedName: \"PersonGroup\",\n  type: {\n    name: \"Composite\",\n    className: \"PersonGroup\",\n    modelProperties: {\n      ...MetaDataContract.type.modelProperties,\n      personGroupId: {\n        required: true,\n        serializedName: \"personGroupId\",\n        constraints: {\n          MaxLength: 64,\n          Pattern: /^[a-z0-9-_]+$/\n        },\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameAndUserDataContract: msRest.CompositeMapper = {\n  serializedName: \"NameAndUserDataContract\",\n  type: {\n    name: \"Composite\",\n    className: \"NameAndUserDataContract\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        constraints: {\n          MaxLength: 128\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      userData: {\n        serializedName: \"userData\",\n        constraints: {\n          MaxLength: 16384\n        },\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Person: msRest.CompositeMapper = {\n  serializedName: \"Person\",\n  type: {\n    name: \"Composite\",\n    className: \"Person\",\n    modelProperties: {\n      ...NameAndUserDataContract.type.modelProperties,\n      personId: {\n        required: true,\n        serializedName: \"personId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      persistedFaceIds: {\n        serializedName: \"persistedFaceIds\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Uuid\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const LargeFaceList: msRest.CompositeMapper = {\n  serializedName: \"LargeFaceList\",\n  type: {\n    name: \"Composite\",\n    className: \"LargeFaceList\",\n    modelProperties: {\n      ...MetaDataContract.type.modelProperties,\n      largeFaceListId: {\n        required: true,\n        serializedName: \"largeFaceListId\",\n        constraints: {\n          MaxLength: 64,\n          Pattern: /^[a-z0-9-_]+$/\n        },\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const LargePersonGroup: msRest.CompositeMapper = {\n  serializedName: \"LargePersonGroup\",\n  type: {\n    name: \"Composite\",\n    className: \"LargePersonGroup\",\n    modelProperties: {\n      ...MetaDataContract.type.modelProperties,\n      largePersonGroupId: {\n        required: true,\n        serializedName: \"largePersonGroupId\",\n        constraints: {\n          MaxLength: 64,\n          Pattern: /^[a-z0-9-_]+$/\n        },\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const UpdateFaceRequest: msRest.CompositeMapper = {\n  serializedName: \"UpdateFaceRequest\",\n  type: {\n    name: \"Composite\",\n    className: \"UpdateFaceRequest\",\n    modelProperties: {\n      userData: {\n        serializedName: \"userData\",\n        constraints: {\n          MaxLength: 1024\n        },\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TrainingStatus: msRest.CompositeMapper = {\n  serializedName: \"TrainingStatus\",\n  type: {\n    name: \"Composite\",\n    className: \"TrainingStatus\",\n    modelProperties: {\n      status: {\n        required: true,\n        serializedName: \"status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"nonstarted\",\n            \"running\",\n            \"succeeded\",\n            \"failed\"\n          ]\n        }\n      },\n      created: {\n        required: true,\n        serializedName: \"createdDateTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      lastAction: {\n        serializedName: \"lastActionDateTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      lastSuccessfulTraining: {\n        serializedName: \"lastSuccessfulTrainingDateTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ApplySnapshotRequest: msRest.CompositeMapper = {\n  serializedName: \"ApplySnapshotRequest\",\n  type: {\n    name: \"Composite\",\n    className: \"ApplySnapshotRequest\",\n    modelProperties: {\n      objectId: {\n        required: true,\n        serializedName: \"objectId\",\n        constraints: {\n          MaxLength: 64,\n          Pattern: /^[a-z0-9-_]+$/\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      mode: {\n        nullable: false,\n        serializedName: \"mode\",\n        defaultValue: 'CreateNew',\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"CreateNew\"\n          ]\n        }\n      }\n    }\n  }\n};\n\nexport const Snapshot: msRest.CompositeMapper = {\n  serializedName: \"Snapshot\",\n  type: {\n    name: \"Composite\",\n    className: \"Snapshot\",\n    modelProperties: {\n      id: {\n        required: true,\n        serializedName: \"id\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      account: {\n        required: true,\n        serializedName: \"account\",\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        required: true,\n        serializedName: \"type\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"FaceList\",\n            \"LargeFaceList\",\n            \"LargePersonGroup\",\n            \"PersonGroup\"\n          ]\n        }\n      },\n      applyScope: {\n        required: true,\n        serializedName: \"applyScope\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Uuid\"\n            }\n          }\n        }\n      },\n      userData: {\n        serializedName: \"userData\",\n        constraints: {\n          MaxLength: 16384\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      createdTime: {\n        required: true,\n        serializedName: \"createdTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      lastUpdateTime: {\n        required: true,\n        serializedName: \"lastUpdateTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const TakeSnapshotRequest: msRest.CompositeMapper = {\n  serializedName: \"TakeSnapshotRequest\",\n  type: {\n    name: \"Composite\",\n    className: \"TakeSnapshotRequest\",\n    modelProperties: {\n      type: {\n        required: true,\n        serializedName: \"type\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"FaceList\",\n            \"LargeFaceList\",\n            \"LargePersonGroup\",\n            \"PersonGroup\"\n          ]\n        }\n      },\n      objectId: {\n        required: true,\n        serializedName: \"objectId\",\n        constraints: {\n          MaxLength: 64,\n          Pattern: /^[a-z0-9-_]+$/\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      applyScope: {\n        required: true,\n        serializedName: \"applyScope\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Uuid\"\n            }\n          }\n        }\n      },\n      userData: {\n        serializedName: \"userData\",\n        constraints: {\n          MaxLength: 16384\n        },\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const UpdateSnapshotRequest: msRest.CompositeMapper = {\n  serializedName: \"UpdateSnapshotRequest\",\n  type: {\n    name: \"Composite\",\n    className: \"UpdateSnapshotRequest\",\n    modelProperties: {\n      applyScope: {\n        serializedName: \"applyScope\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Uuid\"\n            }\n          }\n        }\n      },\n      userData: {\n        serializedName: \"userData\",\n        constraints: {\n          MaxLength: 16384\n        },\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OperationStatus: msRest.CompositeMapper = {\n  serializedName: \"OperationStatus\",\n  type: {\n    name: \"Composite\",\n    className: \"OperationStatus\",\n    modelProperties: {\n      status: {\n        required: true,\n        serializedName: \"status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"notstarted\",\n            \"running\",\n            \"succeeded\",\n            \"failed\"\n          ]\n        }\n      },\n      createdTime: {\n        required: true,\n        serializedName: \"createdTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      lastActionTime: {\n        serializedName: \"lastActionTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      resourceLocation: {\n        serializedName: \"resourceLocation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ImageUrl: msRest.CompositeMapper = {\n  serializedName: \"ImageUrl\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageUrl\",\n    modelProperties: {\n      url: {\n        required: true,\n        serializedName: \"url\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SnapshotTakeHeaders: msRest.CompositeMapper = {\n  serializedName: \"snapshot-take-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"SnapshotTakeHeaders\",\n    modelProperties: {\n      operationLocation: {\n        serializedName: \"operation-location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SnapshotApplyHeaders: msRest.CompositeMapper = {\n  serializedName: \"snapshot-apply-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"SnapshotApplyHeaders\",\n    modelProperties: {\n      operationLocation: {\n        serializedName: \"operation-location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nexport {\n  Accessory,\n  APIError,\n  Blur,\n  Coordinate,\n  DetectedFace,\n  Emotion,\n  ErrorModel,\n  Exposure,\n  FaceAttributes,\n  FaceLandmarks,\n  FaceRectangle,\n  FacialHair,\n  FindSimilarRequest,\n  GroupRequest,\n  GroupResult,\n  Hair,\n  HairColor,\n  HeadPose,\n  IdentifyCandidate,\n  IdentifyRequest,\n  IdentifyResult,\n  ImageUrl,\n  Makeup,\n  Mask,\n  Noise,\n  Occlusion,\n  SimilarFace,\n  VerifyFaceToFaceRequest,\n  VerifyFaceToPersonRequest,\n  VerifyResult\n} from \"../models/mappers\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\nexport const applyScope: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"applyScope\"\n  ],\n  mapper: {\n    serializedName: \"applyScope\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"Uuid\"\n        }\n      }\n    }\n  },\n  collectionFormat: msRest.QueryCollectionFormat.Csv\n};\nexport const detectionModel: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"detectionModel\"\n  ],\n  mapper: {\n    serializedName: \"detectionModel\",\n    defaultValue: 'detection_01',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const endpoint: msRest.OperationURLParameter = {\n  parameterPath: \"endpoint\",\n  mapper: {\n    required: true,\n    serializedName: \"Endpoint\",\n    defaultValue: '',\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\nexport const faceIdTimeToLive: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"faceIdTimeToLive\"\n  ],\n  mapper: {\n    serializedName: \"faceIdTimeToLive\",\n    defaultValue: 86400,\n    constraints: {\n      InclusiveMaximum: 86400,\n      InclusiveMinimum: 60\n    },\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const faceListId: msRest.OperationURLParameter = {\n  parameterPath: \"faceListId\",\n  mapper: {\n    required: true,\n    serializedName: \"faceListId\",\n    constraints: {\n      MaxLength: 64,\n      Pattern: /^[a-z0-9-_]+$/\n    },\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const largeFaceListId: msRest.OperationURLParameter = {\n  parameterPath: \"largeFaceListId\",\n  mapper: {\n    required: true,\n    serializedName: \"largeFaceListId\",\n    constraints: {\n      MaxLength: 64,\n      Pattern: /^[a-z0-9-_]+$/\n    },\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const largePersonGroupId: msRest.OperationURLParameter = {\n  parameterPath: \"largePersonGroupId\",\n  mapper: {\n    required: true,\n    serializedName: \"largePersonGroupId\",\n    constraints: {\n      MaxLength: 64,\n      Pattern: /^[a-z0-9-_]+$/\n    },\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const operationId: msRest.OperationURLParameter = {\n  parameterPath: \"operationId\",\n  mapper: {\n    required: true,\n    serializedName: \"operationId\",\n    type: {\n      name: \"Uuid\"\n    }\n  }\n};\nexport const persistedFaceId: msRest.OperationURLParameter = {\n  parameterPath: \"persistedFaceId\",\n  mapper: {\n    required: true,\n    serializedName: \"persistedFaceId\",\n    type: {\n      name: \"Uuid\"\n    }\n  }\n};\nexport const personGroupId: msRest.OperationURLParameter = {\n  parameterPath: \"personGroupId\",\n  mapper: {\n    required: true,\n    serializedName: \"personGroupId\",\n    constraints: {\n      MaxLength: 64,\n      Pattern: /^[a-z0-9-_]+$/\n    },\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const personId: msRest.OperationURLParameter = {\n  parameterPath: \"personId\",\n  mapper: {\n    required: true,\n    serializedName: \"personId\",\n    type: {\n      name: \"Uuid\"\n    }\n  }\n};\nexport const recognitionModel: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"recognitionModel\"\n  ],\n  mapper: {\n    serializedName: \"recognitionModel\",\n    defaultValue: 'recognition_01',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const returnFaceAttributes: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"returnFaceAttributes\"\n  ],\n  mapper: {\n    serializedName: \"returnFaceAttributes\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"age\",\n            \"gender\",\n            \"headPose\",\n            \"smile\",\n            \"facialHair\",\n            \"glasses\",\n            \"emotion\",\n            \"hair\",\n            \"makeup\",\n            \"occlusion\",\n            \"accessories\",\n            \"blur\",\n            \"exposure\",\n            \"noise\",\n            \"mask\",\n            \"qualityForRecognition\"\n          ]\n        }\n      }\n    }\n  },\n  collectionFormat: msRest.QueryCollectionFormat.Csv\n};\nexport const returnFaceId: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"returnFaceId\"\n  ],\n  mapper: {\n    serializedName: \"returnFaceId\",\n    defaultValue: true,\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\nexport const returnFaceLandmarks: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"returnFaceLandmarks\"\n  ],\n  mapper: {\n    serializedName: \"returnFaceLandmarks\",\n    defaultValue: false,\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\nexport const returnRecognitionModel: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"returnRecognitionModel\"\n  ],\n  mapper: {\n    serializedName: \"returnRecognitionModel\",\n    defaultValue: false,\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\nexport const snapshotId: msRest.OperationURLParameter = {\n  parameterPath: \"snapshotId\",\n  mapper: {\n    required: true,\n    serializedName: \"snapshotId\",\n    type: {\n      name: \"Uuid\"\n    }\n  }\n};\nexport const start0: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"start\"\n  ],\n  mapper: {\n    serializedName: \"start\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const start1: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"start\"\n  ],\n  mapper: {\n    serializedName: \"start\",\n    constraints: {\n      MaxLength: 64\n    },\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const targetFace: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"targetFace\"\n  ],\n  mapper: {\n    serializedName: \"targetFace\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  },\n  collectionFormat: msRest.QueryCollectionFormat.Csv\n};\nexport const top0: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"top\"\n  ],\n  mapper: {\n    serializedName: \"top\",\n    constraints: {\n      InclusiveMaximum: 1000,\n      InclusiveMinimum: 1\n    },\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const top1: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"top\"\n  ],\n  mapper: {\n    serializedName: \"top\",\n    defaultValue: 1000,\n    constraints: {\n      InclusiveMaximum: 1000,\n      InclusiveMinimum: 1\n    },\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const type: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"type\"\n  ],\n  mapper: {\n    serializedName: \"type\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\n        \"FaceList\",\n        \"LargeFaceList\",\n        \"LargePersonGroup\",\n        \"PersonGroup\"\n      ]\n    }\n  }\n};\nexport const userData: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"userData\"\n  ],\n  mapper: {\n    serializedName: \"userData\",\n    constraints: {\n      MaxLength: 1024\n    },\n    type: {\n      name: \"String\"\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/faceMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { FaceClientContext } from \"../faceClientContext\";\n\n/** Class representing a Face. */\nexport class Face {\n  private readonly client: FaceClientContext;\n\n  /**\n   * Create a Face.\n   * @param {FaceClientContext} client Reference to the service client.\n   */\n  constructor(client: FaceClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Given query face's faceId, to search the similar-looking faces from a faceId array, a face list\n   * or a large face list. faceId array contains the faces created by [Face - Detect With\n   * Url](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl) or [Face - Detect With\n   * Stream](https://docs.microsoft.com/rest/api/faceapi/face/detectwithstream), which will expire at\n   * the time specified by faceIdTimeToLive after creation. A \"faceListId\" is created by [FaceList -\n   * Create](https://docs.microsoft.com/rest/api/faceapi/facelist/create) containing persistedFaceIds\n   * that will not expire. And a \"largeFaceListId\" is created by [LargeFaceList -\n   * Create](https://docs.microsoft.com/rest/api/faceapi/largefacelist/create) containing\n   * persistedFaceIds that will also not expire. Depending on the input the returned similar faces\n   * list contains faceIds or persistedFaceIds ranked by similarity.\n   * <br/>Find similar has two working modes, \"matchPerson\" and \"matchFace\". \"matchPerson\" is the\n   * default mode that it tries to find faces of the same person as possible by using internal\n   * same-person thresholds. It is useful to find a known person's other photos. Note that an empty\n   * list will be returned if no faces pass the internal thresholds. \"matchFace\" mode ignores\n   * same-person thresholds and returns ranked similar faces anyway, even the similarity is low. It\n   * can be used in the cases like searching celebrity-looking faces.\n   * <br/>The 'recognitionModel' associated with the query face's faceId should be the same as the\n   * 'recognitionModel' used by the target faceId array, face list or large face list.\n   * @param faceId FaceId of the query face. User needs to call Face - Detect first to get a valid\n   * faceId. Note that this faceId is not persisted and will expire at the time specified by\n   * faceIdTimeToLive after the detection call\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FaceFindSimilarResponse>\n   */\n  findSimilar(faceId: string, options?: Models.FaceFindSimilarOptionalParams): Promise<Models.FaceFindSimilarResponse>;\n  /**\n   * @param faceId FaceId of the query face. User needs to call Face - Detect first to get a valid\n   * faceId. Note that this faceId is not persisted and will expire at the time specified by\n   * faceIdTimeToLive after the detection call\n   * @param callback The callback\n   */\n  findSimilar(faceId: string, callback: msRest.ServiceCallback<Models.SimilarFace[]>): void;\n  /**\n   * @param faceId FaceId of the query face. User needs to call Face - Detect first to get a valid\n   * faceId. Note that this faceId is not persisted and will expire at the time specified by\n   * faceIdTimeToLive after the detection call\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  findSimilar(faceId: string, options: Models.FaceFindSimilarOptionalParams, callback: msRest.ServiceCallback<Models.SimilarFace[]>): void;\n  findSimilar(faceId: string, options?: Models.FaceFindSimilarOptionalParams | msRest.ServiceCallback<Models.SimilarFace[]>, callback?: msRest.ServiceCallback<Models.SimilarFace[]>): Promise<Models.FaceFindSimilarResponse> {\n    return this.client.sendOperationRequest(\n      {\n        faceId,\n        options\n      },\n      findSimilarOperationSpec,\n      callback) as Promise<Models.FaceFindSimilarResponse>;\n  }\n\n  /**\n   * Divide candidate faces into groups based on face similarity.<br />\n   * * The output is one or more disjointed face groups and a messyGroup. A face group contains faces\n   * that have similar looking, often of the same person. Face groups are ranked by group size, i.e.\n   * number of faces. Notice that faces belonging to a same person might be split into several groups\n   * in the result.\n   * * MessyGroup is a special face group containing faces that cannot find any similar counterpart\n   * face from original faces. The messyGroup will not appear in the result if all faces found their\n   * counterparts.\n   * * Group API needs at least 2 candidate faces and 1000 at most. We suggest to try [Face -\n   * Verify](https://docs.microsoft.com/rest/api/faceapi/face/verifyfacetoface) when you only have 2\n   * candidate faces.\n   * * The 'recognitionModel' associated with the query faces' faceIds should be the same.\n   * @param faceIds Array of candidate faceId created by Face - Detect. The maximum is 1000 faces\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FaceGroupResponse>\n   */\n  group(faceIds: string[], options?: msRest.RequestOptionsBase): Promise<Models.FaceGroupResponse>;\n  /**\n   * @param faceIds Array of candidate faceId created by Face - Detect. The maximum is 1000 faces\n   * @param callback The callback\n   */\n  group(faceIds: string[], callback: msRest.ServiceCallback<Models.GroupResult>): void;\n  /**\n   * @param faceIds Array of candidate faceId created by Face - Detect. The maximum is 1000 faces\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  group(faceIds: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GroupResult>): void;\n  group(faceIds: string[], options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GroupResult>, callback?: msRest.ServiceCallback<Models.GroupResult>): Promise<Models.FaceGroupResponse> {\n    return this.client.sendOperationRequest(\n      {\n        faceIds,\n        options\n      },\n      groupOperationSpec,\n      callback) as Promise<Models.FaceGroupResponse>;\n  }\n\n  /**\n   * 1-to-many identification to find the closest matches of the specific query person face from a\n   * person group or large person group.\n   * <br/> For each face in the faceIds array, Face Identify will compute similarities between the\n   * query face and all the faces in the person group (given by personGroupId) or large person group\n   * (given by largePersonGroupId), and return candidate person(s) for that face ranked by similarity\n   * confidence. The person group/large person group should be trained to make it ready for\n   * identification. See more in [PersonGroup -\n   * Train](https://docs.microsoft.com/rest/api/faceapi/persongroup/train) and [LargePersonGroup -\n   * Train](https://docs.microsoft.com/rest/api/faceapi/largepersongroup/train).\n   * <br/>\n   *\n   * Remarks:<br />\n   * * The algorithm allows more than one face to be identified independently at the same request,\n   * but no more than 10 faces.\n   * * Each person in the person group/large person group could have more than one face, but no more\n   * than 248 faces.\n   * * Higher face image quality means better identification precision. Please consider high-quality\n   * faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n   * * Number of candidates returned is restricted by maxNumOfCandidatesReturned and\n   * confidenceThreshold. If no person is identified, the returned candidates will be an empty array.\n   * * Try [Face - Find Similar](https://docs.microsoft.com/rest/api/faceapi/face/findsimilar) when\n   * you need to find similar faces from a face list/large face list instead of a person group/large\n   * person group.\n   * * The 'recognitionModel' associated with the query faces' faceIds should be the same as the\n   * 'recognitionModel' used by the target person group or large person group.\n   * @param faceIds Array of query faces faceIds, created by the Face - Detect. Each of the faces are\n   * identified independently. The valid number of faceIds is between [1, 10].\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FaceIdentifyResponse>\n   */\n  identify(faceIds: string[], options?: Models.FaceIdentifyOptionalParams): Promise<Models.FaceIdentifyResponse>;\n  /**\n   * @param faceIds Array of query faces faceIds, created by the Face - Detect. Each of the faces are\n   * identified independently. The valid number of faceIds is between [1, 10].\n   * @param callback The callback\n   */\n  identify(faceIds: string[], callback: msRest.ServiceCallback<Models.IdentifyResult[]>): void;\n  /**\n   * @param faceIds Array of query faces faceIds, created by the Face - Detect. Each of the faces are\n   * identified independently. The valid number of faceIds is between [1, 10].\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  identify(faceIds: string[], options: Models.FaceIdentifyOptionalParams, callback: msRest.ServiceCallback<Models.IdentifyResult[]>): void;\n  identify(faceIds: string[], options?: Models.FaceIdentifyOptionalParams | msRest.ServiceCallback<Models.IdentifyResult[]>, callback?: msRest.ServiceCallback<Models.IdentifyResult[]>): Promise<Models.FaceIdentifyResponse> {\n    return this.client.sendOperationRequest(\n      {\n        faceIds,\n        options\n      },\n      identifyOperationSpec,\n      callback) as Promise<Models.FaceIdentifyResponse>;\n  }\n\n  /**\n   * Verify whether two faces belong to a same person or whether one face belongs to a person.\n   * <br/>\n   * Remarks:<br />\n   * * Higher face image quality means better identification precision. Please consider high-quality\n   * faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n   * * For the scenarios that are sensitive to accuracy please make your own judgment.\n   * * The 'recognitionModel' associated with the query faces' faceIds should be the same as the\n   * 'recognitionModel' used by the target face, person group or large person group.\n   * @param faceId1 FaceId of the first face, comes from Face - Detect\n   * @param faceId2 FaceId of the second face, comes from Face - Detect\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FaceVerifyFaceToFaceResponse>\n   */\n  verifyFaceToFace(faceId1: string, faceId2: string, options?: msRest.RequestOptionsBase): Promise<Models.FaceVerifyFaceToFaceResponse>;\n  /**\n   * @param faceId1 FaceId of the first face, comes from Face - Detect\n   * @param faceId2 FaceId of the second face, comes from Face - Detect\n   * @param callback The callback\n   */\n  verifyFaceToFace(faceId1: string, faceId2: string, callback: msRest.ServiceCallback<Models.VerifyResult>): void;\n  /**\n   * @param faceId1 FaceId of the first face, comes from Face - Detect\n   * @param faceId2 FaceId of the second face, comes from Face - Detect\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  verifyFaceToFace(faceId1: string, faceId2: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerifyResult>): void;\n  verifyFaceToFace(faceId1: string, faceId2: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VerifyResult>, callback?: msRest.ServiceCallback<Models.VerifyResult>): Promise<Models.FaceVerifyFaceToFaceResponse> {\n    return this.client.sendOperationRequest(\n      {\n        faceId1,\n        faceId2,\n        options\n      },\n      verifyFaceToFaceOperationSpec,\n      callback) as Promise<Models.FaceVerifyFaceToFaceResponse>;\n  }\n\n  /**\n   * Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks,\n   * and attributes.<br />\n   * * No image will be stored. Only the extracted face feature will be stored on server. The faceId\n   * is an identifier of the face feature and will be used in [Face -\n   * Identify](https://docs.microsoft.com/rest/api/faceapi/face/identify), [Face -\n   * Verify](https://docs.microsoft.com/rest/api/faceapi/face/verifyfacetoface), and [Face - Find\n   * Similar](https://docs.microsoft.com/rest/api/faceapi/face/findsimilar). The stored face\n   * feature(s) will expire and be deleted at the time specified by faceIdTimeToLive after the\n   * original detection call.\n   * * Optional parameters include faceId, landmarks, and attributes. Attributes include age, gender,\n   * headPose, smile, facialHair, glasses, emotion, hair, makeup, occlusion, accessories, blur,\n   * exposure, noise, mask, and qualityForRecognition. Some of the results returned for specific\n   * attributes may not be highly accurate.\n   * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is\n   * from 1KB to 6MB.\n   * * Up to 100 faces can be returned for an image. Faces are ranked by face rectangle size from\n   * large to small.\n   * * For optimal results when querying [Face -\n   * Identify](https://docs.microsoft.com/rest/api/faceapi/face/identify), [Face -\n   * Verify](https://docs.microsoft.com/rest/api/faceapi/face/verifyfacetoface), and [Face - Find\n   * Similar](https://docs.microsoft.com/rest/api/faceapi/face/findsimilar) ('returnFaceId' is true),\n   * please use faces that are: frontal, clear, and with a minimum size of 200x200 pixels (100 pixels\n   * between eyes).\n   * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels.\n   * Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum\n   * face size.\n   * * Different 'detectionModel' values can be provided. To use and compare different detection\n   * models, please refer to [How to specify a detection\n   * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).\n   *\n   * * Different 'recognitionModel' values are provided. If follow-up operations like Verify,\n   * Identify, Find Similar are needed, please specify the recognition model with 'recognitionModel'\n   * parameter. The default value for 'recognitionModel' is 'recognition_01', if latest model needed,\n   * please explicitly specify the model you need in this parameter. Once specified, the detected\n   * faceIds will be associated with the specified recognition model. More details, please refer to\n   * [Specify a recognition\n   * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model).\n   * @param url Publicly reachable URL of an image\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FaceDetectWithUrlResponse>\n   */\n  detectWithUrl(url: string, options?: Models.FaceDetectWithUrlOptionalParams): Promise<Models.FaceDetectWithUrlResponse>;\n  /**\n   * @param url Publicly reachable URL of an image\n   * @param callback The callback\n   */\n  detectWithUrl(url: string, callback: msRest.ServiceCallback<Models.DetectedFace[]>): void;\n  /**\n   * @param url Publicly reachable URL of an image\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  detectWithUrl(url: string, options: Models.FaceDetectWithUrlOptionalParams, callback: msRest.ServiceCallback<Models.DetectedFace[]>): void;\n  detectWithUrl(url: string, options?: Models.FaceDetectWithUrlOptionalParams | msRest.ServiceCallback<Models.DetectedFace[]>, callback?: msRest.ServiceCallback<Models.DetectedFace[]>): Promise<Models.FaceDetectWithUrlResponse> {\n    return this.client.sendOperationRequest(\n      {\n        url,\n        options\n      },\n      detectWithUrlOperationSpec,\n      callback) as Promise<Models.FaceDetectWithUrlResponse>;\n  }\n\n  /**\n   * Verify whether two faces belong to a same person. Compares a face Id with a Person Id\n   * @param faceId FaceId of the face, comes from Face - Detect\n   * @param personId Specify a certain person in a person group or a large person group. personId is\n   * created in PersonGroup Person - Create or LargePersonGroup Person - Create.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FaceVerifyFaceToPersonResponse>\n   */\n  verifyFaceToPerson(faceId: string, personId: string, options?: Models.FaceVerifyFaceToPersonOptionalParams): Promise<Models.FaceVerifyFaceToPersonResponse>;\n  /**\n   * @param faceId FaceId of the face, comes from Face - Detect\n   * @param personId Specify a certain person in a person group or a large person group. personId is\n   * created in PersonGroup Person - Create or LargePersonGroup Person - Create.\n   * @param callback The callback\n   */\n  verifyFaceToPerson(faceId: string, personId: string, callback: msRest.ServiceCallback<Models.VerifyResult>): void;\n  /**\n   * @param faceId FaceId of the face, comes from Face - Detect\n   * @param personId Specify a certain person in a person group or a large person group. personId is\n   * created in PersonGroup Person - Create or LargePersonGroup Person - Create.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  verifyFaceToPerson(faceId: string, personId: string, options: Models.FaceVerifyFaceToPersonOptionalParams, callback: msRest.ServiceCallback<Models.VerifyResult>): void;\n  verifyFaceToPerson(faceId: string, personId: string, options?: Models.FaceVerifyFaceToPersonOptionalParams | msRest.ServiceCallback<Models.VerifyResult>, callback?: msRest.ServiceCallback<Models.VerifyResult>): Promise<Models.FaceVerifyFaceToPersonResponse> {\n    return this.client.sendOperationRequest(\n      {\n        faceId,\n        personId,\n        options\n      },\n      verifyFaceToPersonOperationSpec,\n      callback) as Promise<Models.FaceVerifyFaceToPersonResponse>;\n  }\n\n  /**\n   * Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks,\n   * and attributes.<br />\n   * * No image will be stored. Only the extracted face feature will be stored on server. The faceId\n   * is an identifier of the face feature and will be used in [Face -\n   * Identify](https://docs.microsoft.com/rest/api/faceapi/face/identify), [Face -\n   * Verify](https://docs.microsoft.com/rest/api/faceapi/face/verifyfacetoface), and [Face - Find\n   * Similar](https://docs.microsoft.com/rest/api/faceapi/face/findsimilar). The stored face\n   * feature(s) will expire and be deleted at the time specified by faceIdTimeToLive after the\n   * original detection call.\n   * * Optional parameters include faceId, landmarks, and attributes. Attributes include age, gender,\n   * headPose, smile, facialHair, glasses, emotion, hair, makeup, occlusion, accessories, blur,\n   * exposure, noise, mask, and qualityForRecognition. Some of the results returned for specific\n   * attributes may not be highly accurate.\n   * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is\n   * from 1KB to 6MB.\n   * * Up to 100 faces can be returned for an image. Faces are ranked by face rectangle size from\n   * large to small.\n   * * For optimal results when querying [Face -\n   * Identify](https://docs.microsoft.com/rest/api/faceapi/face/identify), [Face -\n   * Verify](https://docs.microsoft.com/rest/api/faceapi/face/verifyfacetoface), and [Face - Find\n   * Similar](https://docs.microsoft.com/rest/api/faceapi/face/findsimilar) ('returnFaceId' is true),\n   * please use faces that are: frontal, clear, and with a minimum size of 200x200 pixels (100 pixels\n   * between eyes).\n   * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels.\n   * Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum\n   * face size.\n   * * Different 'detectionModel' values can be provided. To use and compare different detection\n   * models, please refer to [How to specify a detection\n   * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)\n   * * Different 'recognitionModel' values are provided. If follow-up operations like Verify,\n   * Identify, Find Similar are needed, please specify the recognition model with 'recognitionModel'\n   * parameter. The default value for 'recognitionModel' is 'recognition_01', if latest model needed,\n   * please explicitly specify the model you need in this parameter. Once specified, the detected\n   * faceIds will be associated with the specified recognition model. More details, please refer to\n   * [Specify a recognition\n   * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model).\n   * @param image An image stream.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FaceDetectWithStreamResponse>\n   */\n  detectWithStream(image: msRest.HttpRequestBody, options?: Models.FaceDetectWithStreamOptionalParams): Promise<Models.FaceDetectWithStreamResponse>;\n  /**\n   * @param image An image stream.\n   * @param callback The callback\n   */\n  detectWithStream(image: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.DetectedFace[]>): void;\n  /**\n   * @param image An image stream.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  detectWithStream(image: msRest.HttpRequestBody, options: Models.FaceDetectWithStreamOptionalParams, callback: msRest.ServiceCallback<Models.DetectedFace[]>): void;\n  detectWithStream(image: msRest.HttpRequestBody, options?: Models.FaceDetectWithStreamOptionalParams | msRest.ServiceCallback<Models.DetectedFace[]>, callback?: msRest.ServiceCallback<Models.DetectedFace[]>): Promise<Models.FaceDetectWithStreamResponse> {\n    return this.client.sendOperationRequest(\n      {\n        image,\n        options\n      },\n      detectWithStreamOperationSpec,\n      callback) as Promise<Models.FaceDetectWithStreamResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new msRest.Serializer(Mappers);\nconst findSimilarOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"findsimilars\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  requestBody: {\n    parameterPath: {\n      faceId: \"faceId\",\n      faceListId: [\n        \"options\",\n        \"faceListId\"\n      ],\n      largeFaceListId: [\n        \"options\",\n        \"largeFaceListId\"\n      ],\n      faceIds: [\n        \"options\",\n        \"faceIds\"\n      ],\n      maxNumOfCandidatesReturned: [\n        \"options\",\n        \"maxNumOfCandidatesReturned\"\n      ],\n      mode: [\n        \"options\",\n        \"mode\"\n      ]\n    },\n    mapper: {\n      ...Mappers.FindSimilarRequest,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SimilarFace\"\n            }\n          }\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst groupOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"group\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  requestBody: {\n    parameterPath: {\n      faceIds: \"faceIds\"\n    },\n    mapper: {\n      ...Mappers.GroupRequest,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.GroupResult\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst identifyOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"identify\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  requestBody: {\n    parameterPath: {\n      faceIds: \"faceIds\",\n      personGroupId: [\n        \"options\",\n        \"personGroupId\"\n      ],\n      largePersonGroupId: [\n        \"options\",\n        \"largePersonGroupId\"\n      ],\n      maxNumOfCandidatesReturned: [\n        \"options\",\n        \"maxNumOfCandidatesReturned\"\n      ],\n      confidenceThreshold: [\n        \"options\",\n        \"confidenceThreshold\"\n      ]\n    },\n    mapper: {\n      ...Mappers.IdentifyRequest,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"IdentifyResult\"\n            }\n          }\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst verifyFaceToFaceOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"verify\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  requestBody: {\n    parameterPath: {\n      faceId1: \"faceId1\",\n      faceId2: \"faceId2\"\n    },\n    mapper: {\n      ...Mappers.VerifyFaceToFaceRequest,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.VerifyResult\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst detectWithUrlOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"detect\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.returnFaceId,\n    Parameters.returnFaceLandmarks,\n    Parameters.returnFaceAttributes,\n    Parameters.recognitionModel,\n    Parameters.returnRecognitionModel,\n    Parameters.detectionModel,\n    Parameters.faceIdTimeToLive\n  ],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DetectedFace\"\n            }\n          }\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst verifyFaceToPersonOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"verify\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  requestBody: {\n    parameterPath: {\n      faceId: \"faceId\",\n      personGroupId: [\n        \"options\",\n        \"personGroupId\"\n      ],\n      largePersonGroupId: [\n        \"options\",\n        \"largePersonGroupId\"\n      ],\n      personId: \"personId\"\n    },\n    mapper: {\n      ...Mappers.VerifyFaceToPersonRequest,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.VerifyResult\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst detectWithStreamOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"detect\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.returnFaceId,\n    Parameters.returnFaceLandmarks,\n    Parameters.returnFaceAttributes,\n    Parameters.recognitionModel,\n    Parameters.returnRecognitionModel,\n    Parameters.detectionModel,\n    Parameters.faceIdTimeToLive\n  ],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DetectedFace\"\n            }\n          }\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nexport {\n  APIError,\n  ErrorModel,\n  ImageUrl,\n  NameAndUserDataContract,\n  PersistedFace,\n  Person,\n  UpdateFaceRequest\n} from \"../models/mappers\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/personGroupPersonMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { FaceClientContext } from \"../faceClientContext\";\n\n/** Class representing a PersonGroupPerson. */\nexport class PersonGroupPerson {\n  private readonly client: FaceClientContext;\n\n  /**\n   * Create a PersonGroupPerson.\n   * @param {FaceClientContext} client Reference to the service client.\n   */\n  constructor(client: FaceClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Create a new person in a specified person group.\n   * @param personGroupId Id referencing a particular person group.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PersonGroupPersonCreateResponse>\n   */\n  create(personGroupId: string, options?: Models.PersonGroupPersonCreateOptionalParams): Promise<Models.PersonGroupPersonCreateResponse>;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param callback The callback\n   */\n  create(personGroupId: string, callback: msRest.ServiceCallback<Models.Person>): void;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  create(personGroupId: string, options: Models.PersonGroupPersonCreateOptionalParams, callback: msRest.ServiceCallback<Models.Person>): void;\n  create(personGroupId: string, options?: Models.PersonGroupPersonCreateOptionalParams | msRest.ServiceCallback<Models.Person>, callback?: msRest.ServiceCallback<Models.Person>): Promise<Models.PersonGroupPersonCreateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        personGroupId,\n        options\n      },\n      createOperationSpec,\n      callback) as Promise<Models.PersonGroupPersonCreateResponse>;\n  }\n\n  /**\n   * List all persons in a person group, and retrieve person information (including personId, name,\n   * userData and persistedFaceIds of registered faces of the person).\n   * @param personGroupId Id referencing a particular person group.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PersonGroupPersonListResponse>\n   */\n  list(personGroupId: string, options?: Models.PersonGroupPersonListOptionalParams): Promise<Models.PersonGroupPersonListResponse>;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param callback The callback\n   */\n  list(personGroupId: string, callback: msRest.ServiceCallback<Models.Person[]>): void;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  list(personGroupId: string, options: Models.PersonGroupPersonListOptionalParams, callback: msRest.ServiceCallback<Models.Person[]>): void;\n  list(personGroupId: string, options?: Models.PersonGroupPersonListOptionalParams | msRest.ServiceCallback<Models.Person[]>, callback?: msRest.ServiceCallback<Models.Person[]>): Promise<Models.PersonGroupPersonListResponse> {\n    return this.client.sendOperationRequest(\n      {\n        personGroupId,\n        options\n      },\n      listOperationSpec,\n      callback) as Promise<Models.PersonGroupPersonListResponse>;\n  }\n\n  /**\n   * Delete an existing person from a person group. The persistedFaceId, userData, person name and\n   * face feature in the person entry will all be deleted.\n   * @param personGroupId Id referencing a particular person group.\n   * @param personId Id referencing a particular person.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  deleteMethod(personGroupId: string, personId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param personId Id referencing a particular person.\n   * @param callback The callback\n   */\n  deleteMethod(personGroupId: string, personId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param personId Id referencing a particular person.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteMethod(personGroupId: string, personId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteMethod(personGroupId: string, personId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        personGroupId,\n        personId,\n        options\n      },\n      deleteMethodOperationSpec,\n      callback);\n  }\n\n  /**\n   * Retrieve a person's information, including registered persisted faces, name and userData.\n   * @param personGroupId Id referencing a particular person group.\n   * @param personId Id referencing a particular person.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PersonGroupPersonGetResponse>\n   */\n  get(personGroupId: string, personId: string, options?: msRest.RequestOptionsBase): Promise<Models.PersonGroupPersonGetResponse>;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param personId Id referencing a particular person.\n   * @param callback The callback\n   */\n  get(personGroupId: string, personId: string, callback: msRest.ServiceCallback<Models.Person>): void;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param personId Id referencing a particular person.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  get(personGroupId: string, personId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Person>): void;\n  get(personGroupId: string, personId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Person>, callback?: msRest.ServiceCallback<Models.Person>): Promise<Models.PersonGroupPersonGetResponse> {\n    return this.client.sendOperationRequest(\n      {\n        personGroupId,\n        personId,\n        options\n      },\n      getOperationSpec,\n      callback) as Promise<Models.PersonGroupPersonGetResponse>;\n  }\n\n  /**\n   * Update name or userData of a person.\n   * @param personGroupId Id referencing a particular person group.\n   * @param personId Id referencing a particular person.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  update(personGroupId: string, personId: string, options?: Models.PersonGroupPersonUpdateOptionalParams): Promise<msRest.RestResponse>;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param personId Id referencing a particular person.\n   * @param callback The callback\n   */\n  update(personGroupId: string, personId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param personId Id referencing a particular person.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  update(personGroupId: string, personId: string, options: Models.PersonGroupPersonUpdateOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  update(personGroupId: string, personId: string, options?: Models.PersonGroupPersonUpdateOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        personGroupId,\n        personId,\n        options\n      },\n      updateOperationSpec,\n      callback);\n  }\n\n  /**\n   * Delete a face from a person in a person group by specified personGroupId, personId and\n   * persistedFaceId.\n   * <br /> Adding/deleting faces to/from a same person will be processed sequentially.\n   * Adding/deleting faces to/from different persons are processed in parallel.\n   * @param personGroupId Id referencing a particular person group.\n   * @param personId Id referencing a particular person.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  deleteFace(personGroupId: string, personId: string, persistedFaceId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param personId Id referencing a particular person.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param callback The callback\n   */\n  deleteFace(personGroupId: string, personId: string, persistedFaceId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param personId Id referencing a particular person.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteFace(personGroupId: string, personId: string, persistedFaceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteFace(personGroupId: string, personId: string, persistedFaceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        personGroupId,\n        personId,\n        persistedFaceId,\n        options\n      },\n      deleteFaceOperationSpec,\n      callback);\n  }\n\n  /**\n   * Retrieve information about a persisted face (specified by persistedFaceId, personId and its\n   * belonging personGroupId).\n   * @param personGroupId Id referencing a particular person group.\n   * @param personId Id referencing a particular person.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PersonGroupPersonGetFaceResponse>\n   */\n  getFace(personGroupId: string, personId: string, persistedFaceId: string, options?: msRest.RequestOptionsBase): Promise<Models.PersonGroupPersonGetFaceResponse>;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param personId Id referencing a particular person.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param callback The callback\n   */\n  getFace(personGroupId: string, personId: string, persistedFaceId: string, callback: msRest.ServiceCallback<Models.PersistedFace>): void;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param personId Id referencing a particular person.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getFace(personGroupId: string, personId: string, persistedFaceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PersistedFace>): void;\n  getFace(personGroupId: string, personId: string, persistedFaceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PersistedFace>, callback?: msRest.ServiceCallback<Models.PersistedFace>): Promise<Models.PersonGroupPersonGetFaceResponse> {\n    return this.client.sendOperationRequest(\n      {\n        personGroupId,\n        personId,\n        persistedFaceId,\n        options\n      },\n      getFaceOperationSpec,\n      callback) as Promise<Models.PersonGroupPersonGetFaceResponse>;\n  }\n\n  /**\n   * Add a face to a person into a person group for face identification or verification. To deal with\n   * an image contains multiple faces, input face can be specified as an image with a targetFace\n   * rectangle. It returns a persistedFaceId representing the added face. No image will be stored.\n   * Only the extracted face feature will be stored on server until [PersonGroup PersonFace -\n   * Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface), [PersonGroup\n   * Person - Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete) or\n   * [PersonGroup - Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete) is\n   * called.\n   * <br /> Note persistedFaceId is different from faceId generated by [Face -\n   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).\n   * * Higher face image quality means better recognition precision. Please consider high-quality\n   * faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n   * * Each person entry can hold up to 248 faces.\n   * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is\n   * from 1KB to 6MB.\n   * * \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an\n   * error. If the provided \"targetFace\" rectangle is not returned from [Face -\n   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to\n   * detect and add the face successfully.\n   * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions\n   * will cause failures.\n   * * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting\n   * faces to/from different persons are processed in parallel.\n   * @param personGroupId Id referencing a particular person group.\n   * @param personId Id referencing a particular person.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  updateFace(personGroupId: string, personId: string, persistedFaceId: string, options?: Models.PersonGroupPersonUpdateFaceOptionalParams): Promise<msRest.RestResponse>;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param personId Id referencing a particular person.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param callback The callback\n   */\n  updateFace(personGroupId: string, personId: string, persistedFaceId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param personId Id referencing a particular person.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateFace(personGroupId: string, personId: string, persistedFaceId: string, options: Models.PersonGroupPersonUpdateFaceOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  updateFace(personGroupId: string, personId: string, persistedFaceId: string, options?: Models.PersonGroupPersonUpdateFaceOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        personGroupId,\n        personId,\n        persistedFaceId,\n        options\n      },\n      updateFaceOperationSpec,\n      callback);\n  }\n\n  /**\n   * Add a face to a person into a person group for face identification or verification. To deal with\n   * an image contains multiple faces, input face can be specified as an image with a targetFace\n   * rectangle. It returns a persistedFaceId representing the added face. No image will be stored.\n   * Only the extracted face feature will be stored on server until [PersonGroup PersonFace -\n   * Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface), [PersonGroup\n   * Person - Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete) or\n   * [PersonGroup - Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete) is\n   * called.\n   * <br /> Note persistedFaceId is different from faceId generated by [Face -\n   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).\n   * *   Higher face image quality means better recognition precision. Please consider high-quality\n   * faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n   * *   Each person entry can hold up to 248 faces.\n   * *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size\n   * is from 1KB to 6MB.\n   * *   \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as\n   * an error. If the provided \"targetFace\" rectangle is not returned from [Face -\n   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to\n   * detect and add the face successfully.\n   * *   Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions\n   * will cause failures.\n   * *   Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting\n   * faces to/from different persons are processed in parallel.\n   * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels.\n   * Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum\n   * face size.\n   * * Different 'detectionModel' values can be provided. To use and compare different detection\n   * models, please refer to [How to specify a detection\n   * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).\n   * @param personGroupId Id referencing a particular person group.\n   * @param personId Id referencing a particular person.\n   * @param url Publicly reachable URL of an image\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PersonGroupPersonAddFaceFromUrlResponse>\n   */\n  addFaceFromUrl(personGroupId: string, personId: string, url: string, options?: Models.PersonGroupPersonAddFaceFromUrlOptionalParams): Promise<Models.PersonGroupPersonAddFaceFromUrlResponse>;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param personId Id referencing a particular person.\n   * @param url Publicly reachable URL of an image\n   * @param callback The callback\n   */\n  addFaceFromUrl(personGroupId: string, personId: string, url: string, callback: msRest.ServiceCallback<Models.PersistedFace>): void;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param personId Id referencing a particular person.\n   * @param url Publicly reachable URL of an image\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  addFaceFromUrl(personGroupId: string, personId: string, url: string, options: Models.PersonGroupPersonAddFaceFromUrlOptionalParams, callback: msRest.ServiceCallback<Models.PersistedFace>): void;\n  addFaceFromUrl(personGroupId: string, personId: string, url: string, options?: Models.PersonGroupPersonAddFaceFromUrlOptionalParams | msRest.ServiceCallback<Models.PersistedFace>, callback?: msRest.ServiceCallback<Models.PersistedFace>): Promise<Models.PersonGroupPersonAddFaceFromUrlResponse> {\n    return this.client.sendOperationRequest(\n      {\n        personGroupId,\n        personId,\n        url,\n        options\n      },\n      addFaceFromUrlOperationSpec,\n      callback) as Promise<Models.PersonGroupPersonAddFaceFromUrlResponse>;\n  }\n\n  /**\n   * Add a face to a person into a person group for face identification or verification. To deal with\n   * an image contains multiple faces, input face can be specified as an image with a targetFace\n   * rectangle. It returns a persistedFaceId representing the added face. No image will be stored.\n   * Only the extracted face feature will be stored on server until [PersonGroup PersonFace -\n   * Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface), [PersonGroup\n   * Person - Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete) or\n   * [PersonGroup - Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete) is\n   * called.\n   * <br /> Note persistedFaceId is different from faceId generated by [Face -\n   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).\n   * *   Higher face image quality means better recognition precision. Please consider high-quality\n   * faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n   * *   Each person entry can hold up to 248 faces.\n   * *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size\n   * is from 1KB to 6MB.\n   * *   \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as\n   * an error. If the provided \"targetFace\" rectangle is not returned from [Face -\n   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to\n   * detect and add the face successfully.\n   * *   Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions\n   * will cause failures.\n   * *   Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting\n   * faces to/from different persons are processed in parallel.\n   * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels.\n   * Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum\n   * face size.\n   * * Different 'detectionModel' values can be provided. To use and compare different detection\n   * models, please refer to [How to specify a detection\n   * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).\n   * @param personGroupId Id referencing a particular person group.\n   * @param personId Id referencing a particular person.\n   * @param image An image stream.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PersonGroupPersonAddFaceFromStreamResponse>\n   */\n  addFaceFromStream(personGroupId: string, personId: string, image: msRest.HttpRequestBody, options?: Models.PersonGroupPersonAddFaceFromStreamOptionalParams): Promise<Models.PersonGroupPersonAddFaceFromStreamResponse>;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param personId Id referencing a particular person.\n   * @param image An image stream.\n   * @param callback The callback\n   */\n  addFaceFromStream(personGroupId: string, personId: string, image: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.PersistedFace>): void;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param personId Id referencing a particular person.\n   * @param image An image stream.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  addFaceFromStream(personGroupId: string, personId: string, image: msRest.HttpRequestBody, options: Models.PersonGroupPersonAddFaceFromStreamOptionalParams, callback: msRest.ServiceCallback<Models.PersistedFace>): void;\n  addFaceFromStream(personGroupId: string, personId: string, image: msRest.HttpRequestBody, options?: Models.PersonGroupPersonAddFaceFromStreamOptionalParams | msRest.ServiceCallback<Models.PersistedFace>, callback?: msRest.ServiceCallback<Models.PersistedFace>): Promise<Models.PersonGroupPersonAddFaceFromStreamResponse> {\n    return this.client.sendOperationRequest(\n      {\n        personGroupId,\n        personId,\n        image,\n        options\n      },\n      addFaceFromStreamOperationSpec,\n      callback) as Promise<Models.PersonGroupPersonAddFaceFromStreamResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new msRest.Serializer(Mappers);\nconst createOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"persongroups/{personGroupId}/persons\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.personGroupId\n  ],\n  requestBody: {\n    parameterPath: {\n      name: [\n        \"options\",\n        \"name\"\n      ],\n      userData: [\n        \"options\",\n        \"userData\"\n      ]\n    },\n    mapper: {\n      ...Mappers.NameAndUserDataContract,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.Person\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst listOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"persongroups/{personGroupId}/persons\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.personGroupId\n  ],\n  queryParameters: [\n    Parameters.start0,\n    Parameters.top0\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Person\"\n            }\n          }\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst deleteMethodOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"persongroups/{personGroupId}/persons/{personId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.personGroupId,\n    Parameters.personId\n  ],\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst getOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"persongroups/{personGroupId}/persons/{personId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.personGroupId,\n    Parameters.personId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.Person\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst updateOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"persongroups/{personGroupId}/persons/{personId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.personGroupId,\n    Parameters.personId\n  ],\n  requestBody: {\n    parameterPath: {\n      name: [\n        \"options\",\n        \"name\"\n      ],\n      userData: [\n        \"options\",\n        \"userData\"\n      ]\n    },\n    mapper: {\n      ...Mappers.NameAndUserDataContract,\n      required: true\n    }\n  },\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst deleteFaceOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"persongroups/{personGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.personGroupId,\n    Parameters.personId,\n    Parameters.persistedFaceId\n  ],\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst getFaceOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"persongroups/{personGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.personGroupId,\n    Parameters.personId,\n    Parameters.persistedFaceId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.PersistedFace\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst updateFaceOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"persongroups/{personGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.personGroupId,\n    Parameters.personId,\n    Parameters.persistedFaceId\n  ],\n  requestBody: {\n    parameterPath: {\n      userData: [\n        \"options\",\n        \"userData\"\n      ]\n    },\n    mapper: {\n      ...Mappers.UpdateFaceRequest,\n      required: true\n    }\n  },\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst addFaceFromUrlOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"persongroups/{personGroupId}/persons/{personId}/persistedfaces\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.personGroupId,\n    Parameters.personId\n  ],\n  queryParameters: [\n    Parameters.userData,\n    Parameters.targetFace,\n    Parameters.detectionModel\n  ],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.PersistedFace\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst addFaceFromStreamOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"persongroups/{personGroupId}/persons/{personId}/persistedfaces\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.personGroupId,\n    Parameters.personId\n  ],\n  queryParameters: [\n    Parameters.userData,\n    Parameters.targetFace,\n    Parameters.detectionModel\n  ],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PersistedFace\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nexport {\n  APIError,\n  ErrorModel,\n  FaceList,\n  LargeFaceList,\n  LargePersonGroup,\n  MetaDataContract,\n  NameAndUserDataContract,\n  NonNullableNameAndNullableUserDataContract,\n  PersistedFace,\n  Person,\n  PersonGroup,\n  TrainingStatus\n} from \"../models/mappers\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/personGroupOperationsMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { FaceClientContext } from \"../faceClientContext\";\n\n/** Class representing a PersonGroupOperations. */\nexport class PersonGroupOperations {\n  private readonly client: FaceClientContext;\n\n  /**\n   * Create a PersonGroupOperations.\n   * @param {FaceClientContext} client Reference to the service client.\n   */\n  constructor(client: FaceClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Create a new person group with specified personGroupId, name, user-provided userData and\n   * recognitionModel.\n   * <br /> A person group is the container of the uploaded person data, including face recognition\n   * features.\n   * <br /> After creation, use [PersonGroup Person -\n   * Create](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/create) to add persons\n   * into the group, and then call [PersonGroup -\n   * Train](https://docs.microsoft.com/rest/api/faceapi/persongroup/train) to get this group ready\n   * for [Face - Identify](https://docs.microsoft.com/rest/api/faceapi/face/identify).\n   * <br /> No image will be stored. Only the person's extracted face features and userData will be\n   * stored on server until [PersonGroup Person -\n   * Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete) or [PersonGroup -\n   * Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete) is called.\n   * <br/>'recognitionModel' should be specified to associate with this person group. The default\n   * value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly\n   * specify the model you need in this parameter. New faces that are added to an existing person\n   * group will use the recognition model that's already associated with the collection. Existing\n   * face features in a person group can't be updated to features extracted by another version of\n   * recognition model.\n   *\n   * Person group quota:\n   * * Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000 persons.\n   * * S0-tier subscription quota: 1,000,000 person groups. Each holds up to 10,000 persons.\n   * * to handle larger scale face identification problem, please consider using\n   * [LargePersonGroup](https://docs.microsoft.com/rest/api/faceapi/largepersongroup).\n   * @param personGroupId Id referencing a particular person group.\n   * @param name User defined name, maximum length is 128.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  create(personGroupId: string, name: string, options?: Models.PersonGroupCreateOptionalParams): Promise<msRest.RestResponse>;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param name User defined name, maximum length is 128.\n   * @param callback The callback\n   */\n  create(personGroupId: string, name: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param name User defined name, maximum length is 128.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  create(personGroupId: string, name: string, options: Models.PersonGroupCreateOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  create(personGroupId: string, name: string, options?: Models.PersonGroupCreateOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        personGroupId,\n        name,\n        options\n      },\n      createOperationSpec,\n      callback);\n  }\n\n  /**\n   * Delete an existing person group. Persisted face features of all people in the person group will\n   * also be deleted.\n   * @param personGroupId Id referencing a particular person group.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  deleteMethod(personGroupId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param callback The callback\n   */\n  deleteMethod(personGroupId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteMethod(personGroupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteMethod(personGroupId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        personGroupId,\n        options\n      },\n      deleteMethodOperationSpec,\n      callback);\n  }\n\n  /**\n   * Retrieve person group name, userData and recognitionModel. To get person information under this\n   * personGroup, use [PersonGroup Person -\n   * List](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/list).\n   * @param personGroupId Id referencing a particular person group.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PersonGroupGetResponse>\n   */\n  get(personGroupId: string, options?: Models.PersonGroupGetOptionalParams): Promise<Models.PersonGroupGetResponse>;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param callback The callback\n   */\n  get(personGroupId: string, callback: msRest.ServiceCallback<Models.PersonGroup>): void;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  get(personGroupId: string, options: Models.PersonGroupGetOptionalParams, callback: msRest.ServiceCallback<Models.PersonGroup>): void;\n  get(personGroupId: string, options?: Models.PersonGroupGetOptionalParams | msRest.ServiceCallback<Models.PersonGroup>, callback?: msRest.ServiceCallback<Models.PersonGroup>): Promise<Models.PersonGroupGetResponse> {\n    return this.client.sendOperationRequest(\n      {\n        personGroupId,\n        options\n      },\n      getOperationSpec,\n      callback) as Promise<Models.PersonGroupGetResponse>;\n  }\n\n  /**\n   * Update an existing person group's display name and userData. The properties which does not\n   * appear in request body will not be updated.\n   * @param personGroupId Id referencing a particular person group.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  update(personGroupId: string, options?: Models.PersonGroupUpdateOptionalParams): Promise<msRest.RestResponse>;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param callback The callback\n   */\n  update(personGroupId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  update(personGroupId: string, options: Models.PersonGroupUpdateOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  update(personGroupId: string, options?: Models.PersonGroupUpdateOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        personGroupId,\n        options\n      },\n      updateOperationSpec,\n      callback);\n  }\n\n  /**\n   * Retrieve the training status of a person group (completed or ongoing).\n   * @param personGroupId Id referencing a particular person group.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PersonGroupGetTrainingStatusResponse>\n   */\n  getTrainingStatus(personGroupId: string, options?: msRest.RequestOptionsBase): Promise<Models.PersonGroupGetTrainingStatusResponse>;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param callback The callback\n   */\n  getTrainingStatus(personGroupId: string, callback: msRest.ServiceCallback<Models.TrainingStatus>): void;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getTrainingStatus(personGroupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TrainingStatus>): void;\n  getTrainingStatus(personGroupId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TrainingStatus>, callback?: msRest.ServiceCallback<Models.TrainingStatus>): Promise<Models.PersonGroupGetTrainingStatusResponse> {\n    return this.client.sendOperationRequest(\n      {\n        personGroupId,\n        options\n      },\n      getTrainingStatusOperationSpec,\n      callback) as Promise<Models.PersonGroupGetTrainingStatusResponse>;\n  }\n\n  /**\n   * List person groups’ personGroupId, name, userData and recognitionModel.<br />\n   * * Person groups are stored in alphabetical order of personGroupId.\n   * * \"start\" parameter (string, optional) is a user-provided personGroupId value that returned\n   * entries have larger ids by string comparison. \"start\" set to empty to indicate return from the\n   * first item.\n   * * \"top\" parameter (int, optional) specifies the number of entries to return. A maximal of 1000\n   * entries can be returned in one call. To fetch more, you can specify \"start\" with the last\n   * returned entry’s Id of the current call.\n   * <br />\n   * For example, total 5 person groups: \"group1\", ..., \"group5\".\n   * <br /> \"start=&top=\" will return all 5 groups.\n   * <br /> \"start=&top=2\" will return \"group1\", \"group2\".\n   * <br /> \"start=group2&top=3\" will return \"group3\", \"group4\", \"group5\".\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PersonGroupListResponse>\n   */\n  list(options?: Models.PersonGroupListOptionalParams): Promise<Models.PersonGroupListResponse>;\n  /**\n   * @param callback The callback\n   */\n  list(callback: msRest.ServiceCallback<Models.PersonGroup[]>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  list(options: Models.PersonGroupListOptionalParams, callback: msRest.ServiceCallback<Models.PersonGroup[]>): void;\n  list(options?: Models.PersonGroupListOptionalParams | msRest.ServiceCallback<Models.PersonGroup[]>, callback?: msRest.ServiceCallback<Models.PersonGroup[]>): Promise<Models.PersonGroupListResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      listOperationSpec,\n      callback) as Promise<Models.PersonGroupListResponse>;\n  }\n\n  /**\n   * Queue a person group training task, the training task may not be started immediately.\n   * @param personGroupId Id referencing a particular person group.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  train(personGroupId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param callback The callback\n   */\n  train(personGroupId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param personGroupId Id referencing a particular person group.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  train(personGroupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  train(personGroupId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        personGroupId,\n        options\n      },\n      trainOperationSpec,\n      callback);\n  }\n}\n\n// Operation Specifications\nconst serializer = new msRest.Serializer(Mappers);\nconst createOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"persongroups/{personGroupId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.personGroupId\n  ],\n  requestBody: {\n    parameterPath: {\n      name: \"name\",\n      userData: [\n        \"options\",\n        \"userData\"\n      ],\n      recognitionModel: [\n        \"options\",\n        \"recognitionModel\"\n      ]\n    },\n    mapper: {\n      ...Mappers.MetaDataContract,\n      required: true\n    }\n  },\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst deleteMethodOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"persongroups/{personGroupId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.personGroupId\n  ],\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst getOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"persongroups/{personGroupId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.personGroupId\n  ],\n  queryParameters: [\n    Parameters.returnRecognitionModel\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.PersonGroup\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst updateOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"persongroups/{personGroupId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.personGroupId\n  ],\n  requestBody: {\n    parameterPath: {\n      name: [\n        \"options\",\n        \"name\"\n      ],\n      userData: [\n        \"options\",\n        \"userData\"\n      ]\n    },\n    mapper: {\n      ...Mappers.NameAndUserDataContract,\n      required: true\n    }\n  },\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst getTrainingStatusOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"persongroups/{personGroupId}/training\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.personGroupId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.TrainingStatus\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst listOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"persongroups\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.start1,\n    Parameters.top1,\n    Parameters.returnRecognitionModel\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PersonGroup\"\n            }\n          }\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst trainOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"persongroups/{personGroupId}/train\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.personGroupId\n  ],\n  responses: {\n    202: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nexport {\n  APIError,\n  ErrorModel,\n  FaceList,\n  ImageUrl,\n  LargeFaceList,\n  LargePersonGroup,\n  MetaDataContract,\n  NameAndUserDataContract,\n  NonNullableNameAndNullableUserDataContract,\n  PersistedFace,\n  Person,\n  PersonGroup\n} from \"../models/mappers\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/faceListOperationsMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { FaceClientContext } from \"../faceClientContext\";\n\n/** Class representing a FaceListOperations. */\nexport class FaceListOperations {\n  private readonly client: FaceClientContext;\n\n  /**\n   * Create a FaceListOperations.\n   * @param {FaceClientContext} client Reference to the service client.\n   */\n  constructor(client: FaceClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Create an empty face list with user-specified faceListId, name, an optional userData and\n   * recognitionModel. Up to 64 face lists are allowed in one subscription.\n   * <br /> Face list is a list of faces, up to 1,000 faces, and used by [Face - Find\n   * Similar](https://docs.microsoft.com/rest/api/faceapi/face/findsimilar).\n   * <br /> After creation, user should use [FaceList - Add\n   * Face](https://docs.microsoft.com/rest/api/faceapi/facelist/addfacefromurl) to import the faces.\n   * No image will be stored. Only the extracted face features are stored on server until [FaceList -\n   * Delete](https://docs.microsoft.com/rest/api/faceapi/facelist/delete) is called.\n   * <br /> Find Similar is used for scenario like finding celebrity-like faces, similar face\n   * filtering, or as a light way face identification. But if the actual use is to identify person,\n   * please use [PersonGroup](https://docs.microsoft.com/rest/api/faceapi/persongroup) /\n   * [LargePersonGroup](https://docs.microsoft.com/rest/api/faceapi/largepersongroup) and [Face -\n   * Identify](https://docs.microsoft.com/rest/api/faceapi/face/identify).\n   * <br /> Please consider\n   * [LargeFaceList](https://docs.microsoft.com/rest/api/faceapi/largefacelist) when the face number\n   * is large. It can support up to 1,000,000 faces.\n   * <br />'recognitionModel' should be specified to associate with this face list. The default value\n   * for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly\n   * specify the model you need in this parameter. New faces that are added to an existing face list\n   * will use the recognition model that's already associated with the collection. Existing face\n   * features in a face list can't be updated to features extracted by another version of recognition\n   * model.\n   * Please Refer to [Specify a face recognition\n   * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model).\n   * @param faceListId Id referencing a particular face list.\n   * @param name User defined name, maximum length is 128.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  create(faceListId: string, name: string, options?: Models.FaceListCreateOptionalParams): Promise<msRest.RestResponse>;\n  /**\n   * @param faceListId Id referencing a particular face list.\n   * @param name User defined name, maximum length is 128.\n   * @param callback The callback\n   */\n  create(faceListId: string, name: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param faceListId Id referencing a particular face list.\n   * @param name User defined name, maximum length is 128.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  create(faceListId: string, name: string, options: Models.FaceListCreateOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  create(faceListId: string, name: string, options?: Models.FaceListCreateOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        faceListId,\n        name,\n        options\n      },\n      createOperationSpec,\n      callback);\n  }\n\n  /**\n   * Retrieve a face list’s faceListId, name, userData, recognitionModel and faces in the face list.\n   * @param faceListId Id referencing a particular face list.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FaceListGetResponse>\n   */\n  get(faceListId: string, options?: Models.FaceListGetOptionalParams): Promise<Models.FaceListGetResponse>;\n  /**\n   * @param faceListId Id referencing a particular face list.\n   * @param callback The callback\n   */\n  get(faceListId: string, callback: msRest.ServiceCallback<Models.FaceList>): void;\n  /**\n   * @param faceListId Id referencing a particular face list.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  get(faceListId: string, options: Models.FaceListGetOptionalParams, callback: msRest.ServiceCallback<Models.FaceList>): void;\n  get(faceListId: string, options?: Models.FaceListGetOptionalParams | msRest.ServiceCallback<Models.FaceList>, callback?: msRest.ServiceCallback<Models.FaceList>): Promise<Models.FaceListGetResponse> {\n    return this.client.sendOperationRequest(\n      {\n        faceListId,\n        options\n      },\n      getOperationSpec,\n      callback) as Promise<Models.FaceListGetResponse>;\n  }\n\n  /**\n   * Update information of a face list.\n   * @param faceListId Id referencing a particular face list.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  update(faceListId: string, options?: Models.FaceListUpdateOptionalParams): Promise<msRest.RestResponse>;\n  /**\n   * @param faceListId Id referencing a particular face list.\n   * @param callback The callback\n   */\n  update(faceListId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param faceListId Id referencing a particular face list.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  update(faceListId: string, options: Models.FaceListUpdateOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  update(faceListId: string, options?: Models.FaceListUpdateOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        faceListId,\n        options\n      },\n      updateOperationSpec,\n      callback);\n  }\n\n  /**\n   * Delete a specified face list.\n   * @param faceListId Id referencing a particular face list.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  deleteMethod(faceListId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;\n  /**\n   * @param faceListId Id referencing a particular face list.\n   * @param callback The callback\n   */\n  deleteMethod(faceListId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param faceListId Id referencing a particular face list.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteMethod(faceListId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteMethod(faceListId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        faceListId,\n        options\n      },\n      deleteMethodOperationSpec,\n      callback);\n  }\n\n  /**\n   * List face lists’ faceListId, name, userData and recognitionModel. <br />\n   * To get face information inside faceList use [FaceList -\n   * Get](https://docs.microsoft.com/rest/api/faceapi/facelist/get)\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FaceListListResponse>\n   */\n  list(options?: Models.FaceListListOptionalParams): Promise<Models.FaceListListResponse>;\n  /**\n   * @param callback The callback\n   */\n  list(callback: msRest.ServiceCallback<Models.FaceList[]>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  list(options: Models.FaceListListOptionalParams, callback: msRest.ServiceCallback<Models.FaceList[]>): void;\n  list(options?: Models.FaceListListOptionalParams | msRest.ServiceCallback<Models.FaceList[]>, callback?: msRest.ServiceCallback<Models.FaceList[]>): Promise<Models.FaceListListResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      listOperationSpec,\n      callback) as Promise<Models.FaceListListResponse>;\n  }\n\n  /**\n   * Delete a face from a face list by specified faceListId and persistedFaceId.\n   * <br /> Adding/deleting faces to/from a same face list are processed sequentially and to/from\n   * different face lists are in parallel.\n   * @param faceListId Id referencing a particular face list.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  deleteFace(faceListId: string, persistedFaceId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;\n  /**\n   * @param faceListId Id referencing a particular face list.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param callback The callback\n   */\n  deleteFace(faceListId: string, persistedFaceId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param faceListId Id referencing a particular face list.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteFace(faceListId: string, persistedFaceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteFace(faceListId: string, persistedFaceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        faceListId,\n        persistedFaceId,\n        options\n      },\n      deleteFaceOperationSpec,\n      callback);\n  }\n\n  /**\n   * Add a face to a specified face list, up to 1,000 faces.\n   * <br /> To deal with an image contains multiple faces, input face can be specified as an image\n   * with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image\n   * will be stored. Only the extracted face feature will be stored on server until [FaceList -\n   * Delete Face](https://docs.microsoft.com/rest/api/faceapi/facelist/deleteface) or [FaceList -\n   * Delete](https://docs.microsoft.com/rest/api/faceapi/facelist/delete) is called.\n   * <br /> Note persistedFaceId is different from faceId generated by [Face -\n   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).\n   * * Higher face image quality means better detection and recognition precision. Please consider\n   * high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or\n   * bigger.\n   * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is\n   * from 1KB to 6MB.\n   * * \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an\n   * error. If the provided \"targetFace\" rectangle is not returned from [Face -\n   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to\n   * detect and add the face successfully.\n   * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions\n   * will cause failures.\n   * * Adding/deleting faces to/from a same face list are processed sequentially and to/from\n   * different face lists are in parallel.\n   * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels.\n   * Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum\n   * face size.\n   * * Different 'detectionModel' values can be provided. To use and compare different detection\n   * models, please refer to [How to specify a detection\n   * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).\n   * @param faceListId Id referencing a particular face list.\n   * @param url Publicly reachable URL of an image\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FaceListAddFaceFromUrlResponse>\n   */\n  addFaceFromUrl(faceListId: string, url: string, options?: Models.FaceListAddFaceFromUrlOptionalParams): Promise<Models.FaceListAddFaceFromUrlResponse>;\n  /**\n   * @param faceListId Id referencing a particular face list.\n   * @param url Publicly reachable URL of an image\n   * @param callback The callback\n   */\n  addFaceFromUrl(faceListId: string, url: string, callback: msRest.ServiceCallback<Models.PersistedFace>): void;\n  /**\n   * @param faceListId Id referencing a particular face list.\n   * @param url Publicly reachable URL of an image\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  addFaceFromUrl(faceListId: string, url: string, options: Models.FaceListAddFaceFromUrlOptionalParams, callback: msRest.ServiceCallback<Models.PersistedFace>): void;\n  addFaceFromUrl(faceListId: string, url: string, options?: Models.FaceListAddFaceFromUrlOptionalParams | msRest.ServiceCallback<Models.PersistedFace>, callback?: msRest.ServiceCallback<Models.PersistedFace>): Promise<Models.FaceListAddFaceFromUrlResponse> {\n    return this.client.sendOperationRequest(\n      {\n        faceListId,\n        url,\n        options\n      },\n      addFaceFromUrlOperationSpec,\n      callback) as Promise<Models.FaceListAddFaceFromUrlResponse>;\n  }\n\n  /**\n   * Add a face to a specified face list, up to 1,000 faces.\n   * <br /> To deal with an image contains multiple faces, input face can be specified as an image\n   * with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image\n   * will be stored. Only the extracted face feature will be stored on server until [FaceList -\n   * Delete Face](https://docs.microsoft.com/rest/api/faceapi/facelist/deleteface) or [FaceList -\n   * Delete](https://docs.microsoft.com/rest/api/faceapi/facelist/delete) is called.\n   * <br /> Note persistedFaceId is different from faceId generated by [Face -\n   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).\n   * * Higher face image quality means better detection and recognition precision. Please consider\n   * high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or\n   * bigger.\n   * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is\n   * from 1KB to 6MB.\n   * * \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an\n   * error. If the provided \"targetFace\" rectangle is not returned from [Face -\n   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to\n   * detect and add the face successfully.\n   * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions\n   * will cause failures.\n   * * Adding/deleting faces to/from a same face list are processed sequentially and to/from\n   * different face lists are in parallel.\n   * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels.\n   * Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum\n   * face size.\n   * * Different 'detectionModel' values can be provided. To use and compare different detection\n   * models, please refer to [How to specify a detection\n   * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).\n   * @param faceListId Id referencing a particular face list.\n   * @param image An image stream.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FaceListAddFaceFromStreamResponse>\n   */\n  addFaceFromStream(faceListId: string, image: msRest.HttpRequestBody, options?: Models.FaceListAddFaceFromStreamOptionalParams): Promise<Models.FaceListAddFaceFromStreamResponse>;\n  /**\n   * @param faceListId Id referencing a particular face list.\n   * @param image An image stream.\n   * @param callback The callback\n   */\n  addFaceFromStream(faceListId: string, image: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.PersistedFace>): void;\n  /**\n   * @param faceListId Id referencing a particular face list.\n   * @param image An image stream.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  addFaceFromStream(faceListId: string, image: msRest.HttpRequestBody, options: Models.FaceListAddFaceFromStreamOptionalParams, callback: msRest.ServiceCallback<Models.PersistedFace>): void;\n  addFaceFromStream(faceListId: string, image: msRest.HttpRequestBody, options?: Models.FaceListAddFaceFromStreamOptionalParams | msRest.ServiceCallback<Models.PersistedFace>, callback?: msRest.ServiceCallback<Models.PersistedFace>): Promise<Models.FaceListAddFaceFromStreamResponse> {\n    return this.client.sendOperationRequest(\n      {\n        faceListId,\n        image,\n        options\n      },\n      addFaceFromStreamOperationSpec,\n      callback) as Promise<Models.FaceListAddFaceFromStreamResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new msRest.Serializer(Mappers);\nconst createOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"facelists/{faceListId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.faceListId\n  ],\n  requestBody: {\n    parameterPath: {\n      name: \"name\",\n      userData: [\n        \"options\",\n        \"userData\"\n      ],\n      recognitionModel: [\n        \"options\",\n        \"recognitionModel\"\n      ]\n    },\n    mapper: {\n      ...Mappers.MetaDataContract,\n      required: true\n    }\n  },\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst getOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"facelists/{faceListId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.faceListId\n  ],\n  queryParameters: [\n    Parameters.returnRecognitionModel\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.FaceList\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst updateOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"facelists/{faceListId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.faceListId\n  ],\n  requestBody: {\n    parameterPath: {\n      name: [\n        \"options\",\n        \"name\"\n      ],\n      userData: [\n        \"options\",\n        \"userData\"\n      ]\n    },\n    mapper: {\n      ...Mappers.NameAndUserDataContract,\n      required: true\n    }\n  },\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst deleteMethodOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"facelists/{faceListId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.faceListId\n  ],\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst listOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"facelists\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.returnRecognitionModel\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"FaceList\"\n            }\n          }\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst deleteFaceOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"facelists/{faceListId}/persistedfaces/{persistedFaceId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.faceListId,\n    Parameters.persistedFaceId\n  ],\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst addFaceFromUrlOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"facelists/{faceListId}/persistedfaces\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.faceListId\n  ],\n  queryParameters: [\n    Parameters.userData,\n    Parameters.targetFace,\n    Parameters.detectionModel\n  ],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.PersistedFace\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst addFaceFromStreamOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"facelists/{faceListId}/persistedfaces\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.faceListId\n  ],\n  queryParameters: [\n    Parameters.userData,\n    Parameters.targetFace,\n    Parameters.detectionModel\n  ],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PersistedFace\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nexport {\n  APIError,\n  ErrorModel,\n  ImageUrl,\n  NameAndUserDataContract,\n  PersistedFace,\n  Person,\n  UpdateFaceRequest\n} from \"../models/mappers\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/largePersonGroupPersonMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { FaceClientContext } from \"../faceClientContext\";\n\n/** Class representing a LargePersonGroupPerson. */\nexport class LargePersonGroupPerson {\n  private readonly client: FaceClientContext;\n\n  /**\n   * Create a LargePersonGroupPerson.\n   * @param {FaceClientContext} client Reference to the service client.\n   */\n  constructor(client: FaceClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Create a new person in a specified large person group.\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.LargePersonGroupPersonCreateResponse>\n   */\n  create(largePersonGroupId: string, options?: Models.LargePersonGroupPersonCreateOptionalParams): Promise<Models.LargePersonGroupPersonCreateResponse>;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param callback The callback\n   */\n  create(largePersonGroupId: string, callback: msRest.ServiceCallback<Models.Person>): void;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  create(largePersonGroupId: string, options: Models.LargePersonGroupPersonCreateOptionalParams, callback: msRest.ServiceCallback<Models.Person>): void;\n  create(largePersonGroupId: string, options?: Models.LargePersonGroupPersonCreateOptionalParams | msRest.ServiceCallback<Models.Person>, callback?: msRest.ServiceCallback<Models.Person>): Promise<Models.LargePersonGroupPersonCreateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largePersonGroupId,\n        options\n      },\n      createOperationSpec,\n      callback) as Promise<Models.LargePersonGroupPersonCreateResponse>;\n  }\n\n  /**\n   * List all persons in a large person group, and retrieve person information (including personId,\n   * name, userData and persistedFaceIds of registered faces of the person).\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.LargePersonGroupPersonListResponse>\n   */\n  list(largePersonGroupId: string, options?: Models.LargePersonGroupPersonListOptionalParams): Promise<Models.LargePersonGroupPersonListResponse>;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param callback The callback\n   */\n  list(largePersonGroupId: string, callback: msRest.ServiceCallback<Models.Person[]>): void;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  list(largePersonGroupId: string, options: Models.LargePersonGroupPersonListOptionalParams, callback: msRest.ServiceCallback<Models.Person[]>): void;\n  list(largePersonGroupId: string, options?: Models.LargePersonGroupPersonListOptionalParams | msRest.ServiceCallback<Models.Person[]>, callback?: msRest.ServiceCallback<Models.Person[]>): Promise<Models.LargePersonGroupPersonListResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largePersonGroupId,\n        options\n      },\n      listOperationSpec,\n      callback) as Promise<Models.LargePersonGroupPersonListResponse>;\n  }\n\n  /**\n   * Delete an existing person from a large person group. The persistedFaceId, userData, person name\n   * and face feature in the person entry will all be deleted.\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param personId Id referencing a particular person.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  deleteMethod(largePersonGroupId: string, personId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param personId Id referencing a particular person.\n   * @param callback The callback\n   */\n  deleteMethod(largePersonGroupId: string, personId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param personId Id referencing a particular person.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteMethod(largePersonGroupId: string, personId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteMethod(largePersonGroupId: string, personId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largePersonGroupId,\n        personId,\n        options\n      },\n      deleteMethodOperationSpec,\n      callback);\n  }\n\n  /**\n   * Retrieve a person's name and userData, and the persisted faceIds representing the registered\n   * person face feature.\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param personId Id referencing a particular person.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.LargePersonGroupPersonGetResponse>\n   */\n  get(largePersonGroupId: string, personId: string, options?: msRest.RequestOptionsBase): Promise<Models.LargePersonGroupPersonGetResponse>;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param personId Id referencing a particular person.\n   * @param callback The callback\n   */\n  get(largePersonGroupId: string, personId: string, callback: msRest.ServiceCallback<Models.Person>): void;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param personId Id referencing a particular person.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  get(largePersonGroupId: string, personId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Person>): void;\n  get(largePersonGroupId: string, personId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Person>, callback?: msRest.ServiceCallback<Models.Person>): Promise<Models.LargePersonGroupPersonGetResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largePersonGroupId,\n        personId,\n        options\n      },\n      getOperationSpec,\n      callback) as Promise<Models.LargePersonGroupPersonGetResponse>;\n  }\n\n  /**\n   * Update name or userData of a person.\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param personId Id referencing a particular person.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  update(largePersonGroupId: string, personId: string, options?: Models.LargePersonGroupPersonUpdateOptionalParams): Promise<msRest.RestResponse>;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param personId Id referencing a particular person.\n   * @param callback The callback\n   */\n  update(largePersonGroupId: string, personId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param personId Id referencing a particular person.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  update(largePersonGroupId: string, personId: string, options: Models.LargePersonGroupPersonUpdateOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  update(largePersonGroupId: string, personId: string, options?: Models.LargePersonGroupPersonUpdateOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largePersonGroupId,\n        personId,\n        options\n      },\n      updateOperationSpec,\n      callback);\n  }\n\n  /**\n   * Delete a face from a person in a large person group by specified largePersonGroupId, personId\n   * and persistedFaceId.\n   * <br /> Adding/deleting faces to/from a same person will be processed sequentially.\n   * Adding/deleting faces to/from different persons are processed in parallel.\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param personId Id referencing a particular person.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  deleteFace(largePersonGroupId: string, personId: string, persistedFaceId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param personId Id referencing a particular person.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param callback The callback\n   */\n  deleteFace(largePersonGroupId: string, personId: string, persistedFaceId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param personId Id referencing a particular person.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteFace(largePersonGroupId: string, personId: string, persistedFaceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteFace(largePersonGroupId: string, personId: string, persistedFaceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largePersonGroupId,\n        personId,\n        persistedFaceId,\n        options\n      },\n      deleteFaceOperationSpec,\n      callback);\n  }\n\n  /**\n   * Retrieve information about a persisted face (specified by persistedFaceId, personId and its\n   * belonging largePersonGroupId).\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param personId Id referencing a particular person.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.LargePersonGroupPersonGetFaceResponse>\n   */\n  getFace(largePersonGroupId: string, personId: string, persistedFaceId: string, options?: msRest.RequestOptionsBase): Promise<Models.LargePersonGroupPersonGetFaceResponse>;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param personId Id referencing a particular person.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param callback The callback\n   */\n  getFace(largePersonGroupId: string, personId: string, persistedFaceId: string, callback: msRest.ServiceCallback<Models.PersistedFace>): void;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param personId Id referencing a particular person.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getFace(largePersonGroupId: string, personId: string, persistedFaceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PersistedFace>): void;\n  getFace(largePersonGroupId: string, personId: string, persistedFaceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PersistedFace>, callback?: msRest.ServiceCallback<Models.PersistedFace>): Promise<Models.LargePersonGroupPersonGetFaceResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largePersonGroupId,\n        personId,\n        persistedFaceId,\n        options\n      },\n      getFaceOperationSpec,\n      callback) as Promise<Models.LargePersonGroupPersonGetFaceResponse>;\n  }\n\n  /**\n   * Update a person persisted face's userData field.\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param personId Id referencing a particular person.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  updateFace(largePersonGroupId: string, personId: string, persistedFaceId: string, options?: Models.LargePersonGroupPersonUpdateFaceOptionalParams): Promise<msRest.RestResponse>;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param personId Id referencing a particular person.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param callback The callback\n   */\n  updateFace(largePersonGroupId: string, personId: string, persistedFaceId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param personId Id referencing a particular person.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateFace(largePersonGroupId: string, personId: string, persistedFaceId: string, options: Models.LargePersonGroupPersonUpdateFaceOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  updateFace(largePersonGroupId: string, personId: string, persistedFaceId: string, options?: Models.LargePersonGroupPersonUpdateFaceOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largePersonGroupId,\n        personId,\n        persistedFaceId,\n        options\n      },\n      updateFaceOperationSpec,\n      callback);\n  }\n\n  /**\n   * Add a face to a person into a large person group for face identification or verification. To\n   * deal with an image contains multiple faces, input face can be specified as an image with a\n   * targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be\n   * stored. Only the extracted face feature will be stored on server until [LargePersonGroup\n   * PersonFace -\n   * Delete](https://docs.microsoft.com/rest/api/faceapi/largepersongroupperson/deleteface),\n   * [LargePersonGroup Person -\n   * Delete](https://docs.microsoft.com/rest/api/faceapi/largepersongroupperson/delete) or\n   * [LargePersonGroup - Delete](https://docs.microsoft.com/rest/api/faceapi/largepersongroup/delete)\n   * is called.\n   * <br /> Note persistedFaceId is different from faceId generated by [Face -\n   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).\n   * * Higher face image quality means better recognition precision. Please consider high-quality\n   * faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n   * * Each person entry can hold up to 248 faces.\n   * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is\n   * from 1KB to 6MB.\n   * * \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an\n   * error. If the provided \"targetFace\" rectangle is not returned from [Face -\n   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to\n   * detect and add the face successfully.\n   * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions\n   * will cause failures.\n   * * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting\n   * faces to/from different persons are processed in parallel.\n   * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels.\n   * Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum\n   * face size.\n   * * Different 'detectionModel' values can be provided. To use and compare different detection\n   * models, please refer to [How to specify a detection\n   * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param personId Id referencing a particular person.\n   * @param url Publicly reachable URL of an image\n   * @param [options] The optional parameters\n   * @returns Promise<Models.LargePersonGroupPersonAddFaceFromUrlResponse>\n   */\n  addFaceFromUrl(largePersonGroupId: string, personId: string, url: string, options?: Models.LargePersonGroupPersonAddFaceFromUrlOptionalParams): Promise<Models.LargePersonGroupPersonAddFaceFromUrlResponse>;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param personId Id referencing a particular person.\n   * @param url Publicly reachable URL of an image\n   * @param callback The callback\n   */\n  addFaceFromUrl(largePersonGroupId: string, personId: string, url: string, callback: msRest.ServiceCallback<Models.PersistedFace>): void;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param personId Id referencing a particular person.\n   * @param url Publicly reachable URL of an image\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  addFaceFromUrl(largePersonGroupId: string, personId: string, url: string, options: Models.LargePersonGroupPersonAddFaceFromUrlOptionalParams, callback: msRest.ServiceCallback<Models.PersistedFace>): void;\n  addFaceFromUrl(largePersonGroupId: string, personId: string, url: string, options?: Models.LargePersonGroupPersonAddFaceFromUrlOptionalParams | msRest.ServiceCallback<Models.PersistedFace>, callback?: msRest.ServiceCallback<Models.PersistedFace>): Promise<Models.LargePersonGroupPersonAddFaceFromUrlResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largePersonGroupId,\n        personId,\n        url,\n        options\n      },\n      addFaceFromUrlOperationSpec,\n      callback) as Promise<Models.LargePersonGroupPersonAddFaceFromUrlResponse>;\n  }\n\n  /**\n   * Add a face to a person into a large person group for face identification or verification. To\n   * deal with an image contains multiple faces, input face can be specified as an image with a\n   * targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be\n   * stored. Only the extracted face feature will be stored on server until [LargePersonGroup\n   * PersonFace -\n   * Delete](https://docs.microsoft.com/rest/api/faceapi/largepersongroupperson/deleteface),\n   * [LargePersonGroup Person -\n   * Delete](https://docs.microsoft.com/rest/api/faceapi/largepersongroupperson/delete) or\n   * [LargePersonGroup - Delete](https://docs.microsoft.com/rest/api/faceapi/largepersongroup/delete)\n   * is called.\n   * <br /> Note persistedFaceId is different from faceId generated by [Face -\n   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).\n   * * Higher face image quality means better recognition precision. Please consider high-quality\n   * faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n   * * Each person entry can hold up to 248 faces.\n   * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is\n   * from 1KB to 6MB.\n   * * \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an\n   * error. If the provided \"targetFace\" rectangle is not returned from [Face -\n   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to\n   * detect and add the face successfully.\n   * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions\n   * will cause failures.\n   * * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting\n   * faces to/from different persons are processed in parallel.\n   * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels.\n   * Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum\n   * face size.\n   * * Different 'detectionModel' values can be provided. To use and compare different detection\n   * models, please refer to [How to specify a detection\n   * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param personId Id referencing a particular person.\n   * @param image An image stream.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.LargePersonGroupPersonAddFaceFromStreamResponse>\n   */\n  addFaceFromStream(largePersonGroupId: string, personId: string, image: msRest.HttpRequestBody, options?: Models.LargePersonGroupPersonAddFaceFromStreamOptionalParams): Promise<Models.LargePersonGroupPersonAddFaceFromStreamResponse>;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param personId Id referencing a particular person.\n   * @param image An image stream.\n   * @param callback The callback\n   */\n  addFaceFromStream(largePersonGroupId: string, personId: string, image: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.PersistedFace>): void;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param personId Id referencing a particular person.\n   * @param image An image stream.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  addFaceFromStream(largePersonGroupId: string, personId: string, image: msRest.HttpRequestBody, options: Models.LargePersonGroupPersonAddFaceFromStreamOptionalParams, callback: msRest.ServiceCallback<Models.PersistedFace>): void;\n  addFaceFromStream(largePersonGroupId: string, personId: string, image: msRest.HttpRequestBody, options?: Models.LargePersonGroupPersonAddFaceFromStreamOptionalParams | msRest.ServiceCallback<Models.PersistedFace>, callback?: msRest.ServiceCallback<Models.PersistedFace>): Promise<Models.LargePersonGroupPersonAddFaceFromStreamResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largePersonGroupId,\n        personId,\n        image,\n        options\n      },\n      addFaceFromStreamOperationSpec,\n      callback) as Promise<Models.LargePersonGroupPersonAddFaceFromStreamResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new msRest.Serializer(Mappers);\nconst createOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"largepersongroups/{largePersonGroupId}/persons\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largePersonGroupId\n  ],\n  requestBody: {\n    parameterPath: {\n      name: [\n        \"options\",\n        \"name\"\n      ],\n      userData: [\n        \"options\",\n        \"userData\"\n      ]\n    },\n    mapper: {\n      ...Mappers.NameAndUserDataContract,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.Person\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst listOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"largepersongroups/{largePersonGroupId}/persons\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largePersonGroupId\n  ],\n  queryParameters: [\n    Parameters.start0,\n    Parameters.top0\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Person\"\n            }\n          }\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst deleteMethodOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"largepersongroups/{largePersonGroupId}/persons/{personId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largePersonGroupId,\n    Parameters.personId\n  ],\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst getOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"largepersongroups/{largePersonGroupId}/persons/{personId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largePersonGroupId,\n    Parameters.personId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.Person\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst updateOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"largepersongroups/{largePersonGroupId}/persons/{personId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largePersonGroupId,\n    Parameters.personId\n  ],\n  requestBody: {\n    parameterPath: {\n      name: [\n        \"options\",\n        \"name\"\n      ],\n      userData: [\n        \"options\",\n        \"userData\"\n      ]\n    },\n    mapper: {\n      ...Mappers.NameAndUserDataContract,\n      required: true\n    }\n  },\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst deleteFaceOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largePersonGroupId,\n    Parameters.personId,\n    Parameters.persistedFaceId\n  ],\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst getFaceOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largePersonGroupId,\n    Parameters.personId,\n    Parameters.persistedFaceId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.PersistedFace\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst updateFaceOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largePersonGroupId,\n    Parameters.personId,\n    Parameters.persistedFaceId\n  ],\n  requestBody: {\n    parameterPath: {\n      userData: [\n        \"options\",\n        \"userData\"\n      ]\n    },\n    mapper: {\n      ...Mappers.UpdateFaceRequest,\n      required: true\n    }\n  },\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst addFaceFromUrlOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largePersonGroupId,\n    Parameters.personId\n  ],\n  queryParameters: [\n    Parameters.userData,\n    Parameters.targetFace,\n    Parameters.detectionModel\n  ],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.PersistedFace\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst addFaceFromStreamOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largePersonGroupId,\n    Parameters.personId\n  ],\n  queryParameters: [\n    Parameters.userData,\n    Parameters.targetFace,\n    Parameters.detectionModel\n  ],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PersistedFace\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nexport {\n  APIError,\n  ErrorModel,\n  FaceList,\n  LargeFaceList,\n  LargePersonGroup,\n  MetaDataContract,\n  NameAndUserDataContract,\n  NonNullableNameAndNullableUserDataContract,\n  PersistedFace,\n  Person,\n  PersonGroup,\n  TrainingStatus\n} from \"../models/mappers\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/largePersonGroupOperationsMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { FaceClientContext } from \"../faceClientContext\";\n\n/** Class representing a LargePersonGroupOperations. */\nexport class LargePersonGroupOperations {\n  private readonly client: FaceClientContext;\n\n  /**\n   * Create a LargePersonGroupOperations.\n   * @param {FaceClientContext} client Reference to the service client.\n   */\n  constructor(client: FaceClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Create a new large person group with user-specified largePersonGroupId, name, an optional\n   * userData and recognitionModel.\n   * <br /> A large person group is the container of the uploaded person data, including face\n   * recognition feature, and up to 1,000,000\n   * people.\n   * <br /> After creation, use [LargePersonGroup Person -\n   * Create](https://docs.microsoft.com/rest/api/faceapi/largepersongroupperson/create) to add person\n   * into the group, and call [LargePersonGroup -\n   * Train](https://docs.microsoft.com/rest/api/faceapi/largepersongroup/train) to get this group\n   * ready for [Face - Identify](https://docs.microsoft.com/rest/api/faceapi/face/identify).\n   * <br /> No image will be stored. Only the person's extracted face features and userData will be\n   * stored on server until [LargePersonGroup Person -\n   * Delete](https://docs.microsoft.com/rest/api/faceapi/largepersongroupperson/delete) or\n   * [LargePersonGroup - Delete](https://docs.microsoft.com/rest/api/faceapi/largepersongroup/delete)\n   * is called.\n   * <br/>'recognitionModel' should be specified to associate with this large person group. The\n   * default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please\n   * explicitly specify the model you need in this parameter. New faces that are added to an existing\n   * large person group will use the recognition model that's already associated with the collection.\n   * Existing face features in a large person group can't be updated to features extracted by another\n   * version of recognition model. Please refer to [Specify a face recognition\n   * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model).\n   *\n   * Large person group quota:\n   * * Free-tier subscription quota: 1,000 large person groups.\n   * * S0-tier subscription quota: 1,000,000 large person groups.\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param name User defined name, maximum length is 128.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  create(largePersonGroupId: string, name: string, options?: Models.LargePersonGroupCreateOptionalParams): Promise<msRest.RestResponse>;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param name User defined name, maximum length is 128.\n   * @param callback The callback\n   */\n  create(largePersonGroupId: string, name: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param name User defined name, maximum length is 128.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  create(largePersonGroupId: string, name: string, options: Models.LargePersonGroupCreateOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  create(largePersonGroupId: string, name: string, options?: Models.LargePersonGroupCreateOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largePersonGroupId,\n        name,\n        options\n      },\n      createOperationSpec,\n      callback);\n  }\n\n  /**\n   * Delete an existing large person group. Persisted face features of all people in the large person\n   * group will also be deleted.\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  deleteMethod(largePersonGroupId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param callback The callback\n   */\n  deleteMethod(largePersonGroupId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteMethod(largePersonGroupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteMethod(largePersonGroupId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largePersonGroupId,\n        options\n      },\n      deleteMethodOperationSpec,\n      callback);\n  }\n\n  /**\n   * Retrieve the information of a large person group, including its name, userData and\n   * recognitionModel. This API returns large person group information only, use [LargePersonGroup\n   * Person - List](https://docs.microsoft.com/rest/api/faceapi/largepersongroupperson/list) instead\n   * to retrieve person information under the large person group.\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.LargePersonGroupGetResponse>\n   */\n  get(largePersonGroupId: string, options?: Models.LargePersonGroupGetOptionalParams): Promise<Models.LargePersonGroupGetResponse>;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param callback The callback\n   */\n  get(largePersonGroupId: string, callback: msRest.ServiceCallback<Models.LargePersonGroup>): void;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  get(largePersonGroupId: string, options: Models.LargePersonGroupGetOptionalParams, callback: msRest.ServiceCallback<Models.LargePersonGroup>): void;\n  get(largePersonGroupId: string, options?: Models.LargePersonGroupGetOptionalParams | msRest.ServiceCallback<Models.LargePersonGroup>, callback?: msRest.ServiceCallback<Models.LargePersonGroup>): Promise<Models.LargePersonGroupGetResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largePersonGroupId,\n        options\n      },\n      getOperationSpec,\n      callback) as Promise<Models.LargePersonGroupGetResponse>;\n  }\n\n  /**\n   * Update an existing large person group's display name and userData. The properties which does not\n   * appear in request body will not be updated.\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  update(largePersonGroupId: string, options?: Models.LargePersonGroupUpdateOptionalParams): Promise<msRest.RestResponse>;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param callback The callback\n   */\n  update(largePersonGroupId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  update(largePersonGroupId: string, options: Models.LargePersonGroupUpdateOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  update(largePersonGroupId: string, options?: Models.LargePersonGroupUpdateOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largePersonGroupId,\n        options\n      },\n      updateOperationSpec,\n      callback);\n  }\n\n  /**\n   * Retrieve the training status of a large person group (completed or ongoing).\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.LargePersonGroupGetTrainingStatusResponse>\n   */\n  getTrainingStatus(largePersonGroupId: string, options?: msRest.RequestOptionsBase): Promise<Models.LargePersonGroupGetTrainingStatusResponse>;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param callback The callback\n   */\n  getTrainingStatus(largePersonGroupId: string, callback: msRest.ServiceCallback<Models.TrainingStatus>): void;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getTrainingStatus(largePersonGroupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TrainingStatus>): void;\n  getTrainingStatus(largePersonGroupId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TrainingStatus>, callback?: msRest.ServiceCallback<Models.TrainingStatus>): Promise<Models.LargePersonGroupGetTrainingStatusResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largePersonGroupId,\n        options\n      },\n      getTrainingStatusOperationSpec,\n      callback) as Promise<Models.LargePersonGroupGetTrainingStatusResponse>;\n  }\n\n  /**\n   * List all existing large person groups’ largePersonGroupId, name, userData and\n   * recognitionModel.<br />\n   * * Large person groups are stored in alphabetical order of largePersonGroupId.\n   * * \"start\" parameter (string, optional) is a user-provided largePersonGroupId value that returned\n   * entries have larger ids by string comparison. \"start\" set to empty to indicate return from the\n   * first item.\n   * * \"top\" parameter (int, optional) specifies the number of entries to return. A maximal of 1000\n   * entries can be returned in one call. To fetch more, you can specify \"start\" with the last\n   * returned entry’s Id of the current call.\n   * <br />\n   * For example, total 5 large person groups: \"group1\", ..., \"group5\".\n   * <br /> \"start=&top=\" will return all 5 groups.\n   * <br /> \"start=&top=2\" will return \"group1\", \"group2\".\n   * <br /> \"start=group2&top=3\" will return \"group3\", \"group4\", \"group5\".\n   * @param [options] The optional parameters\n   * @returns Promise<Models.LargePersonGroupListResponse>\n   */\n  list(options?: Models.LargePersonGroupListOptionalParams): Promise<Models.LargePersonGroupListResponse>;\n  /**\n   * @param callback The callback\n   */\n  list(callback: msRest.ServiceCallback<Models.LargePersonGroup[]>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  list(options: Models.LargePersonGroupListOptionalParams, callback: msRest.ServiceCallback<Models.LargePersonGroup[]>): void;\n  list(options?: Models.LargePersonGroupListOptionalParams | msRest.ServiceCallback<Models.LargePersonGroup[]>, callback?: msRest.ServiceCallback<Models.LargePersonGroup[]>): Promise<Models.LargePersonGroupListResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      listOperationSpec,\n      callback) as Promise<Models.LargePersonGroupListResponse>;\n  }\n\n  /**\n   * Queue a large person group training task, the training task may not be started immediately.\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  train(largePersonGroupId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param callback The callback\n   */\n  train(largePersonGroupId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param largePersonGroupId Id referencing a particular large person group.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  train(largePersonGroupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  train(largePersonGroupId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largePersonGroupId,\n        options\n      },\n      trainOperationSpec,\n      callback);\n  }\n}\n\n// Operation Specifications\nconst serializer = new msRest.Serializer(Mappers);\nconst createOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"largepersongroups/{largePersonGroupId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largePersonGroupId\n  ],\n  requestBody: {\n    parameterPath: {\n      name: \"name\",\n      userData: [\n        \"options\",\n        \"userData\"\n      ],\n      recognitionModel: [\n        \"options\",\n        \"recognitionModel\"\n      ]\n    },\n    mapper: {\n      ...Mappers.MetaDataContract,\n      required: true\n    }\n  },\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst deleteMethodOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"largepersongroups/{largePersonGroupId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largePersonGroupId\n  ],\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst getOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"largepersongroups/{largePersonGroupId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largePersonGroupId\n  ],\n  queryParameters: [\n    Parameters.returnRecognitionModel\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.LargePersonGroup\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst updateOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"largepersongroups/{largePersonGroupId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largePersonGroupId\n  ],\n  requestBody: {\n    parameterPath: {\n      name: [\n        \"options\",\n        \"name\"\n      ],\n      userData: [\n        \"options\",\n        \"userData\"\n      ]\n    },\n    mapper: {\n      ...Mappers.NameAndUserDataContract,\n      required: true\n    }\n  },\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst getTrainingStatusOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"largepersongroups/{largePersonGroupId}/training\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largePersonGroupId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.TrainingStatus\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst listOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"largepersongroups\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.start1,\n    Parameters.top1,\n    Parameters.returnRecognitionModel\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"LargePersonGroup\"\n            }\n          }\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst trainOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"largepersongroups/{largePersonGroupId}/train\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largePersonGroupId\n  ],\n  responses: {\n    202: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nexport {\n  APIError,\n  ErrorModel,\n  FaceList,\n  ImageUrl,\n  LargeFaceList,\n  LargePersonGroup,\n  MetaDataContract,\n  NameAndUserDataContract,\n  NonNullableNameAndNullableUserDataContract,\n  PersistedFace,\n  Person,\n  PersonGroup,\n  TrainingStatus,\n  UpdateFaceRequest\n} from \"../models/mappers\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/largeFaceListOperationsMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { FaceClientContext } from \"../faceClientContext\";\n\n/** Class representing a LargeFaceListOperations. */\nexport class LargeFaceListOperations {\n  private readonly client: FaceClientContext;\n\n  /**\n   * Create a LargeFaceListOperations.\n   * @param {FaceClientContext} client Reference to the service client.\n   */\n  constructor(client: FaceClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Create an empty large face list with user-specified largeFaceListId, name, an optional userData\n   * and recognitionModel.\n   * <br /> Large face list is a list of faces, up to 1,000,000 faces, and used by [Face - Find\n   * Similar](https://docs.microsoft.com/rest/api/faceapi/face/findsimilar).\n   * <br /> After creation, user should use [LargeFaceList Face -\n   * Add](https://docs.microsoft.com/rest/api/faceapi/largefacelist/addfacefromurl) to import the\n   * faces and [LargeFaceList -\n   * Train](https://docs.microsoft.com/rest/api/faceapi/largefacelist/train) to make it ready for\n   * [Face - Find Similar](https://docs.microsoft.com/rest/api/faceapi/face/findsimilar). No image\n   * will be stored. Only the extracted face features are stored on server until [LargeFaceList -\n   * Delete](https://docs.microsoft.com/rest/api/faceapi/largefacelist/delete) is called.\n   * <br /> Find Similar is used for scenario like finding celebrity-like faces, similar face\n   * filtering, or as a light way face identification. But if the actual use is to identify person,\n   * please use [PersonGroup](https://docs.microsoft.com/rest/api/faceapi/persongroup) /\n   * [LargePersonGroup](https://docs.microsoft.com/rest/api/faceapi/largepersongroup) and [Face -\n   * Identify](https://docs.microsoft.com/rest/api/faceapi/face/identify).\n   * <br/>'recognitionModel' should be specified to associate with this large face list. The default\n   * value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly\n   * specify the model you need in this parameter. New faces that are added to an existing large face\n   * list will use the recognition model that's already associated with the collection. Existing face\n   * features in a large face list can't be updated to features extracted by another version of\n   * recognition model. Please refer to [Specify a recognition\n   * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model).\n   *\n   * Large face list quota:\n   * * Free-tier subscription quota: 64 large face lists.\n   * * S0-tier subscription quota: 1,000,000 large face lists.\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param name User defined name, maximum length is 128.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  create(largeFaceListId: string, name: string, options?: Models.LargeFaceListCreateOptionalParams): Promise<msRest.RestResponse>;\n  /**\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param name User defined name, maximum length is 128.\n   * @param callback The callback\n   */\n  create(largeFaceListId: string, name: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param name User defined name, maximum length is 128.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  create(largeFaceListId: string, name: string, options: Models.LargeFaceListCreateOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  create(largeFaceListId: string, name: string, options?: Models.LargeFaceListCreateOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largeFaceListId,\n        name,\n        options\n      },\n      createOperationSpec,\n      callback);\n  }\n\n  /**\n   * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.LargeFaceListGetResponse>\n   */\n  get(largeFaceListId: string, options?: Models.LargeFaceListGetOptionalParams): Promise<Models.LargeFaceListGetResponse>;\n  /**\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param callback The callback\n   */\n  get(largeFaceListId: string, callback: msRest.ServiceCallback<Models.LargeFaceList>): void;\n  /**\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  get(largeFaceListId: string, options: Models.LargeFaceListGetOptionalParams, callback: msRest.ServiceCallback<Models.LargeFaceList>): void;\n  get(largeFaceListId: string, options?: Models.LargeFaceListGetOptionalParams | msRest.ServiceCallback<Models.LargeFaceList>, callback?: msRest.ServiceCallback<Models.LargeFaceList>): Promise<Models.LargeFaceListGetResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largeFaceListId,\n        options\n      },\n      getOperationSpec,\n      callback) as Promise<Models.LargeFaceListGetResponse>;\n  }\n\n  /**\n   * Update information of a large face list.\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  update(largeFaceListId: string, options?: Models.LargeFaceListUpdateOptionalParams): Promise<msRest.RestResponse>;\n  /**\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param callback The callback\n   */\n  update(largeFaceListId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  update(largeFaceListId: string, options: Models.LargeFaceListUpdateOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  update(largeFaceListId: string, options?: Models.LargeFaceListUpdateOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largeFaceListId,\n        options\n      },\n      updateOperationSpec,\n      callback);\n  }\n\n  /**\n   * Delete a specified large face list.\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  deleteMethod(largeFaceListId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;\n  /**\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param callback The callback\n   */\n  deleteMethod(largeFaceListId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteMethod(largeFaceListId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteMethod(largeFaceListId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largeFaceListId,\n        options\n      },\n      deleteMethodOperationSpec,\n      callback);\n  }\n\n  /**\n   * Retrieve the training status of a large face list (completed or ongoing).\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.LargeFaceListGetTrainingStatusResponse>\n   */\n  getTrainingStatus(largeFaceListId: string, options?: msRest.RequestOptionsBase): Promise<Models.LargeFaceListGetTrainingStatusResponse>;\n  /**\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param callback The callback\n   */\n  getTrainingStatus(largeFaceListId: string, callback: msRest.ServiceCallback<Models.TrainingStatus>): void;\n  /**\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getTrainingStatus(largeFaceListId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TrainingStatus>): void;\n  getTrainingStatus(largeFaceListId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TrainingStatus>, callback?: msRest.ServiceCallback<Models.TrainingStatus>): Promise<Models.LargeFaceListGetTrainingStatusResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largeFaceListId,\n        options\n      },\n      getTrainingStatusOperationSpec,\n      callback) as Promise<Models.LargeFaceListGetTrainingStatusResponse>;\n  }\n\n  /**\n   * List large face lists’ information of largeFaceListId, name, userData and recognitionModel. <br\n   * />\n   * To get face information inside largeFaceList use [LargeFaceList Face -\n   * Get](https://docs.microsoft.com/rest/api/faceapi/largefacelist/getface)<br />\n   * * Large face lists are stored in alphabetical order of largeFaceListId.\n   * * \"start\" parameter (string, optional) is a user-provided largeFaceListId value that returned\n   * entries have larger ids by string comparison. \"start\" set to empty to indicate return from the\n   * first item.\n   * * \"top\" parameter (int, optional) specifies the number of entries to return. A maximal of 1000\n   * entries can be returned in one call. To fetch more, you can specify \"start\" with the last\n   * returned entry’s Id of the current call.\n   * <br />\n   * For example, total 5 large person lists: \"list1\", ..., \"list5\".\n   * <br /> \"start=&top=\" will return all 5 lists.\n   * <br /> \"start=&top=2\" will return \"list1\", \"list2\".\n   * <br /> \"start=list2&top=3\" will return \"list3\", \"list4\", \"list5\".\n   * @param [options] The optional parameters\n   * @returns Promise<Models.LargeFaceListListResponse>\n   */\n  list(options?: Models.LargeFaceListListOptionalParams): Promise<Models.LargeFaceListListResponse>;\n  /**\n   * @param callback The callback\n   */\n  list(callback: msRest.ServiceCallback<Models.LargeFaceList[]>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  list(options: Models.LargeFaceListListOptionalParams, callback: msRest.ServiceCallback<Models.LargeFaceList[]>): void;\n  list(options?: Models.LargeFaceListListOptionalParams | msRest.ServiceCallback<Models.LargeFaceList[]>, callback?: msRest.ServiceCallback<Models.LargeFaceList[]>): Promise<Models.LargeFaceListListResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      listOperationSpec,\n      callback) as Promise<Models.LargeFaceListListResponse>;\n  }\n\n  /**\n   * Queue a large face list training task, the training task may not be started immediately.\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  train(largeFaceListId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;\n  /**\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param callback The callback\n   */\n  train(largeFaceListId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  train(largeFaceListId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  train(largeFaceListId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largeFaceListId,\n        options\n      },\n      trainOperationSpec,\n      callback);\n  }\n\n  /**\n   * Delete a face from a large face list by specified largeFaceListId and persistedFaceId.\n   * <br /> Adding/deleting faces to/from a same large face list are processed sequentially and\n   * to/from different large face lists are in parallel.\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  deleteFace(largeFaceListId: string, persistedFaceId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;\n  /**\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param callback The callback\n   */\n  deleteFace(largeFaceListId: string, persistedFaceId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteFace(largeFaceListId: string, persistedFaceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteFace(largeFaceListId: string, persistedFaceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largeFaceListId,\n        persistedFaceId,\n        options\n      },\n      deleteFaceOperationSpec,\n      callback);\n  }\n\n  /**\n   * Retrieve information about a persisted face (specified by persistedFaceId and its belonging\n   * largeFaceListId).\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.LargeFaceListGetFaceResponse>\n   */\n  getFace(largeFaceListId: string, persistedFaceId: string, options?: msRest.RequestOptionsBase): Promise<Models.LargeFaceListGetFaceResponse>;\n  /**\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param callback The callback\n   */\n  getFace(largeFaceListId: string, persistedFaceId: string, callback: msRest.ServiceCallback<Models.PersistedFace>): void;\n  /**\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getFace(largeFaceListId: string, persistedFaceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PersistedFace>): void;\n  getFace(largeFaceListId: string, persistedFaceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PersistedFace>, callback?: msRest.ServiceCallback<Models.PersistedFace>): Promise<Models.LargeFaceListGetFaceResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largeFaceListId,\n        persistedFaceId,\n        options\n      },\n      getFaceOperationSpec,\n      callback) as Promise<Models.LargeFaceListGetFaceResponse>;\n  }\n\n  /**\n   * Update a persisted face's userData field.\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  updateFace(largeFaceListId: string, persistedFaceId: string, options?: Models.LargeFaceListUpdateFaceOptionalParams): Promise<msRest.RestResponse>;\n  /**\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param callback The callback\n   */\n  updateFace(largeFaceListId: string, persistedFaceId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateFace(largeFaceListId: string, persistedFaceId: string, options: Models.LargeFaceListUpdateFaceOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  updateFace(largeFaceListId: string, persistedFaceId: string, options?: Models.LargeFaceListUpdateFaceOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largeFaceListId,\n        persistedFaceId,\n        options\n      },\n      updateFaceOperationSpec,\n      callback);\n  }\n\n  /**\n   * Add a face to a specified large face list, up to 1,000,000 faces.\n   * <br /> To deal with an image contains multiple faces, input face can be specified as an image\n   * with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image\n   * will be stored. Only the extracted face feature will be stored on server until [LargeFaceList\n   * Face - Delete](https://docs.microsoft.com/rest/api/faceapi/largefacelist/deleteface) or\n   * [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/faceapi/largefacelist/delete) is\n   * called.\n   * <br /> Note persistedFaceId is different from faceId generated by [Face -\n   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).\n   * * Higher face image quality means better recognition precision. Please consider high-quality\n   * faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n   * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is\n   * from 1KB to 6MB.\n   * * \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an\n   * error. If the provided \"targetFace\" rectangle is not returned from [Face -\n   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to\n   * detect and add the face successfully.\n   * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions\n   * will cause failures.\n   * * Adding/deleting faces to/from a same face list are processed sequentially and to/from\n   * different face lists are in parallel.\n   * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels.\n   * Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum\n   * face size.\n   * * Different 'detectionModel' values can be provided. To use and compare different detection\n   * models, please refer to [How to specify a detection\n   * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)\n   *\n   * Quota:\n   * * Free-tier subscription quota: 1,000 faces per large face list.\n   * * S0-tier subscription quota: 1,000,000 faces per large face list.\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param url Publicly reachable URL of an image\n   * @param [options] The optional parameters\n   * @returns Promise<Models.LargeFaceListAddFaceFromUrlResponse>\n   */\n  addFaceFromUrl(largeFaceListId: string, url: string, options?: Models.LargeFaceListAddFaceFromUrlOptionalParams): Promise<Models.LargeFaceListAddFaceFromUrlResponse>;\n  /**\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param url Publicly reachable URL of an image\n   * @param callback The callback\n   */\n  addFaceFromUrl(largeFaceListId: string, url: string, callback: msRest.ServiceCallback<Models.PersistedFace>): void;\n  /**\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param url Publicly reachable URL of an image\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  addFaceFromUrl(largeFaceListId: string, url: string, options: Models.LargeFaceListAddFaceFromUrlOptionalParams, callback: msRest.ServiceCallback<Models.PersistedFace>): void;\n  addFaceFromUrl(largeFaceListId: string, url: string, options?: Models.LargeFaceListAddFaceFromUrlOptionalParams | msRest.ServiceCallback<Models.PersistedFace>, callback?: msRest.ServiceCallback<Models.PersistedFace>): Promise<Models.LargeFaceListAddFaceFromUrlResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largeFaceListId,\n        url,\n        options\n      },\n      addFaceFromUrlOperationSpec,\n      callback) as Promise<Models.LargeFaceListAddFaceFromUrlResponse>;\n  }\n\n  /**\n   * List all faces in a large face list, and retrieve face information (including userData and\n   * persistedFaceIds of registered faces of the face).\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.LargeFaceListListFacesResponse>\n   */\n  listFaces(largeFaceListId: string, options?: Models.LargeFaceListListFacesOptionalParams): Promise<Models.LargeFaceListListFacesResponse>;\n  /**\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param callback The callback\n   */\n  listFaces(largeFaceListId: string, callback: msRest.ServiceCallback<Models.PersistedFace[]>): void;\n  /**\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listFaces(largeFaceListId: string, options: Models.LargeFaceListListFacesOptionalParams, callback: msRest.ServiceCallback<Models.PersistedFace[]>): void;\n  listFaces(largeFaceListId: string, options?: Models.LargeFaceListListFacesOptionalParams | msRest.ServiceCallback<Models.PersistedFace[]>, callback?: msRest.ServiceCallback<Models.PersistedFace[]>): Promise<Models.LargeFaceListListFacesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largeFaceListId,\n        options\n      },\n      listFacesOperationSpec,\n      callback) as Promise<Models.LargeFaceListListFacesResponse>;\n  }\n\n  /**\n   * Add a face to a specified large face list, up to 1,000,000 faces.\n   * <br /> To deal with an image contains multiple faces, input face can be specified as an image\n   * with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image\n   * will be stored. Only the extracted face feature will be stored on server until [LargeFaceList\n   * Face - Delete](https://docs.microsoft.com/rest/api/faceapi/largefacelist/deleteface) or\n   * [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/faceapi/largefacelist/delete) is\n   * called.\n   * <br /> Note persistedFaceId is different from faceId generated by [Face -\n   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).\n   * * Higher face image quality means better recognition precision. Please consider high-quality\n   * faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.\n   * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is\n   * from 1KB to 6MB.\n   * * \"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an\n   * error. If the provided \"targetFace\" rectangle is not returned from [Face -\n   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to\n   * detect and add the face successfully.\n   * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions\n   * will cause failures.\n   * * Adding/deleting faces to/from a same face list are processed sequentially and to/from\n   * different face lists are in parallel.\n   * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels.\n   * Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum\n   * face size.\n   * * Different 'detectionModel' values can be provided. To use and compare different detection\n   * models, please refer to [How to specify a detection\n   * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).\n   *\n   * Quota:\n   * * Free-tier subscription quota: 1,000 faces per large face list.\n   * * S0-tier subscription quota: 1,000,000 faces per large face list.\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param image An image stream.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.LargeFaceListAddFaceFromStreamResponse>\n   */\n  addFaceFromStream(largeFaceListId: string, image: msRest.HttpRequestBody, options?: Models.LargeFaceListAddFaceFromStreamOptionalParams): Promise<Models.LargeFaceListAddFaceFromStreamResponse>;\n  /**\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param image An image stream.\n   * @param callback The callback\n   */\n  addFaceFromStream(largeFaceListId: string, image: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.PersistedFace>): void;\n  /**\n   * @param largeFaceListId Id referencing a particular large face list.\n   * @param image An image stream.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  addFaceFromStream(largeFaceListId: string, image: msRest.HttpRequestBody, options: Models.LargeFaceListAddFaceFromStreamOptionalParams, callback: msRest.ServiceCallback<Models.PersistedFace>): void;\n  addFaceFromStream(largeFaceListId: string, image: msRest.HttpRequestBody, options?: Models.LargeFaceListAddFaceFromStreamOptionalParams | msRest.ServiceCallback<Models.PersistedFace>, callback?: msRest.ServiceCallback<Models.PersistedFace>): Promise<Models.LargeFaceListAddFaceFromStreamResponse> {\n    return this.client.sendOperationRequest(\n      {\n        largeFaceListId,\n        image,\n        options\n      },\n      addFaceFromStreamOperationSpec,\n      callback) as Promise<Models.LargeFaceListAddFaceFromStreamResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new msRest.Serializer(Mappers);\nconst createOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"largefacelists/{largeFaceListId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largeFaceListId\n  ],\n  requestBody: {\n    parameterPath: {\n      name: \"name\",\n      userData: [\n        \"options\",\n        \"userData\"\n      ],\n      recognitionModel: [\n        \"options\",\n        \"recognitionModel\"\n      ]\n    },\n    mapper: {\n      ...Mappers.MetaDataContract,\n      required: true\n    }\n  },\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst getOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"largefacelists/{largeFaceListId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largeFaceListId\n  ],\n  queryParameters: [\n    Parameters.returnRecognitionModel\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.LargeFaceList\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst updateOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"largefacelists/{largeFaceListId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largeFaceListId\n  ],\n  requestBody: {\n    parameterPath: {\n      name: [\n        \"options\",\n        \"name\"\n      ],\n      userData: [\n        \"options\",\n        \"userData\"\n      ]\n    },\n    mapper: {\n      ...Mappers.NameAndUserDataContract,\n      required: true\n    }\n  },\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst deleteMethodOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"largefacelists/{largeFaceListId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largeFaceListId\n  ],\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst getTrainingStatusOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"largefacelists/{largeFaceListId}/training\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largeFaceListId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.TrainingStatus\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst listOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"largefacelists\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.returnRecognitionModel,\n    Parameters.start0,\n    Parameters.top0\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"LargeFaceList\"\n            }\n          }\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst trainOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"largefacelists/{largeFaceListId}/train\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largeFaceListId\n  ],\n  responses: {\n    202: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst deleteFaceOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largeFaceListId,\n    Parameters.persistedFaceId\n  ],\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst getFaceOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largeFaceListId,\n    Parameters.persistedFaceId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.PersistedFace\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst updateFaceOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largeFaceListId,\n    Parameters.persistedFaceId\n  ],\n  requestBody: {\n    parameterPath: {\n      userData: [\n        \"options\",\n        \"userData\"\n      ]\n    },\n    mapper: {\n      ...Mappers.UpdateFaceRequest,\n      required: true\n    }\n  },\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst addFaceFromUrlOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"largefacelists/{largeFaceListId}/persistedfaces\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largeFaceListId\n  ],\n  queryParameters: [\n    Parameters.userData,\n    Parameters.targetFace,\n    Parameters.detectionModel\n  ],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.PersistedFace\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst listFacesOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"largefacelists/{largeFaceListId}/persistedfaces\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largeFaceListId\n  ],\n  queryParameters: [\n    Parameters.start0,\n    Parameters.top0\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PersistedFace\"\n            }\n          }\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst addFaceFromStreamOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"largefacelists/{largeFaceListId}/persistedfaces\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.largeFaceListId\n  ],\n  queryParameters: [\n    Parameters.userData,\n    Parameters.targetFace,\n    Parameters.detectionModel\n  ],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PersistedFace\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nexport {\n  APIError,\n  ApplySnapshotRequest,\n  ErrorModel,\n  OperationStatus,\n  Snapshot,\n  SnapshotApplyHeaders,\n  SnapshotTakeHeaders,\n  TakeSnapshotRequest,\n  UpdateSnapshotRequest\n} from \"../models/mappers\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/snapshotOperationsMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { FaceClientContext } from \"../faceClientContext\";\n\n/** Class representing a SnapshotOperations. */\nexport class SnapshotOperations {\n  private readonly client: FaceClientContext;\n\n  /**\n   * Create a SnapshotOperations.\n   * @param {FaceClientContext} client Reference to the service client.\n   */\n  constructor(client: FaceClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Submit an operation to take a snapshot of face list, large face list, person group or large\n   * person group, with user-specified snapshot type, source object id, apply scope and an optional\n   * user data.<br />\n   * The snapshot interfaces are for users to backup and restore their face data from one face\n   * subscription to another, inside same region or across regions. The workflow contains two phases,\n   * user first calls Snapshot - Take to create a copy of the source object and store it as a\n   * snapshot, then calls Snapshot - Apply to paste the snapshot to target subscription. The\n   * snapshots are stored in a centralized location (per Azure instance), so that they can be applied\n   * cross accounts and regions.<br />\n   * Taking snapshot is an asynchronous operation. An operation id can be obtained from the\n   * \"Operation-Location\" field in response header, to be used in OperationStatus - Get for tracking\n   * the progress of creating the snapshot. The snapshot id will be included in the\n   * \"resourceLocation\" field in OperationStatus - Get response when the operation status is\n   * \"succeeded\".<br />\n   * Snapshot taking time depends on the number of person and face entries in the source object. It\n   * could be in seconds, or up to several hours for 1,000,000 persons with multiple faces.<br />\n   * Snapshots will be automatically expired and cleaned in 48 hours after it is created by Snapshot\n   * - Take. User can delete the snapshot using Snapshot - Delete by themselves any time before\n   * expiration.<br />\n   * Taking snapshot for a certain object will not block any other operations against the object. All\n   * read-only operations (Get/List and Identify/FindSimilar/Verify) can be conducted as usual. For\n   * all writable operations, including Add/Update/Delete the source object or its persons/faces and\n   * Train, they are not blocked but not recommended because writable updates may not be reflected on\n   * the snapshot during its taking. After snapshot taking is completed, all readable and writable\n   * operations can work as normal. Snapshot will also include the training results of the source\n   * object, which means target subscription the snapshot applied to does not need re-train the\n   * target object before calling Identify/FindSimilar.<br />\n   * * Free-tier subscription quota: 100 take operations per month.\n   * * S0-tier subscription quota: 100 take operations per day.\n   * @param type User specified type for the source object to take snapshot from. Currently FaceList,\n   * PersonGroup, LargeFaceList and LargePersonGroup are supported. Possible values include:\n   * 'FaceList', 'LargeFaceList', 'LargePersonGroup', 'PersonGroup'\n   * @param objectId User specified source object id to take snapshot from.\n   * @param applyScope User specified array of target Face subscription ids for the snapshot. For\n   * each snapshot, only subscriptions included in the applyScope of Snapshot - Take can apply it.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.SnapshotTakeResponse>\n   */\n  take(type: Models.SnapshotObjectType, objectId: string, applyScope: string[], options?: Models.SnapshotTakeOptionalParams): Promise<Models.SnapshotTakeResponse>;\n  /**\n   * @param type User specified type for the source object to take snapshot from. Currently FaceList,\n   * PersonGroup, LargeFaceList and LargePersonGroup are supported. Possible values include:\n   * 'FaceList', 'LargeFaceList', 'LargePersonGroup', 'PersonGroup'\n   * @param objectId User specified source object id to take snapshot from.\n   * @param applyScope User specified array of target Face subscription ids for the snapshot. For\n   * each snapshot, only subscriptions included in the applyScope of Snapshot - Take can apply it.\n   * @param callback The callback\n   */\n  take(type: Models.SnapshotObjectType, objectId: string, applyScope: string[], callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param type User specified type for the source object to take snapshot from. Currently FaceList,\n   * PersonGroup, LargeFaceList and LargePersonGroup are supported. Possible values include:\n   * 'FaceList', 'LargeFaceList', 'LargePersonGroup', 'PersonGroup'\n   * @param objectId User specified source object id to take snapshot from.\n   * @param applyScope User specified array of target Face subscription ids for the snapshot. For\n   * each snapshot, only subscriptions included in the applyScope of Snapshot - Take can apply it.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  take(type: Models.SnapshotObjectType, objectId: string, applyScope: string[], options: Models.SnapshotTakeOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  take(type: Models.SnapshotObjectType, objectId: string, applyScope: string[], options?: Models.SnapshotTakeOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.SnapshotTakeResponse> {\n    return this.client.sendOperationRequest(\n      {\n        type,\n        objectId,\n        applyScope,\n        options\n      },\n      takeOperationSpec,\n      callback) as Promise<Models.SnapshotTakeResponse>;\n  }\n\n  /**\n   * List all accessible snapshots with related information, including snapshots that were taken by\n   * the user, or snapshots to be applied to the user (subscription id was included in the applyScope\n   * in Snapshot - Take).\n   * @param [options] The optional parameters\n   * @returns Promise<Models.SnapshotListResponse>\n   */\n  list(options?: Models.SnapshotListOptionalParams): Promise<Models.SnapshotListResponse>;\n  /**\n   * @param callback The callback\n   */\n  list(callback: msRest.ServiceCallback<Models.Snapshot[]>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  list(options: Models.SnapshotListOptionalParams, callback: msRest.ServiceCallback<Models.Snapshot[]>): void;\n  list(options?: Models.SnapshotListOptionalParams | msRest.ServiceCallback<Models.Snapshot[]>, callback?: msRest.ServiceCallback<Models.Snapshot[]>): Promise<Models.SnapshotListResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      listOperationSpec,\n      callback) as Promise<Models.SnapshotListResponse>;\n  }\n\n  /**\n   * Retrieve information about a snapshot. Snapshot is only accessible to the source subscription\n   * who took it, and target subscriptions included in the applyScope in Snapshot - Take.\n   * @param snapshotId Id referencing a particular snapshot.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.SnapshotGetResponse>\n   */\n  get(snapshotId: string, options?: msRest.RequestOptionsBase): Promise<Models.SnapshotGetResponse>;\n  /**\n   * @param snapshotId Id referencing a particular snapshot.\n   * @param callback The callback\n   */\n  get(snapshotId: string, callback: msRest.ServiceCallback<Models.Snapshot>): void;\n  /**\n   * @param snapshotId Id referencing a particular snapshot.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  get(snapshotId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Snapshot>): void;\n  get(snapshotId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Snapshot>, callback?: msRest.ServiceCallback<Models.Snapshot>): Promise<Models.SnapshotGetResponse> {\n    return this.client.sendOperationRequest(\n      {\n        snapshotId,\n        options\n      },\n      getOperationSpec,\n      callback) as Promise<Models.SnapshotGetResponse>;\n  }\n\n  /**\n   * Update the information of a snapshot. Only the source subscription who took the snapshot can\n   * update the snapshot.\n   * @param snapshotId Id referencing a particular snapshot.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  update(snapshotId: string, options?: Models.SnapshotUpdateOptionalParams): Promise<msRest.RestResponse>;\n  /**\n   * @param snapshotId Id referencing a particular snapshot.\n   * @param callback The callback\n   */\n  update(snapshotId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param snapshotId Id referencing a particular snapshot.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  update(snapshotId: string, options: Models.SnapshotUpdateOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  update(snapshotId: string, options?: Models.SnapshotUpdateOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        snapshotId,\n        options\n      },\n      updateOperationSpec,\n      callback);\n  }\n\n  /**\n   * Delete an existing snapshot according to the snapshotId. All object data and information in the\n   * snapshot will also be deleted. Only the source subscription who took the snapshot can delete the\n   * snapshot. If the user does not delete a snapshot with this API, the snapshot will still be\n   * automatically deleted in 48 hours after creation.\n   * @param snapshotId Id referencing a particular snapshot.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  deleteMethod(snapshotId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;\n  /**\n   * @param snapshotId Id referencing a particular snapshot.\n   * @param callback The callback\n   */\n  deleteMethod(snapshotId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param snapshotId Id referencing a particular snapshot.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteMethod(snapshotId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteMethod(snapshotId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        snapshotId,\n        options\n      },\n      deleteMethodOperationSpec,\n      callback);\n  }\n\n  /**\n   * Submit an operation to apply a snapshot to current subscription. For each snapshot, only\n   * subscriptions included in the applyScope of Snapshot - Take can apply it.<br />\n   * The snapshot interfaces are for users to backup and restore their face data from one face\n   * subscription to another, inside same region or across regions. The workflow contains two phases,\n   * user first calls Snapshot - Take to create a copy of the source object and store it as a\n   * snapshot, then calls Snapshot - Apply to paste the snapshot to target subscription. The\n   * snapshots are stored in a centralized location (per Azure instance), so that they can be applied\n   * cross accounts and regions.<br />\n   * Applying snapshot is an asynchronous operation. An operation id can be obtained from the\n   * \"Operation-Location\" field in response header, to be used in OperationStatus - Get for tracking\n   * the progress of applying the snapshot. The target object id will be included in the\n   * \"resourceLocation\" field in OperationStatus - Get response when the operation status is\n   * \"succeeded\".<br />\n   * Snapshot applying time depends on the number of person and face entries in the snapshot object.\n   * It could be in seconds, or up to 1 hour for 1,000,000 persons with multiple faces.<br />\n   * Snapshots will be automatically expired and cleaned in 48 hours after it is created by Snapshot\n   * - Take. So the target subscription is required to apply the snapshot in 48 hours since its\n   * creation.<br />\n   * Applying a snapshot will not block any other operations against the target object, however it is\n   * not recommended because the correctness cannot be guaranteed during snapshot applying. After\n   * snapshot applying is completed, all operations towards the target object can work as normal.\n   * Snapshot also includes the training results of the source object, which means target\n   * subscription the snapshot applied to does not need re-train the target object before calling\n   * Identify/FindSimilar.<br />\n   * One snapshot can be applied multiple times in parallel, while currently only CreateNew apply\n   * mode is supported, which means the apply operation will fail if target subscription already\n   * contains an object of same type and using the same objectId. Users can specify the \"objectId\" in\n   * request body to avoid such conflicts.<br />\n   * * Free-tier subscription quota: 100 apply operations per month.\n   * * S0-tier subscription quota: 100 apply operations per day.\n   * @param snapshotId Id referencing a particular snapshot.\n   * @param objectId User specified target object id to be created from the snapshot.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.SnapshotApplyResponse>\n   */\n  apply(snapshotId: string, objectId: string, options?: Models.SnapshotApplyOptionalParams): Promise<Models.SnapshotApplyResponse>;\n  /**\n   * @param snapshotId Id referencing a particular snapshot.\n   * @param objectId User specified target object id to be created from the snapshot.\n   * @param callback The callback\n   */\n  apply(snapshotId: string, objectId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param snapshotId Id referencing a particular snapshot.\n   * @param objectId User specified target object id to be created from the snapshot.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  apply(snapshotId: string, objectId: string, options: Models.SnapshotApplyOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  apply(snapshotId: string, objectId: string, options?: Models.SnapshotApplyOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.SnapshotApplyResponse> {\n    return this.client.sendOperationRequest(\n      {\n        snapshotId,\n        objectId,\n        options\n      },\n      applyOperationSpec,\n      callback) as Promise<Models.SnapshotApplyResponse>;\n  }\n\n  /**\n   * Retrieve the status of a take/apply snapshot operation.\n   * @param operationId Id referencing a particular take/apply snapshot operation.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.SnapshotGetOperationStatusResponse>\n   */\n  getOperationStatus(operationId: string, options?: msRest.RequestOptionsBase): Promise<Models.SnapshotGetOperationStatusResponse>;\n  /**\n   * @param operationId Id referencing a particular take/apply snapshot operation.\n   * @param callback The callback\n   */\n  getOperationStatus(operationId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;\n  /**\n   * @param operationId Id referencing a particular take/apply snapshot operation.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getOperationStatus(operationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;\n  getOperationStatus(operationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.SnapshotGetOperationStatusResponse> {\n    return this.client.sendOperationRequest(\n      {\n        operationId,\n        options\n      },\n      getOperationStatusOperationSpec,\n      callback) as Promise<Models.SnapshotGetOperationStatusResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new msRest.Serializer(Mappers);\nconst takeOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"snapshots\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  requestBody: {\n    parameterPath: {\n      type: \"type\",\n      objectId: \"objectId\",\n      applyScope: \"applyScope\",\n      userData: [\n        \"options\",\n        \"userData\"\n      ]\n    },\n    mapper: {\n      ...Mappers.TakeSnapshotRequest,\n      required: true\n    }\n  },\n  responses: {\n    202: {\n      headersMapper: Mappers.SnapshotTakeHeaders\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst listOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"snapshots\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.type,\n    Parameters.applyScope\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Snapshot\"\n            }\n          }\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst getOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"snapshots/{snapshotId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.snapshotId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.Snapshot\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst updateOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"snapshots/{snapshotId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.snapshotId\n  ],\n  requestBody: {\n    parameterPath: {\n      applyScope: [\n        \"options\",\n        \"applyScope\"\n      ],\n      userData: [\n        \"options\",\n        \"userData\"\n      ]\n    },\n    mapper: {\n      ...Mappers.UpdateSnapshotRequest,\n      required: true\n    }\n  },\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst deleteMethodOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"snapshots/{snapshotId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.snapshotId\n  ],\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst applyOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"snapshots/{snapshotId}/apply\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.snapshotId\n  ],\n  requestBody: {\n    parameterPath: {\n      objectId: \"objectId\",\n      mode: [\n        \"options\",\n        \"mode\"\n      ]\n    },\n    mapper: {\n      ...Mappers.ApplySnapshotRequest,\n      required: true\n    }\n  },\n  responses: {\n    202: {\n      headersMapper: Mappers.SnapshotApplyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n\nconst getOperationStatusOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"operations/{operationId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.operationId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.OperationStatus\n    },\n    default: {\n      bodyMapper: Mappers.APIError\n    }\n  },\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\nconst packageName = \"@azure/cognitiveservices-face\";\nconst packageVersion = \"5.0.0\";\n\nexport class FaceClientContext extends msRest.ServiceClient {\n  endpoint: string;\n  credentials: msRest.ServiceClientCredentials;\n\n  /**\n   * Initializes a new instance of the FaceClientContext class.\n   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:\n   * https://westus.api.cognitive.microsoft.com).\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param [options] The parameter options\n   */\n  constructor(credentials: msRest.ServiceClientCredentials, endpoint: string, options?: msRest.ServiceClientOptions) {\n    if (endpoint == undefined) {\n      throw new Error(\"'endpoint' cannot be null.\");\n    }\n    if (credentials == undefined) {\n      throw new Error(\"'credentials' cannot be null.\");\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    if (!options.userAgent) {\n      const defaultUserAgent = msRest.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(credentials, options);\n\n    this.baseUri = \"{Endpoint}/face/v1.0\";\n    this.requestContentType = \"application/json; charset=utf-8\";\n    this.endpoint = endpoint;\n    this.credentials = credentials;\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"./models\";\nimport * as Mappers from \"./models/mappers\";\nimport * as operations from \"./operations\";\nimport { FaceClientContext } from \"./faceClientContext\";\n\nclass FaceClient extends FaceClientContext {\n  // Operation groups\n  face: operations.Face;\n  personGroupPerson: operations.PersonGroupPerson;\n  personGroup: operations.PersonGroupOperations;\n  faceList: operations.FaceListOperations;\n  largePersonGroupPerson: operations.LargePersonGroupPerson;\n  largePersonGroup: operations.LargePersonGroupOperations;\n  largeFaceList: operations.LargeFaceListOperations;\n  snapshot: operations.SnapshotOperations;\n\n  /**\n   * Initializes a new instance of the FaceClient class.\n   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:\n   * https://westus.api.cognitive.microsoft.com).\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param [options] The parameter options\n   */\n  constructor(credentials: msRest.ServiceClientCredentials, endpoint: string, options?: msRest.ServiceClientOptions) {\n    super(credentials, endpoint, options);\n    this.face = new operations.Face(this);\n    this.personGroupPerson = new operations.PersonGroupPerson(this);\n    this.personGroup = new operations.PersonGroupOperations(this);\n    this.faceList = new operations.FaceListOperations(this);\n    this.largePersonGroupPerson = new operations.LargePersonGroupPerson(this);\n    this.largePersonGroup = new operations.LargePersonGroupOperations(this);\n    this.largeFaceList = new operations.LargeFaceListOperations(this);\n    this.snapshot = new operations.SnapshotOperations(this);\n  }\n}\n\n// Operation Specifications\n\nexport {\n  FaceClient,\n  FaceClientContext,\n  Models as FaceModels,\n  Mappers as FaceMappers\n};\nexport * from \"./operations\";\n"],"names":["msRest.QueryCollectionFormat","msRest.Serializer","Parameters.endpoint","Mappers.FindSimilarRequest","Mappers.APIError","Mappers.GroupRequest","Mappers.GroupResult","Mappers.IdentifyRequest","Mappers.VerifyFaceToFaceRequest","Mappers.VerifyResult","Parameters.returnFaceId","Parameters.returnFaceLandmarks","Parameters.returnFaceAttributes","Parameters.recognitionModel","Parameters.returnRecognitionModel","Parameters.detectionModel","Parameters.faceIdTimeToLive","Mappers.ImageUrl","Mappers.VerifyFaceToPersonRequest","serializer","Mappers","Parameters.personGroupId","Mappers.NameAndUserDataContract","Mappers.Person","Parameters.start0","Parameters.top0","Parameters.personId","Parameters.persistedFaceId","Mappers.PersistedFace","Mappers.UpdateFaceRequest","Parameters.userData","Parameters.targetFace","createOperationSpec","deleteMethodOperationSpec","getOperationSpec","updateOperationSpec","listOperationSpec","Mappers.MetaDataContract","Mappers.PersonGroup","Mappers.TrainingStatus","Parameters.start1","Parameters.top1","deleteFaceOperationSpec","addFaceFromUrlOperationSpec","addFaceFromStreamOperationSpec","Parameters.faceListId","Mappers.FaceList","getFaceOperationSpec","updateFaceOperationSpec","Parameters.largePersonGroupId","getTrainingStatusOperationSpec","trainOperationSpec","Mappers.LargePersonGroup","Parameters.largeFaceListId","Mappers.LargeFaceList","Mappers.TakeSnapshotRequest","Mappers.SnapshotTakeHeaders","Parameters.type","Parameters.applyScope","Parameters.snapshotId","Mappers.Snapshot","Mappers.UpdateSnapshotRequest","Mappers.ApplySnapshotRequest","Mappers.SnapshotApplyHeaders","Parameters.operationId","Mappers.OperationStatus","msRest.getDefaultUserAgentValue","msRest.ServiceClient","operations.Face","operations.PersonGroupPerson","operations.PersonGroupOperations","operations.FaceListOperations","operations.LargePersonGroupPerson","operations.LargePersonGroupOperations","operations.LargeFaceListOperations","operations.SnapshotOperations"],"mappings":"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"}