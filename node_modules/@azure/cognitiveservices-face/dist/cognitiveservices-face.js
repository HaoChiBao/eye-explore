/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-js'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.CognitiveservicesFace = {}), global.msRest));
}(this, (function (exports, msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var ErrorModel = {
        serializedName: "Error",
        type: {
            name: "Composite",
            className: "ErrorModel",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var APIError = {
        serializedName: "APIError",
        type: {
            name: "Composite",
            className: "APIError",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorModel"
                    }
                }
            }
        }
    };
    var FaceRectangle = {
        serializedName: "FaceRectangle",
        type: {
            name: "Composite",
            className: "FaceRectangle",
            modelProperties: {
                width: {
                    required: true,
                    serializedName: "width",
                    type: {
                        name: "Number"
                    }
                },
                height: {
                    required: true,
                    serializedName: "height",
                    type: {
                        name: "Number"
                    }
                },
                left: {
                    required: true,
                    serializedName: "left",
                    type: {
                        name: "Number"
                    }
                },
                top: {
                    required: true,
                    serializedName: "top",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Coordinate = {
        serializedName: "Coordinate",
        type: {
            name: "Composite",
            className: "Coordinate",
            modelProperties: {
                x: {
                    required: true,
                    serializedName: "x",
                    type: {
                        name: "Number"
                    }
                },
                y: {
                    required: true,
                    serializedName: "y",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var FaceLandmarks = {
        serializedName: "FaceLandmarks",
        type: {
            name: "Composite",
            className: "FaceLandmarks",
            modelProperties: {
                pupilLeft: {
                    serializedName: "pupilLeft",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                pupilRight: {
                    serializedName: "pupilRight",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                noseTip: {
                    serializedName: "noseTip",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                mouthLeft: {
                    serializedName: "mouthLeft",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                mouthRight: {
                    serializedName: "mouthRight",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                eyebrowLeftOuter: {
                    serializedName: "eyebrowLeftOuter",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                eyebrowLeftInner: {
                    serializedName: "eyebrowLeftInner",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                eyeLeftOuter: {
                    serializedName: "eyeLeftOuter",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                eyeLeftTop: {
                    serializedName: "eyeLeftTop",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                eyeLeftBottom: {
                    serializedName: "eyeLeftBottom",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                eyeLeftInner: {
                    serializedName: "eyeLeftInner",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                eyebrowRightInner: {
                    serializedName: "eyebrowRightInner",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                eyebrowRightOuter: {
                    serializedName: "eyebrowRightOuter",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                eyeRightInner: {
                    serializedName: "eyeRightInner",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                eyeRightTop: {
                    serializedName: "eyeRightTop",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                eyeRightBottom: {
                    serializedName: "eyeRightBottom",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                eyeRightOuter: {
                    serializedName: "eyeRightOuter",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                noseRootLeft: {
                    serializedName: "noseRootLeft",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                noseRootRight: {
                    serializedName: "noseRootRight",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                noseLeftAlarTop: {
                    serializedName: "noseLeftAlarTop",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                noseRightAlarTop: {
                    serializedName: "noseRightAlarTop",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                noseLeftAlarOutTip: {
                    serializedName: "noseLeftAlarOutTip",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                noseRightAlarOutTip: {
                    serializedName: "noseRightAlarOutTip",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                upperLipTop: {
                    serializedName: "upperLipTop",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                upperLipBottom: {
                    serializedName: "upperLipBottom",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                underLipTop: {
                    serializedName: "underLipTop",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                underLipBottom: {
                    serializedName: "underLipBottom",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                }
            }
        }
    };
    var FacialHair = {
        serializedName: "FacialHair",
        type: {
            name: "Composite",
            className: "FacialHair",
            modelProperties: {
                moustache: {
                    nullable: false,
                    serializedName: "moustache",
                    type: {
                        name: "Number"
                    }
                },
                beard: {
                    nullable: false,
                    serializedName: "beard",
                    type: {
                        name: "Number"
                    }
                },
                sideburns: {
                    nullable: false,
                    serializedName: "sideburns",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var HeadPose = {
        serializedName: "HeadPose",
        type: {
            name: "Composite",
            className: "HeadPose",
            modelProperties: {
                roll: {
                    nullable: false,
                    serializedName: "roll",
                    type: {
                        name: "Number"
                    }
                },
                yaw: {
                    nullable: false,
                    serializedName: "yaw",
                    type: {
                        name: "Number"
                    }
                },
                pitch: {
                    nullable: false,
                    serializedName: "pitch",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Emotion = {
        serializedName: "Emotion",
        type: {
            name: "Composite",
            className: "Emotion",
            modelProperties: {
                anger: {
                    nullable: false,
                    serializedName: "anger",
                    type: {
                        name: "Number"
                    }
                },
                contempt: {
                    nullable: false,
                    serializedName: "contempt",
                    type: {
                        name: "Number"
                    }
                },
                disgust: {
                    nullable: false,
                    serializedName: "disgust",
                    type: {
                        name: "Number"
                    }
                },
                fear: {
                    nullable: false,
                    serializedName: "fear",
                    type: {
                        name: "Number"
                    }
                },
                happiness: {
                    nullable: false,
                    serializedName: "happiness",
                    type: {
                        name: "Number"
                    }
                },
                neutral: {
                    nullable: false,
                    serializedName: "neutral",
                    type: {
                        name: "Number"
                    }
                },
                sadness: {
                    nullable: false,
                    serializedName: "sadness",
                    type: {
                        name: "Number"
                    }
                },
                surprise: {
                    nullable: false,
                    serializedName: "surprise",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var HairColor = {
        serializedName: "HairColor",
        type: {
            name: "Composite",
            className: "HairColor",
            modelProperties: {
                color: {
                    nullable: false,
                    serializedName: "color",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "unknown",
                            "white",
                            "gray",
                            "blond",
                            "brown",
                            "red",
                            "black",
                            "other"
                        ]
                    }
                },
                confidence: {
                    nullable: false,
                    serializedName: "confidence",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Hair = {
        serializedName: "Hair",
        type: {
            name: "Composite",
            className: "Hair",
            modelProperties: {
                bald: {
                    nullable: false,
                    serializedName: "bald",
                    type: {
                        name: "Number"
                    }
                },
                invisible: {
                    nullable: false,
                    serializedName: "invisible",
                    type: {
                        name: "Boolean"
                    }
                },
                hairColor: {
                    serializedName: "hairColor",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HairColor"
                            }
                        }
                    }
                }
            }
        }
    };
    var Makeup = {
        serializedName: "Makeup",
        type: {
            name: "Composite",
            className: "Makeup",
            modelProperties: {
                eyeMakeup: {
                    nullable: false,
                    serializedName: "eyeMakeup",
                    type: {
                        name: "Boolean"
                    }
                },
                lipMakeup: {
                    nullable: false,
                    serializedName: "lipMakeup",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var Occlusion = {
        serializedName: "Occlusion",
        type: {
            name: "Composite",
            className: "Occlusion",
            modelProperties: {
                foreheadOccluded: {
                    nullable: false,
                    serializedName: "foreheadOccluded",
                    type: {
                        name: "Boolean"
                    }
                },
                eyeOccluded: {
                    nullable: false,
                    serializedName: "eyeOccluded",
                    type: {
                        name: "Boolean"
                    }
                },
                mouthOccluded: {
                    nullable: false,
                    serializedName: "mouthOccluded",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var Accessory = {
        serializedName: "Accessory",
        type: {
            name: "Composite",
            className: "Accessory",
            modelProperties: {
                type: {
                    nullable: false,
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "headWear",
                            "glasses",
                            "mask"
                        ]
                    }
                },
                confidence: {
                    nullable: false,
                    serializedName: "confidence",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Blur = {
        serializedName: "Blur",
        type: {
            name: "Composite",
            className: "Blur",
            modelProperties: {
                blurLevel: {
                    nullable: false,
                    serializedName: "blurLevel",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Low",
                            "Medium",
                            "High"
                        ]
                    }
                },
                value: {
                    nullable: false,
                    serializedName: "value",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Exposure = {
        serializedName: "Exposure",
        type: {
            name: "Composite",
            className: "Exposure",
            modelProperties: {
                exposureLevel: {
                    nullable: false,
                    serializedName: "exposureLevel",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "UnderExposure",
                            "GoodExposure",
                            "OverExposure"
                        ]
                    }
                },
                value: {
                    nullable: false,
                    serializedName: "value",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Noise = {
        serializedName: "Noise",
        type: {
            name: "Composite",
            className: "Noise",
            modelProperties: {
                noiseLevel: {
                    nullable: false,
                    serializedName: "noiseLevel",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Low",
                            "Medium",
                            "High"
                        ]
                    }
                },
                value: {
                    nullable: false,
                    serializedName: "value",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Mask = {
        serializedName: "Mask",
        type: {
            name: "Composite",
            className: "Mask",
            modelProperties: {
                type: {
                    nullable: false,
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "noMask",
                            "faceMask",
                            "otherMaskOrOcclusion",
                            "uncertain"
                        ]
                    }
                },
                noseAndMouthCovered: {
                    nullable: false,
                    serializedName: "noseAndMouthCovered",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var FaceAttributes = {
        serializedName: "FaceAttributes",
        type: {
            name: "Composite",
            className: "FaceAttributes",
            modelProperties: {
                age: {
                    serializedName: "age",
                    type: {
                        name: "Number"
                    }
                },
                gender: {
                    serializedName: "gender",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "male",
                            "female"
                        ]
                    }
                },
                smile: {
                    serializedName: "smile",
                    type: {
                        name: "Number"
                    }
                },
                facialHair: {
                    serializedName: "facialHair",
                    type: {
                        name: "Composite",
                        className: "FacialHair"
                    }
                },
                glasses: {
                    serializedName: "glasses",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "noGlasses",
                            "readingGlasses",
                            "sunglasses",
                            "swimmingGoggles"
                        ]
                    }
                },
                headPose: {
                    serializedName: "headPose",
                    type: {
                        name: "Composite",
                        className: "HeadPose"
                    }
                },
                emotion: {
                    serializedName: "emotion",
                    type: {
                        name: "Composite",
                        className: "Emotion"
                    }
                },
                hair: {
                    serializedName: "hair",
                    type: {
                        name: "Composite",
                        className: "Hair"
                    }
                },
                makeup: {
                    serializedName: "makeup",
                    type: {
                        name: "Composite",
                        className: "Makeup"
                    }
                },
                occlusion: {
                    serializedName: "occlusion",
                    type: {
                        name: "Composite",
                        className: "Occlusion"
                    }
                },
                accessories: {
                    serializedName: "accessories",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Accessory"
                            }
                        }
                    }
                },
                blur: {
                    serializedName: "blur",
                    type: {
                        name: "Composite",
                        className: "Blur"
                    }
                },
                exposure: {
                    serializedName: "exposure",
                    type: {
                        name: "Composite",
                        className: "Exposure"
                    }
                },
                noise: {
                    serializedName: "noise",
                    type: {
                        name: "Composite",
                        className: "Noise"
                    }
                },
                mask: {
                    serializedName: "mask",
                    type: {
                        name: "Composite",
                        className: "Mask"
                    }
                },
                qualityForRecognition: {
                    serializedName: "qualityForRecognition",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Low",
                            "Medium",
                            "High"
                        ]
                    }
                }
            }
        }
    };
    var DetectedFace = {
        serializedName: "DetectedFace",
        type: {
            name: "Composite",
            className: "DetectedFace",
            modelProperties: {
                faceId: {
                    serializedName: "faceId",
                    type: {
                        name: "Uuid"
                    }
                },
                recognitionModel: {
                    nullable: false,
                    serializedName: "recognitionModel",
                    defaultValue: 'recognition_01',
                    type: {
                        name: "String"
                    }
                },
                faceRectangle: {
                    required: true,
                    serializedName: "faceRectangle",
                    type: {
                        name: "Composite",
                        className: "FaceRectangle"
                    }
                },
                faceLandmarks: {
                    serializedName: "faceLandmarks",
                    type: {
                        name: "Composite",
                        className: "FaceLandmarks"
                    }
                },
                faceAttributes: {
                    serializedName: "faceAttributes",
                    type: {
                        name: "Composite",
                        className: "FaceAttributes"
                    }
                }
            }
        }
    };
    var FindSimilarRequest = {
        serializedName: "FindSimilarRequest",
        type: {
            name: "Composite",
            className: "FindSimilarRequest",
            modelProperties: {
                faceId: {
                    required: true,
                    serializedName: "faceId",
                    type: {
                        name: "Uuid"
                    }
                },
                faceListId: {
                    serializedName: "faceListId",
                    constraints: {
                        MaxLength: 64,
                        Pattern: /^[a-z0-9-_]+$/
                    },
                    type: {
                        name: "String"
                    }
                },
                largeFaceListId: {
                    serializedName: "largeFaceListId",
                    constraints: {
                        MaxLength: 64,
                        Pattern: /^[a-z0-9-_]+$/
                    },
                    type: {
                        name: "String"
                    }
                },
                faceIds: {
                    serializedName: "faceIds",
                    constraints: {
                        MaxItems: 1000
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Uuid"
                            }
                        }
                    }
                },
                maxNumOfCandidatesReturned: {
                    serializedName: "maxNumOfCandidatesReturned",
                    defaultValue: 20,
                    constraints: {
                        InclusiveMaximum: 1000,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                mode: {
                    nullable: false,
                    serializedName: "mode",
                    defaultValue: 'matchPerson',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "matchPerson",
                            "matchFace"
                        ]
                    }
                }
            }
        }
    };
    var SimilarFace = {
        serializedName: "SimilarFace",
        type: {
            name: "Composite",
            className: "SimilarFace",
            modelProperties: {
                faceId: {
                    serializedName: "faceId",
                    type: {
                        name: "Uuid"
                    }
                },
                persistedFaceId: {
                    serializedName: "persistedFaceId",
                    type: {
                        name: "Uuid"
                    }
                },
                confidence: {
                    required: true,
                    serializedName: "confidence",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var GroupRequest = {
        serializedName: "GroupRequest",
        type: {
            name: "Composite",
            className: "GroupRequest",
            modelProperties: {
                faceIds: {
                    required: true,
                    serializedName: "faceIds",
                    constraints: {
                        MaxItems: 1000
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Uuid"
                            }
                        }
                    }
                }
            }
        }
    };
    var GroupResult = {
        serializedName: "GroupResult",
        type: {
            name: "Composite",
            className: "GroupResult",
            modelProperties: {
                groups: {
                    required: true,
                    serializedName: "groups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "Uuid"
                                    }
                                }
                            }
                        }
                    }
                },
                messyGroup: {
                    serializedName: "messyGroup",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Uuid"
                            }
                        }
                    }
                }
            }
        }
    };
    var IdentifyRequest = {
        serializedName: "IdentifyRequest",
        type: {
            name: "Composite",
            className: "IdentifyRequest",
            modelProperties: {
                faceIds: {
                    required: true,
                    serializedName: "faceIds",
                    constraints: {
                        MaxItems: 10
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Uuid"
                            }
                        }
                    }
                },
                personGroupId: {
                    serializedName: "personGroupId",
                    constraints: {
                        MaxLength: 64,
                        Pattern: /^[a-z0-9-_]+$/
                    },
                    type: {
                        name: "String"
                    }
                },
                largePersonGroupId: {
                    serializedName: "largePersonGroupId",
                    constraints: {
                        MaxLength: 64,
                        Pattern: /^[a-z0-9-_]+$/
                    },
                    type: {
                        name: "String"
                    }
                },
                maxNumOfCandidatesReturned: {
                    serializedName: "maxNumOfCandidatesReturned",
                    defaultValue: 1,
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                confidenceThreshold: {
                    serializedName: "confidenceThreshold",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var IdentifyCandidate = {
        serializedName: "IdentifyCandidate",
        type: {
            name: "Composite",
            className: "IdentifyCandidate",
            modelProperties: {
                personId: {
                    required: true,
                    serializedName: "personId",
                    type: {
                        name: "Uuid"
                    }
                },
                confidence: {
                    required: true,
                    serializedName: "confidence",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var IdentifyResult = {
        serializedName: "IdentifyResult",
        type: {
            name: "Composite",
            className: "IdentifyResult",
            modelProperties: {
                faceId: {
                    required: true,
                    serializedName: "faceId",
                    type: {
                        name: "Uuid"
                    }
                },
                candidates: {
                    required: true,
                    serializedName: "candidates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IdentifyCandidate"
                            }
                        }
                    }
                }
            }
        }
    };
    var VerifyFaceToPersonRequest = {
        serializedName: "VerifyFaceToPersonRequest",
        type: {
            name: "Composite",
            className: "VerifyFaceToPersonRequest",
            modelProperties: {
                faceId: {
                    required: true,
                    serializedName: "faceId",
                    type: {
                        name: "Uuid"
                    }
                },
                personGroupId: {
                    serializedName: "personGroupId",
                    constraints: {
                        MaxLength: 64,
                        Pattern: /^[a-z0-9-_]+$/
                    },
                    type: {
                        name: "String"
                    }
                },
                largePersonGroupId: {
                    serializedName: "largePersonGroupId",
                    constraints: {
                        MaxLength: 64,
                        Pattern: /^[a-z0-9-_]+$/
                    },
                    type: {
                        name: "String"
                    }
                },
                personId: {
                    required: true,
                    serializedName: "personId",
                    type: {
                        name: "Uuid"
                    }
                }
            }
        }
    };
    var VerifyFaceToFaceRequest = {
        serializedName: "VerifyFaceToFaceRequest",
        type: {
            name: "Composite",
            className: "VerifyFaceToFaceRequest",
            modelProperties: {
                faceId1: {
                    required: true,
                    serializedName: "faceId1",
                    type: {
                        name: "Uuid"
                    }
                },
                faceId2: {
                    required: true,
                    serializedName: "faceId2",
                    type: {
                        name: "Uuid"
                    }
                }
            }
        }
    };
    var VerifyResult = {
        serializedName: "VerifyResult",
        type: {
            name: "Composite",
            className: "VerifyResult",
            modelProperties: {
                isIdentical: {
                    required: true,
                    serializedName: "isIdentical",
                    type: {
                        name: "Boolean"
                    }
                },
                confidence: {
                    required: true,
                    serializedName: "confidence",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var PersistedFace = {
        serializedName: "PersistedFace",
        type: {
            name: "Composite",
            className: "PersistedFace",
            modelProperties: {
                persistedFaceId: {
                    required: true,
                    serializedName: "persistedFaceId",
                    type: {
                        name: "Uuid"
                    }
                },
                userData: {
                    serializedName: "userData",
                    constraints: {
                        MaxLength: 1024
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NonNullableNameAndNullableUserDataContract = {
        serializedName: "NonNullableNameAndNullableUserDataContract",
        type: {
            name: "Composite",
            className: "NonNullableNameAndNullableUserDataContract",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    constraints: {
                        MaxLength: 128,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                userData: {
                    serializedName: "userData",
                    constraints: {
                        MaxLength: 16384
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MetaDataContract = {
        serializedName: "MetaDataContract",
        type: {
            name: "Composite",
            className: "MetaDataContract",
            modelProperties: __assign(__assign({}, NonNullableNameAndNullableUserDataContract.type.modelProperties), { recognitionModel: {
                    nullable: false,
                    serializedName: "recognitionModel",
                    defaultValue: 'recognition_01',
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var FaceList = {
        serializedName: "FaceList",
        type: {
            name: "Composite",
            className: "FaceList",
            modelProperties: __assign(__assign({}, MetaDataContract.type.modelProperties), { faceListId: {
                    required: true,
                    serializedName: "faceListId",
                    constraints: {
                        MaxLength: 64,
                        Pattern: /^[a-z0-9-_]+$/
                    },
                    type: {
                        name: "String"
                    }
                }, persistedFaces: {
                    serializedName: "persistedFaces",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PersistedFace"
                            }
                        }
                    }
                } })
        }
    };
    var PersonGroup = {
        serializedName: "PersonGroup",
        type: {
            name: "Composite",
            className: "PersonGroup",
            modelProperties: __assign(__assign({}, MetaDataContract.type.modelProperties), { personGroupId: {
                    required: true,
                    serializedName: "personGroupId",
                    constraints: {
                        MaxLength: 64,
                        Pattern: /^[a-z0-9-_]+$/
                    },
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var NameAndUserDataContract = {
        serializedName: "NameAndUserDataContract",
        type: {
            name: "Composite",
            className: "NameAndUserDataContract",
            modelProperties: {
                name: {
                    serializedName: "name",
                    constraints: {
                        MaxLength: 128
                    },
                    type: {
                        name: "String"
                    }
                },
                userData: {
                    serializedName: "userData",
                    constraints: {
                        MaxLength: 16384
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Person = {
        serializedName: "Person",
        type: {
            name: "Composite",
            className: "Person",
            modelProperties: __assign(__assign({}, NameAndUserDataContract.type.modelProperties), { personId: {
                    required: true,
                    serializedName: "personId",
                    type: {
                        name: "Uuid"
                    }
                }, persistedFaceIds: {
                    serializedName: "persistedFaceIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Uuid"
                            }
                        }
                    }
                } })
        }
    };
    var LargeFaceList = {
        serializedName: "LargeFaceList",
        type: {
            name: "Composite",
            className: "LargeFaceList",
            modelProperties: __assign(__assign({}, MetaDataContract.type.modelProperties), { largeFaceListId: {
                    required: true,
                    serializedName: "largeFaceListId",
                    constraints: {
                        MaxLength: 64,
                        Pattern: /^[a-z0-9-_]+$/
                    },
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var LargePersonGroup = {
        serializedName: "LargePersonGroup",
        type: {
            name: "Composite",
            className: "LargePersonGroup",
            modelProperties: __assign(__assign({}, MetaDataContract.type.modelProperties), { largePersonGroupId: {
                    required: true,
                    serializedName: "largePersonGroupId",
                    constraints: {
                        MaxLength: 64,
                        Pattern: /^[a-z0-9-_]+$/
                    },
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var UpdateFaceRequest = {
        serializedName: "UpdateFaceRequest",
        type: {
            name: "Composite",
            className: "UpdateFaceRequest",
            modelProperties: {
                userData: {
                    serializedName: "userData",
                    constraints: {
                        MaxLength: 1024
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrainingStatus = {
        serializedName: "TrainingStatus",
        type: {
            name: "Composite",
            className: "TrainingStatus",
            modelProperties: {
                status: {
                    required: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "nonstarted",
                            "running",
                            "succeeded",
                            "failed"
                        ]
                    }
                },
                created: {
                    required: true,
                    serializedName: "createdDateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastAction: {
                    serializedName: "lastActionDateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastSuccessfulTraining: {
                    serializedName: "lastSuccessfulTrainingDateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplySnapshotRequest = {
        serializedName: "ApplySnapshotRequest",
        type: {
            name: "Composite",
            className: "ApplySnapshotRequest",
            modelProperties: {
                objectId: {
                    required: true,
                    serializedName: "objectId",
                    constraints: {
                        MaxLength: 64,
                        Pattern: /^[a-z0-9-_]+$/
                    },
                    type: {
                        name: "String"
                    }
                },
                mode: {
                    nullable: false,
                    serializedName: "mode",
                    defaultValue: 'CreateNew',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "CreateNew"
                        ]
                    }
                }
            }
        }
    };
    var Snapshot = {
        serializedName: "Snapshot",
        type: {
            name: "Composite",
            className: "Snapshot",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                account: {
                    required: true,
                    serializedName: "account",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "FaceList",
                            "LargeFaceList",
                            "LargePersonGroup",
                            "PersonGroup"
                        ]
                    }
                },
                applyScope: {
                    required: true,
                    serializedName: "applyScope",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Uuid"
                            }
                        }
                    }
                },
                userData: {
                    serializedName: "userData",
                    constraints: {
                        MaxLength: 16384
                    },
                    type: {
                        name: "String"
                    }
                },
                createdTime: {
                    required: true,
                    serializedName: "createdTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastUpdateTime: {
                    required: true,
                    serializedName: "lastUpdateTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var TakeSnapshotRequest = {
        serializedName: "TakeSnapshotRequest",
        type: {
            name: "Composite",
            className: "TakeSnapshotRequest",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "FaceList",
                            "LargeFaceList",
                            "LargePersonGroup",
                            "PersonGroup"
                        ]
                    }
                },
                objectId: {
                    required: true,
                    serializedName: "objectId",
                    constraints: {
                        MaxLength: 64,
                        Pattern: /^[a-z0-9-_]+$/
                    },
                    type: {
                        name: "String"
                    }
                },
                applyScope: {
                    required: true,
                    serializedName: "applyScope",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Uuid"
                            }
                        }
                    }
                },
                userData: {
                    serializedName: "userData",
                    constraints: {
                        MaxLength: 16384
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpdateSnapshotRequest = {
        serializedName: "UpdateSnapshotRequest",
        type: {
            name: "Composite",
            className: "UpdateSnapshotRequest",
            modelProperties: {
                applyScope: {
                    serializedName: "applyScope",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Uuid"
                            }
                        }
                    }
                },
                userData: {
                    serializedName: "userData",
                    constraints: {
                        MaxLength: 16384
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationStatus = {
        serializedName: "OperationStatus",
        type: {
            name: "Composite",
            className: "OperationStatus",
            modelProperties: {
                status: {
                    required: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "notstarted",
                            "running",
                            "succeeded",
                            "failed"
                        ]
                    }
                },
                createdTime: {
                    required: true,
                    serializedName: "createdTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastActionTime: {
                    serializedName: "lastActionTime",
                    type: {
                        name: "DateTime"
                    }
                },
                resourceLocation: {
                    serializedName: "resourceLocation",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImageUrl = {
        serializedName: "ImageUrl",
        type: {
            name: "Composite",
            className: "ImageUrl",
            modelProperties: {
                url: {
                    required: true,
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SnapshotTakeHeaders = {
        serializedName: "snapshot-take-headers",
        type: {
            name: "Composite",
            className: "SnapshotTakeHeaders",
            modelProperties: {
                operationLocation: {
                    serializedName: "operation-location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SnapshotApplyHeaders = {
        serializedName: "snapshot-apply-headers",
        type: {
            name: "Composite",
            className: "SnapshotApplyHeaders",
            modelProperties: {
                operationLocation: {
                    serializedName: "operation-location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ErrorModel: ErrorModel,
        APIError: APIError,
        FaceRectangle: FaceRectangle,
        Coordinate: Coordinate,
        FaceLandmarks: FaceLandmarks,
        FacialHair: FacialHair,
        HeadPose: HeadPose,
        Emotion: Emotion,
        HairColor: HairColor,
        Hair: Hair,
        Makeup: Makeup,
        Occlusion: Occlusion,
        Accessory: Accessory,
        Blur: Blur,
        Exposure: Exposure,
        Noise: Noise,
        Mask: Mask,
        FaceAttributes: FaceAttributes,
        DetectedFace: DetectedFace,
        FindSimilarRequest: FindSimilarRequest,
        SimilarFace: SimilarFace,
        GroupRequest: GroupRequest,
        GroupResult: GroupResult,
        IdentifyRequest: IdentifyRequest,
        IdentifyCandidate: IdentifyCandidate,
        IdentifyResult: IdentifyResult,
        VerifyFaceToPersonRequest: VerifyFaceToPersonRequest,
        VerifyFaceToFaceRequest: VerifyFaceToFaceRequest,
        VerifyResult: VerifyResult,
        PersistedFace: PersistedFace,
        NonNullableNameAndNullableUserDataContract: NonNullableNameAndNullableUserDataContract,
        MetaDataContract: MetaDataContract,
        FaceList: FaceList,
        PersonGroup: PersonGroup,
        NameAndUserDataContract: NameAndUserDataContract,
        Person: Person,
        LargeFaceList: LargeFaceList,
        LargePersonGroup: LargePersonGroup,
        UpdateFaceRequest: UpdateFaceRequest,
        TrainingStatus: TrainingStatus,
        ApplySnapshotRequest: ApplySnapshotRequest,
        Snapshot: Snapshot,
        TakeSnapshotRequest: TakeSnapshotRequest,
        UpdateSnapshotRequest: UpdateSnapshotRequest,
        OperationStatus: OperationStatus,
        ImageUrl: ImageUrl,
        SnapshotTakeHeaders: SnapshotTakeHeaders,
        SnapshotApplyHeaders: SnapshotApplyHeaders
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Accessory: Accessory,
        APIError: APIError,
        Blur: Blur,
        Coordinate: Coordinate,
        DetectedFace: DetectedFace,
        Emotion: Emotion,
        ErrorModel: ErrorModel,
        Exposure: Exposure,
        FaceAttributes: FaceAttributes,
        FaceLandmarks: FaceLandmarks,
        FaceRectangle: FaceRectangle,
        FacialHair: FacialHair,
        FindSimilarRequest: FindSimilarRequest,
        GroupRequest: GroupRequest,
        GroupResult: GroupResult,
        Hair: Hair,
        HairColor: HairColor,
        HeadPose: HeadPose,
        IdentifyCandidate: IdentifyCandidate,
        IdentifyRequest: IdentifyRequest,
        IdentifyResult: IdentifyResult,
        ImageUrl: ImageUrl,
        Makeup: Makeup,
        Mask: Mask,
        Noise: Noise,
        Occlusion: Occlusion,
        SimilarFace: SimilarFace,
        VerifyFaceToFaceRequest: VerifyFaceToFaceRequest,
        VerifyFaceToPersonRequest: VerifyFaceToPersonRequest,
        VerifyResult: VerifyResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var applyScope = {
        parameterPath: [
            "options",
            "applyScope"
        ],
        mapper: {
            serializedName: "applyScope",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Uuid"
                    }
                }
            }
        },
        collectionFormat: msRest.QueryCollectionFormat.Csv
    };
    var detectionModel = {
        parameterPath: [
            "options",
            "detectionModel"
        ],
        mapper: {
            serializedName: "detectionModel",
            defaultValue: 'detection_01',
            type: {
                name: "String"
            }
        }
    };
    var endpoint = {
        parameterPath: "endpoint",
        mapper: {
            required: true,
            serializedName: "Endpoint",
            defaultValue: '',
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var faceIdTimeToLive = {
        parameterPath: [
            "options",
            "faceIdTimeToLive"
        ],
        mapper: {
            serializedName: "faceIdTimeToLive",
            defaultValue: 86400,
            constraints: {
                InclusiveMaximum: 86400,
                InclusiveMinimum: 60
            },
            type: {
                name: "Number"
            }
        }
    };
    var faceListId = {
        parameterPath: "faceListId",
        mapper: {
            required: true,
            serializedName: "faceListId",
            constraints: {
                MaxLength: 64,
                Pattern: /^[a-z0-9-_]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var largeFaceListId = {
        parameterPath: "largeFaceListId",
        mapper: {
            required: true,
            serializedName: "largeFaceListId",
            constraints: {
                MaxLength: 64,
                Pattern: /^[a-z0-9-_]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var largePersonGroupId = {
        parameterPath: "largePersonGroupId",
        mapper: {
            required: true,
            serializedName: "largePersonGroupId",
            constraints: {
                MaxLength: 64,
                Pattern: /^[a-z0-9-_]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var operationId = {
        parameterPath: "operationId",
        mapper: {
            required: true,
            serializedName: "operationId",
            type: {
                name: "Uuid"
            }
        }
    };
    var persistedFaceId = {
        parameterPath: "persistedFaceId",
        mapper: {
            required: true,
            serializedName: "persistedFaceId",
            type: {
                name: "Uuid"
            }
        }
    };
    var personGroupId = {
        parameterPath: "personGroupId",
        mapper: {
            required: true,
            serializedName: "personGroupId",
            constraints: {
                MaxLength: 64,
                Pattern: /^[a-z0-9-_]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var personId = {
        parameterPath: "personId",
        mapper: {
            required: true,
            serializedName: "personId",
            type: {
                name: "Uuid"
            }
        }
    };
    var recognitionModel = {
        parameterPath: [
            "options",
            "recognitionModel"
        ],
        mapper: {
            serializedName: "recognitionModel",
            defaultValue: 'recognition_01',
            type: {
                name: "String"
            }
        }
    };
    var returnFaceAttributes = {
        parameterPath: [
            "options",
            "returnFaceAttributes"
        ],
        mapper: {
            serializedName: "returnFaceAttributes",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "age",
                            "gender",
                            "headPose",
                            "smile",
                            "facialHair",
                            "glasses",
                            "emotion",
                            "hair",
                            "makeup",
                            "occlusion",
                            "accessories",
                            "blur",
                            "exposure",
                            "noise",
                            "mask",
                            "qualityForRecognition"
                        ]
                    }
                }
            }
        },
        collectionFormat: msRest.QueryCollectionFormat.Csv
    };
    var returnFaceId = {
        parameterPath: [
            "options",
            "returnFaceId"
        ],
        mapper: {
            serializedName: "returnFaceId",
            defaultValue: true,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnFaceLandmarks = {
        parameterPath: [
            "options",
            "returnFaceLandmarks"
        ],
        mapper: {
            serializedName: "returnFaceLandmarks",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnRecognitionModel = {
        parameterPath: [
            "options",
            "returnRecognitionModel"
        ],
        mapper: {
            serializedName: "returnRecognitionModel",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var snapshotId = {
        parameterPath: "snapshotId",
        mapper: {
            required: true,
            serializedName: "snapshotId",
            type: {
                name: "Uuid"
            }
        }
    };
    var start0 = {
        parameterPath: [
            "options",
            "start"
        ],
        mapper: {
            serializedName: "start",
            type: {
                name: "String"
            }
        }
    };
    var start1 = {
        parameterPath: [
            "options",
            "start"
        ],
        mapper: {
            serializedName: "start",
            constraints: {
                MaxLength: 64
            },
            type: {
                name: "String"
            }
        }
    };
    var targetFace = {
        parameterPath: [
            "options",
            "targetFace"
        ],
        mapper: {
            serializedName: "targetFace",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Number"
                    }
                }
            }
        },
        collectionFormat: msRest.QueryCollectionFormat.Csv
    };
    var top0 = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "top",
            constraints: {
                InclusiveMaximum: 1000,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var top1 = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "top",
            defaultValue: 1000,
            constraints: {
                InclusiveMaximum: 1000,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var type = {
        parameterPath: [
            "options",
            "type"
        ],
        mapper: {
            serializedName: "type",
            type: {
                name: "Enum",
                allowedValues: [
                    "FaceList",
                    "LargeFaceList",
                    "LargePersonGroup",
                    "PersonGroup"
                ]
            }
        }
    };
    var userData = {
        parameterPath: [
            "options",
            "userData"
        ],
        mapper: {
            serializedName: "userData",
            constraints: {
                MaxLength: 1024
            },
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Face. */
    var Face = /** @class */ (function () {
        /**
         * Create a Face.
         * @param {FaceClientContext} client Reference to the service client.
         */
        function Face(client) {
            this.client = client;
        }
        Face.prototype.findSimilar = function (faceId, options, callback) {
            return this.client.sendOperationRequest({
                faceId: faceId,
                options: options
            }, findSimilarOperationSpec, callback);
        };
        Face.prototype.group = function (faceIds, options, callback) {
            return this.client.sendOperationRequest({
                faceIds: faceIds,
                options: options
            }, groupOperationSpec, callback);
        };
        Face.prototype.identify = function (faceIds, options, callback) {
            return this.client.sendOperationRequest({
                faceIds: faceIds,
                options: options
            }, identifyOperationSpec, callback);
        };
        Face.prototype.verifyFaceToFace = function (faceId1, faceId2, options, callback) {
            return this.client.sendOperationRequest({
                faceId1: faceId1,
                faceId2: faceId2,
                options: options
            }, verifyFaceToFaceOperationSpec, callback);
        };
        Face.prototype.detectWithUrl = function (url, options, callback) {
            return this.client.sendOperationRequest({
                url: url,
                options: options
            }, detectWithUrlOperationSpec, callback);
        };
        Face.prototype.verifyFaceToPerson = function (faceId, personId, options, callback) {
            return this.client.sendOperationRequest({
                faceId: faceId,
                personId: personId,
                options: options
            }, verifyFaceToPersonOperationSpec, callback);
        };
        Face.prototype.detectWithStream = function (image, options, callback) {
            return this.client.sendOperationRequest({
                image: image,
                options: options
            }, detectWithStreamOperationSpec, callback);
        };
        return Face;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var findSimilarOperationSpec = {
        httpMethod: "POST",
        path: "findsimilars",
        urlParameters: [
            endpoint
        ],
        requestBody: {
            parameterPath: {
                faceId: "faceId",
                faceListId: [
                    "options",
                    "faceListId"
                ],
                largeFaceListId: [
                    "options",
                    "largeFaceListId"
                ],
                faceIds: [
                    "options",
                    "faceIds"
                ],
                maxNumOfCandidatesReturned: [
                    "options",
                    "maxNumOfCandidatesReturned"
                ],
                mode: [
                    "options",
                    "mode"
                ]
            },
            mapper: __assign(__assign({}, FindSimilarRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SimilarFace"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer
    };
    var groupOperationSpec = {
        httpMethod: "POST",
        path: "group",
        urlParameters: [
            endpoint
        ],
        requestBody: {
            parameterPath: {
                faceIds: "faceIds"
            },
            mapper: __assign(__assign({}, GroupRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: GroupResult
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer
    };
    var identifyOperationSpec = {
        httpMethod: "POST",
        path: "identify",
        urlParameters: [
            endpoint
        ],
        requestBody: {
            parameterPath: {
                faceIds: "faceIds",
                personGroupId: [
                    "options",
                    "personGroupId"
                ],
                largePersonGroupId: [
                    "options",
                    "largePersonGroupId"
                ],
                maxNumOfCandidatesReturned: [
                    "options",
                    "maxNumOfCandidatesReturned"
                ],
                confidenceThreshold: [
                    "options",
                    "confidenceThreshold"
                ]
            },
            mapper: __assign(__assign({}, IdentifyRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IdentifyResult"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer
    };
    var verifyFaceToFaceOperationSpec = {
        httpMethod: "POST",
        path: "verify",
        urlParameters: [
            endpoint
        ],
        requestBody: {
            parameterPath: {
                faceId1: "faceId1",
                faceId2: "faceId2"
            },
            mapper: __assign(__assign({}, VerifyFaceToFaceRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VerifyResult
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer
    };
    var detectWithUrlOperationSpec = {
        httpMethod: "POST",
        path: "detect",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            returnFaceId,
            returnFaceLandmarks,
            returnFaceAttributes,
            recognitionModel,
            returnRecognitionModel,
            detectionModel,
            faceIdTimeToLive
        ],
        requestBody: {
            parameterPath: {
                url: "url"
            },
            mapper: __assign(__assign({}, ImageUrl), { required: true })
        },
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DetectedFace"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer
    };
    var verifyFaceToPersonOperationSpec = {
        httpMethod: "POST",
        path: "verify",
        urlParameters: [
            endpoint
        ],
        requestBody: {
            parameterPath: {
                faceId: "faceId",
                personGroupId: [
                    "options",
                    "personGroupId"
                ],
                largePersonGroupId: [
                    "options",
                    "largePersonGroupId"
                ],
                personId: "personId"
            },
            mapper: __assign(__assign({}, VerifyFaceToPersonRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VerifyResult
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer
    };
    var detectWithStreamOperationSpec = {
        httpMethod: "POST",
        path: "detect",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            returnFaceId,
            returnFaceLandmarks,
            returnFaceAttributes,
            recognitionModel,
            returnRecognitionModel,
            detectionModel,
            faceIdTimeToLive
        ],
        requestBody: {
            parameterPath: "image",
            mapper: {
                required: true,
                serializedName: "Image",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "application/octet-stream",
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DetectedFace"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        APIError: APIError,
        ErrorModel: ErrorModel,
        ImageUrl: ImageUrl,
        NameAndUserDataContract: NameAndUserDataContract,
        PersistedFace: PersistedFace,
        Person: Person,
        UpdateFaceRequest: UpdateFaceRequest
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a PersonGroupPerson. */
    var PersonGroupPerson = /** @class */ (function () {
        /**
         * Create a PersonGroupPerson.
         * @param {FaceClientContext} client Reference to the service client.
         */
        function PersonGroupPerson(client) {
            this.client = client;
        }
        PersonGroupPerson.prototype.create = function (personGroupId, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId,
                options: options
            }, createOperationSpec, callback);
        };
        PersonGroupPerson.prototype.list = function (personGroupId, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId,
                options: options
            }, listOperationSpec, callback);
        };
        PersonGroupPerson.prototype.deleteMethod = function (personGroupId, personId, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId,
                personId: personId,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        PersonGroupPerson.prototype.get = function (personGroupId, personId, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId,
                personId: personId,
                options: options
            }, getOperationSpec, callback);
        };
        PersonGroupPerson.prototype.update = function (personGroupId, personId, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId,
                personId: personId,
                options: options
            }, updateOperationSpec, callback);
        };
        PersonGroupPerson.prototype.deleteFace = function (personGroupId, personId, persistedFaceId, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId,
                personId: personId,
                persistedFaceId: persistedFaceId,
                options: options
            }, deleteFaceOperationSpec, callback);
        };
        PersonGroupPerson.prototype.getFace = function (personGroupId, personId, persistedFaceId, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId,
                personId: personId,
                persistedFaceId: persistedFaceId,
                options: options
            }, getFaceOperationSpec, callback);
        };
        PersonGroupPerson.prototype.updateFace = function (personGroupId, personId, persistedFaceId, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId,
                personId: personId,
                persistedFaceId: persistedFaceId,
                options: options
            }, updateFaceOperationSpec, callback);
        };
        PersonGroupPerson.prototype.addFaceFromUrl = function (personGroupId, personId, url, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId,
                personId: personId,
                url: url,
                options: options
            }, addFaceFromUrlOperationSpec, callback);
        };
        PersonGroupPerson.prototype.addFaceFromStream = function (personGroupId, personId, image, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId,
                personId: personId,
                image: image,
                options: options
            }, addFaceFromStreamOperationSpec, callback);
        };
        return PersonGroupPerson;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var createOperationSpec = {
        httpMethod: "POST",
        path: "persongroups/{personGroupId}/persons",
        urlParameters: [
            endpoint,
            personGroupId
        ],
        requestBody: {
            parameterPath: {
                name: [
                    "options",
                    "name"
                ],
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign(__assign({}, NameAndUserDataContract), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Person
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$1
    };
    var listOperationSpec = {
        httpMethod: "GET",
        path: "persongroups/{personGroupId}/persons",
        urlParameters: [
            endpoint,
            personGroupId
        ],
        queryParameters: [
            start0,
            top0
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Person"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "persongroups/{personGroupId}/persons/{personId}",
        urlParameters: [
            endpoint,
            personGroupId,
            personId
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "persongroups/{personGroupId}/persons/{personId}",
        urlParameters: [
            endpoint,
            personGroupId,
            personId
        ],
        responses: {
            200: {
                bodyMapper: Person
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$1
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "persongroups/{personGroupId}/persons/{personId}",
        urlParameters: [
            endpoint,
            personGroupId,
            personId
        ],
        requestBody: {
            parameterPath: {
                name: [
                    "options",
                    "name"
                ],
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign(__assign({}, NameAndUserDataContract), { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$1
    };
    var deleteFaceOperationSpec = {
        httpMethod: "DELETE",
        path: "persongroups/{personGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}",
        urlParameters: [
            endpoint,
            personGroupId,
            personId,
            persistedFaceId
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$1
    };
    var getFaceOperationSpec = {
        httpMethod: "GET",
        path: "persongroups/{personGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}",
        urlParameters: [
            endpoint,
            personGroupId,
            personId,
            persistedFaceId
        ],
        responses: {
            200: {
                bodyMapper: PersistedFace
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$1
    };
    var updateFaceOperationSpec = {
        httpMethod: "PATCH",
        path: "persongroups/{personGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}",
        urlParameters: [
            endpoint,
            personGroupId,
            personId,
            persistedFaceId
        ],
        requestBody: {
            parameterPath: {
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign(__assign({}, UpdateFaceRequest), { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$1
    };
    var addFaceFromUrlOperationSpec = {
        httpMethod: "POST",
        path: "persongroups/{personGroupId}/persons/{personId}/persistedfaces",
        urlParameters: [
            endpoint,
            personGroupId,
            personId
        ],
        queryParameters: [
            userData,
            targetFace,
            detectionModel
        ],
        requestBody: {
            parameterPath: {
                url: "url"
            },
            mapper: __assign(__assign({}, ImageUrl), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PersistedFace
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$1
    };
    var addFaceFromStreamOperationSpec = {
        httpMethod: "POST",
        path: "persongroups/{personGroupId}/persons/{personId}/persistedfaces",
        urlParameters: [
            endpoint,
            personGroupId,
            personId
        ],
        queryParameters: [
            userData,
            targetFace,
            detectionModel
        ],
        requestBody: {
            parameterPath: "image",
            mapper: {
                required: true,
                serializedName: "Image",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "application/octet-stream",
        responses: {
            200: {
                bodyMapper: PersistedFace
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        APIError: APIError,
        ErrorModel: ErrorModel,
        FaceList: FaceList,
        LargeFaceList: LargeFaceList,
        LargePersonGroup: LargePersonGroup,
        MetaDataContract: MetaDataContract,
        NameAndUserDataContract: NameAndUserDataContract,
        NonNullableNameAndNullableUserDataContract: NonNullableNameAndNullableUserDataContract,
        PersistedFace: PersistedFace,
        Person: Person,
        PersonGroup: PersonGroup,
        TrainingStatus: TrainingStatus
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a PersonGroupOperations. */
    var PersonGroupOperations = /** @class */ (function () {
        /**
         * Create a PersonGroupOperations.
         * @param {FaceClientContext} client Reference to the service client.
         */
        function PersonGroupOperations(client) {
            this.client = client;
        }
        PersonGroupOperations.prototype.create = function (personGroupId, name, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId,
                name: name,
                options: options
            }, createOperationSpec$1, callback);
        };
        PersonGroupOperations.prototype.deleteMethod = function (personGroupId, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        PersonGroupOperations.prototype.get = function (personGroupId, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId,
                options: options
            }, getOperationSpec$1, callback);
        };
        PersonGroupOperations.prototype.update = function (personGroupId, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId,
                options: options
            }, updateOperationSpec$1, callback);
        };
        PersonGroupOperations.prototype.getTrainingStatus = function (personGroupId, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId,
                options: options
            }, getTrainingStatusOperationSpec, callback);
        };
        PersonGroupOperations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        PersonGroupOperations.prototype.train = function (personGroupId, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId,
                options: options
            }, trainOperationSpec, callback);
        };
        return PersonGroupOperations;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var createOperationSpec$1 = {
        httpMethod: "PUT",
        path: "persongroups/{personGroupId}",
        urlParameters: [
            endpoint,
            personGroupId
        ],
        requestBody: {
            parameterPath: {
                name: "name",
                userData: [
                    "options",
                    "userData"
                ],
                recognitionModel: [
                    "options",
                    "recognitionModel"
                ]
            },
            mapper: __assign(__assign({}, MetaDataContract), { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "persongroups/{personGroupId}",
        urlParameters: [
            endpoint,
            personGroupId
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "persongroups/{personGroupId}",
        urlParameters: [
            endpoint,
            personGroupId
        ],
        queryParameters: [
            returnRecognitionModel
        ],
        responses: {
            200: {
                bodyMapper: PersonGroup
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$2
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "persongroups/{personGroupId}",
        urlParameters: [
            endpoint,
            personGroupId
        ],
        requestBody: {
            parameterPath: {
                name: [
                    "options",
                    "name"
                ],
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign(__assign({}, NameAndUserDataContract), { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$2
    };
    var getTrainingStatusOperationSpec = {
        httpMethod: "GET",
        path: "persongroups/{personGroupId}/training",
        urlParameters: [
            endpoint,
            personGroupId
        ],
        responses: {
            200: {
                bodyMapper: TrainingStatus
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$2
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "persongroups",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            start1,
            top1,
            returnRecognitionModel
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PersonGroup"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$2
    };
    var trainOperationSpec = {
        httpMethod: "POST",
        path: "persongroups/{personGroupId}/train",
        urlParameters: [
            endpoint,
            personGroupId
        ],
        responses: {
            202: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        APIError: APIError,
        ErrorModel: ErrorModel,
        FaceList: FaceList,
        ImageUrl: ImageUrl,
        LargeFaceList: LargeFaceList,
        LargePersonGroup: LargePersonGroup,
        MetaDataContract: MetaDataContract,
        NameAndUserDataContract: NameAndUserDataContract,
        NonNullableNameAndNullableUserDataContract: NonNullableNameAndNullableUserDataContract,
        PersistedFace: PersistedFace,
        Person: Person,
        PersonGroup: PersonGroup
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a FaceListOperations. */
    var FaceListOperations = /** @class */ (function () {
        /**
         * Create a FaceListOperations.
         * @param {FaceClientContext} client Reference to the service client.
         */
        function FaceListOperations(client) {
            this.client = client;
        }
        FaceListOperations.prototype.create = function (faceListId, name, options, callback) {
            return this.client.sendOperationRequest({
                faceListId: faceListId,
                name: name,
                options: options
            }, createOperationSpec$2, callback);
        };
        FaceListOperations.prototype.get = function (faceListId, options, callback) {
            return this.client.sendOperationRequest({
                faceListId: faceListId,
                options: options
            }, getOperationSpec$2, callback);
        };
        FaceListOperations.prototype.update = function (faceListId, options, callback) {
            return this.client.sendOperationRequest({
                faceListId: faceListId,
                options: options
            }, updateOperationSpec$2, callback);
        };
        FaceListOperations.prototype.deleteMethod = function (faceListId, options, callback) {
            return this.client.sendOperationRequest({
                faceListId: faceListId,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        FaceListOperations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$2, callback);
        };
        FaceListOperations.prototype.deleteFace = function (faceListId, persistedFaceId, options, callback) {
            return this.client.sendOperationRequest({
                faceListId: faceListId,
                persistedFaceId: persistedFaceId,
                options: options
            }, deleteFaceOperationSpec$1, callback);
        };
        FaceListOperations.prototype.addFaceFromUrl = function (faceListId, url, options, callback) {
            return this.client.sendOperationRequest({
                faceListId: faceListId,
                url: url,
                options: options
            }, addFaceFromUrlOperationSpec$1, callback);
        };
        FaceListOperations.prototype.addFaceFromStream = function (faceListId, image, options, callback) {
            return this.client.sendOperationRequest({
                faceListId: faceListId,
                image: image,
                options: options
            }, addFaceFromStreamOperationSpec$1, callback);
        };
        return FaceListOperations;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var createOperationSpec$2 = {
        httpMethod: "PUT",
        path: "facelists/{faceListId}",
        urlParameters: [
            endpoint,
            faceListId
        ],
        requestBody: {
            parameterPath: {
                name: "name",
                userData: [
                    "options",
                    "userData"
                ],
                recognitionModel: [
                    "options",
                    "recognitionModel"
                ]
            },
            mapper: __assign(__assign({}, MetaDataContract), { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "facelists/{faceListId}",
        urlParameters: [
            endpoint,
            faceListId
        ],
        queryParameters: [
            returnRecognitionModel
        ],
        responses: {
            200: {
                bodyMapper: FaceList
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$3
    };
    var updateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "facelists/{faceListId}",
        urlParameters: [
            endpoint,
            faceListId
        ],
        requestBody: {
            parameterPath: {
                name: [
                    "options",
                    "name"
                ],
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign(__assign({}, NameAndUserDataContract), { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "facelists/{faceListId}",
        urlParameters: [
            endpoint,
            faceListId
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$3
    };
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "facelists",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            returnRecognitionModel
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FaceList"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$3
    };
    var deleteFaceOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "facelists/{faceListId}/persistedfaces/{persistedFaceId}",
        urlParameters: [
            endpoint,
            faceListId,
            persistedFaceId
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$3
    };
    var addFaceFromUrlOperationSpec$1 = {
        httpMethod: "POST",
        path: "facelists/{faceListId}/persistedfaces",
        urlParameters: [
            endpoint,
            faceListId
        ],
        queryParameters: [
            userData,
            targetFace,
            detectionModel
        ],
        requestBody: {
            parameterPath: {
                url: "url"
            },
            mapper: __assign(__assign({}, ImageUrl), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PersistedFace
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$3
    };
    var addFaceFromStreamOperationSpec$1 = {
        httpMethod: "POST",
        path: "facelists/{faceListId}/persistedfaces",
        urlParameters: [
            endpoint,
            faceListId
        ],
        queryParameters: [
            userData,
            targetFace,
            detectionModel
        ],
        requestBody: {
            parameterPath: "image",
            mapper: {
                required: true,
                serializedName: "Image",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "application/octet-stream",
        responses: {
            200: {
                bodyMapper: PersistedFace
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        APIError: APIError,
        ErrorModel: ErrorModel,
        ImageUrl: ImageUrl,
        NameAndUserDataContract: NameAndUserDataContract,
        PersistedFace: PersistedFace,
        Person: Person,
        UpdateFaceRequest: UpdateFaceRequest
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LargePersonGroupPerson. */
    var LargePersonGroupPerson = /** @class */ (function () {
        /**
         * Create a LargePersonGroupPerson.
         * @param {FaceClientContext} client Reference to the service client.
         */
        function LargePersonGroupPerson(client) {
            this.client = client;
        }
        LargePersonGroupPerson.prototype.create = function (largePersonGroupId, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId,
                options: options
            }, createOperationSpec$3, callback);
        };
        LargePersonGroupPerson.prototype.list = function (largePersonGroupId, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId,
                options: options
            }, listOperationSpec$3, callback);
        };
        LargePersonGroupPerson.prototype.deleteMethod = function (largePersonGroupId, personId, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId,
                personId: personId,
                options: options
            }, deleteMethodOperationSpec$3, callback);
        };
        LargePersonGroupPerson.prototype.get = function (largePersonGroupId, personId, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId,
                personId: personId,
                options: options
            }, getOperationSpec$3, callback);
        };
        LargePersonGroupPerson.prototype.update = function (largePersonGroupId, personId, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId,
                personId: personId,
                options: options
            }, updateOperationSpec$3, callback);
        };
        LargePersonGroupPerson.prototype.deleteFace = function (largePersonGroupId, personId, persistedFaceId, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId,
                personId: personId,
                persistedFaceId: persistedFaceId,
                options: options
            }, deleteFaceOperationSpec$2, callback);
        };
        LargePersonGroupPerson.prototype.getFace = function (largePersonGroupId, personId, persistedFaceId, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId,
                personId: personId,
                persistedFaceId: persistedFaceId,
                options: options
            }, getFaceOperationSpec$1, callback);
        };
        LargePersonGroupPerson.prototype.updateFace = function (largePersonGroupId, personId, persistedFaceId, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId,
                personId: personId,
                persistedFaceId: persistedFaceId,
                options: options
            }, updateFaceOperationSpec$1, callback);
        };
        LargePersonGroupPerson.prototype.addFaceFromUrl = function (largePersonGroupId, personId, url, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId,
                personId: personId,
                url: url,
                options: options
            }, addFaceFromUrlOperationSpec$2, callback);
        };
        LargePersonGroupPerson.prototype.addFaceFromStream = function (largePersonGroupId, personId, image, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId,
                personId: personId,
                image: image,
                options: options
            }, addFaceFromStreamOperationSpec$2, callback);
        };
        return LargePersonGroupPerson;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var createOperationSpec$3 = {
        httpMethod: "POST",
        path: "largepersongroups/{largePersonGroupId}/persons",
        urlParameters: [
            endpoint,
            largePersonGroupId
        ],
        requestBody: {
            parameterPath: {
                name: [
                    "options",
                    "name"
                ],
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign(__assign({}, NameAndUserDataContract), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Person
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$4
    };
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "largepersongroups/{largePersonGroupId}/persons",
        urlParameters: [
            endpoint,
            largePersonGroupId
        ],
        queryParameters: [
            start0,
            top0
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Person"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$4
    };
    var deleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "largepersongroups/{largePersonGroupId}/persons/{personId}",
        urlParameters: [
            endpoint,
            largePersonGroupId,
            personId
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "largepersongroups/{largePersonGroupId}/persons/{personId}",
        urlParameters: [
            endpoint,
            largePersonGroupId,
            personId
        ],
        responses: {
            200: {
                bodyMapper: Person
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$4
    };
    var updateOperationSpec$3 = {
        httpMethod: "PATCH",
        path: "largepersongroups/{largePersonGroupId}/persons/{personId}",
        urlParameters: [
            endpoint,
            largePersonGroupId,
            personId
        ],
        requestBody: {
            parameterPath: {
                name: [
                    "options",
                    "name"
                ],
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign(__assign({}, NameAndUserDataContract), { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$4
    };
    var deleteFaceOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}",
        urlParameters: [
            endpoint,
            largePersonGroupId,
            personId,
            persistedFaceId
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$4
    };
    var getFaceOperationSpec$1 = {
        httpMethod: "GET",
        path: "largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}",
        urlParameters: [
            endpoint,
            largePersonGroupId,
            personId,
            persistedFaceId
        ],
        responses: {
            200: {
                bodyMapper: PersistedFace
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$4
    };
    var updateFaceOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}",
        urlParameters: [
            endpoint,
            largePersonGroupId,
            personId,
            persistedFaceId
        ],
        requestBody: {
            parameterPath: {
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign(__assign({}, UpdateFaceRequest), { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$4
    };
    var addFaceFromUrlOperationSpec$2 = {
        httpMethod: "POST",
        path: "largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces",
        urlParameters: [
            endpoint,
            largePersonGroupId,
            personId
        ],
        queryParameters: [
            userData,
            targetFace,
            detectionModel
        ],
        requestBody: {
            parameterPath: {
                url: "url"
            },
            mapper: __assign(__assign({}, ImageUrl), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PersistedFace
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$4
    };
    var addFaceFromStreamOperationSpec$2 = {
        httpMethod: "POST",
        path: "largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces",
        urlParameters: [
            endpoint,
            largePersonGroupId,
            personId
        ],
        queryParameters: [
            userData,
            targetFace,
            detectionModel
        ],
        requestBody: {
            parameterPath: "image",
            mapper: {
                required: true,
                serializedName: "Image",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "application/octet-stream",
        responses: {
            200: {
                bodyMapper: PersistedFace
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        APIError: APIError,
        ErrorModel: ErrorModel,
        FaceList: FaceList,
        LargeFaceList: LargeFaceList,
        LargePersonGroup: LargePersonGroup,
        MetaDataContract: MetaDataContract,
        NameAndUserDataContract: NameAndUserDataContract,
        NonNullableNameAndNullableUserDataContract: NonNullableNameAndNullableUserDataContract,
        PersistedFace: PersistedFace,
        Person: Person,
        PersonGroup: PersonGroup,
        TrainingStatus: TrainingStatus
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LargePersonGroupOperations. */
    var LargePersonGroupOperations = /** @class */ (function () {
        /**
         * Create a LargePersonGroupOperations.
         * @param {FaceClientContext} client Reference to the service client.
         */
        function LargePersonGroupOperations(client) {
            this.client = client;
        }
        LargePersonGroupOperations.prototype.create = function (largePersonGroupId, name, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId,
                name: name,
                options: options
            }, createOperationSpec$4, callback);
        };
        LargePersonGroupOperations.prototype.deleteMethod = function (largePersonGroupId, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId,
                options: options
            }, deleteMethodOperationSpec$4, callback);
        };
        LargePersonGroupOperations.prototype.get = function (largePersonGroupId, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId,
                options: options
            }, getOperationSpec$4, callback);
        };
        LargePersonGroupOperations.prototype.update = function (largePersonGroupId, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId,
                options: options
            }, updateOperationSpec$4, callback);
        };
        LargePersonGroupOperations.prototype.getTrainingStatus = function (largePersonGroupId, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId,
                options: options
            }, getTrainingStatusOperationSpec$1, callback);
        };
        LargePersonGroupOperations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$4, callback);
        };
        LargePersonGroupOperations.prototype.train = function (largePersonGroupId, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId,
                options: options
            }, trainOperationSpec$1, callback);
        };
        return LargePersonGroupOperations;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var createOperationSpec$4 = {
        httpMethod: "PUT",
        path: "largepersongroups/{largePersonGroupId}",
        urlParameters: [
            endpoint,
            largePersonGroupId
        ],
        requestBody: {
            parameterPath: {
                name: "name",
                userData: [
                    "options",
                    "userData"
                ],
                recognitionModel: [
                    "options",
                    "recognitionModel"
                ]
            },
            mapper: __assign(__assign({}, MetaDataContract), { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$5
    };
    var deleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "largepersongroups/{largePersonGroupId}",
        urlParameters: [
            endpoint,
            largePersonGroupId
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$5
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "largepersongroups/{largePersonGroupId}",
        urlParameters: [
            endpoint,
            largePersonGroupId
        ],
        queryParameters: [
            returnRecognitionModel
        ],
        responses: {
            200: {
                bodyMapper: LargePersonGroup
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$5
    };
    var updateOperationSpec$4 = {
        httpMethod: "PATCH",
        path: "largepersongroups/{largePersonGroupId}",
        urlParameters: [
            endpoint,
            largePersonGroupId
        ],
        requestBody: {
            parameterPath: {
                name: [
                    "options",
                    "name"
                ],
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign(__assign({}, NameAndUserDataContract), { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$5
    };
    var getTrainingStatusOperationSpec$1 = {
        httpMethod: "GET",
        path: "largepersongroups/{largePersonGroupId}/training",
        urlParameters: [
            endpoint,
            largePersonGroupId
        ],
        responses: {
            200: {
                bodyMapper: TrainingStatus
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$5
    };
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "largepersongroups",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            start1,
            top1,
            returnRecognitionModel
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LargePersonGroup"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$5
    };
    var trainOperationSpec$1 = {
        httpMethod: "POST",
        path: "largepersongroups/{largePersonGroupId}/train",
        urlParameters: [
            endpoint,
            largePersonGroupId
        ],
        responses: {
            202: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        APIError: APIError,
        ErrorModel: ErrorModel,
        FaceList: FaceList,
        ImageUrl: ImageUrl,
        LargeFaceList: LargeFaceList,
        LargePersonGroup: LargePersonGroup,
        MetaDataContract: MetaDataContract,
        NameAndUserDataContract: NameAndUserDataContract,
        NonNullableNameAndNullableUserDataContract: NonNullableNameAndNullableUserDataContract,
        PersistedFace: PersistedFace,
        Person: Person,
        PersonGroup: PersonGroup,
        TrainingStatus: TrainingStatus,
        UpdateFaceRequest: UpdateFaceRequest
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LargeFaceListOperations. */
    var LargeFaceListOperations = /** @class */ (function () {
        /**
         * Create a LargeFaceListOperations.
         * @param {FaceClientContext} client Reference to the service client.
         */
        function LargeFaceListOperations(client) {
            this.client = client;
        }
        LargeFaceListOperations.prototype.create = function (largeFaceListId, name, options, callback) {
            return this.client.sendOperationRequest({
                largeFaceListId: largeFaceListId,
                name: name,
                options: options
            }, createOperationSpec$5, callback);
        };
        LargeFaceListOperations.prototype.get = function (largeFaceListId, options, callback) {
            return this.client.sendOperationRequest({
                largeFaceListId: largeFaceListId,
                options: options
            }, getOperationSpec$5, callback);
        };
        LargeFaceListOperations.prototype.update = function (largeFaceListId, options, callback) {
            return this.client.sendOperationRequest({
                largeFaceListId: largeFaceListId,
                options: options
            }, updateOperationSpec$5, callback);
        };
        LargeFaceListOperations.prototype.deleteMethod = function (largeFaceListId, options, callback) {
            return this.client.sendOperationRequest({
                largeFaceListId: largeFaceListId,
                options: options
            }, deleteMethodOperationSpec$5, callback);
        };
        LargeFaceListOperations.prototype.getTrainingStatus = function (largeFaceListId, options, callback) {
            return this.client.sendOperationRequest({
                largeFaceListId: largeFaceListId,
                options: options
            }, getTrainingStatusOperationSpec$2, callback);
        };
        LargeFaceListOperations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$5, callback);
        };
        LargeFaceListOperations.prototype.train = function (largeFaceListId, options, callback) {
            return this.client.sendOperationRequest({
                largeFaceListId: largeFaceListId,
                options: options
            }, trainOperationSpec$2, callback);
        };
        LargeFaceListOperations.prototype.deleteFace = function (largeFaceListId, persistedFaceId, options, callback) {
            return this.client.sendOperationRequest({
                largeFaceListId: largeFaceListId,
                persistedFaceId: persistedFaceId,
                options: options
            }, deleteFaceOperationSpec$3, callback);
        };
        LargeFaceListOperations.prototype.getFace = function (largeFaceListId, persistedFaceId, options, callback) {
            return this.client.sendOperationRequest({
                largeFaceListId: largeFaceListId,
                persistedFaceId: persistedFaceId,
                options: options
            }, getFaceOperationSpec$2, callback);
        };
        LargeFaceListOperations.prototype.updateFace = function (largeFaceListId, persistedFaceId, options, callback) {
            return this.client.sendOperationRequest({
                largeFaceListId: largeFaceListId,
                persistedFaceId: persistedFaceId,
                options: options
            }, updateFaceOperationSpec$2, callback);
        };
        LargeFaceListOperations.prototype.addFaceFromUrl = function (largeFaceListId, url, options, callback) {
            return this.client.sendOperationRequest({
                largeFaceListId: largeFaceListId,
                url: url,
                options: options
            }, addFaceFromUrlOperationSpec$3, callback);
        };
        LargeFaceListOperations.prototype.listFaces = function (largeFaceListId, options, callback) {
            return this.client.sendOperationRequest({
                largeFaceListId: largeFaceListId,
                options: options
            }, listFacesOperationSpec, callback);
        };
        LargeFaceListOperations.prototype.addFaceFromStream = function (largeFaceListId, image, options, callback) {
            return this.client.sendOperationRequest({
                largeFaceListId: largeFaceListId,
                image: image,
                options: options
            }, addFaceFromStreamOperationSpec$3, callback);
        };
        return LargeFaceListOperations;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var createOperationSpec$5 = {
        httpMethod: "PUT",
        path: "largefacelists/{largeFaceListId}",
        urlParameters: [
            endpoint,
            largeFaceListId
        ],
        requestBody: {
            parameterPath: {
                name: "name",
                userData: [
                    "options",
                    "userData"
                ],
                recognitionModel: [
                    "options",
                    "recognitionModel"
                ]
            },
            mapper: __assign(__assign({}, MetaDataContract), { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "largefacelists/{largeFaceListId}",
        urlParameters: [
            endpoint,
            largeFaceListId
        ],
        queryParameters: [
            returnRecognitionModel
        ],
        responses: {
            200: {
                bodyMapper: LargeFaceList
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var updateOperationSpec$5 = {
        httpMethod: "PATCH",
        path: "largefacelists/{largeFaceListId}",
        urlParameters: [
            endpoint,
            largeFaceListId
        ],
        requestBody: {
            parameterPath: {
                name: [
                    "options",
                    "name"
                ],
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign(__assign({}, NameAndUserDataContract), { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var deleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "largefacelists/{largeFaceListId}",
        urlParameters: [
            endpoint,
            largeFaceListId
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var getTrainingStatusOperationSpec$2 = {
        httpMethod: "GET",
        path: "largefacelists/{largeFaceListId}/training",
        urlParameters: [
            endpoint,
            largeFaceListId
        ],
        responses: {
            200: {
                bodyMapper: TrainingStatus
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var listOperationSpec$5 = {
        httpMethod: "GET",
        path: "largefacelists",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            returnRecognitionModel,
            start0,
            top0
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LargeFaceList"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var trainOperationSpec$2 = {
        httpMethod: "POST",
        path: "largefacelists/{largeFaceListId}/train",
        urlParameters: [
            endpoint,
            largeFaceListId
        ],
        responses: {
            202: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var deleteFaceOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}",
        urlParameters: [
            endpoint,
            largeFaceListId,
            persistedFaceId
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var getFaceOperationSpec$2 = {
        httpMethod: "GET",
        path: "largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}",
        urlParameters: [
            endpoint,
            largeFaceListId,
            persistedFaceId
        ],
        responses: {
            200: {
                bodyMapper: PersistedFace
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var updateFaceOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}",
        urlParameters: [
            endpoint,
            largeFaceListId,
            persistedFaceId
        ],
        requestBody: {
            parameterPath: {
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign(__assign({}, UpdateFaceRequest), { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var addFaceFromUrlOperationSpec$3 = {
        httpMethod: "POST",
        path: "largefacelists/{largeFaceListId}/persistedfaces",
        urlParameters: [
            endpoint,
            largeFaceListId
        ],
        queryParameters: [
            userData,
            targetFace,
            detectionModel
        ],
        requestBody: {
            parameterPath: {
                url: "url"
            },
            mapper: __assign(__assign({}, ImageUrl), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PersistedFace
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var listFacesOperationSpec = {
        httpMethod: "GET",
        path: "largefacelists/{largeFaceListId}/persistedfaces",
        urlParameters: [
            endpoint,
            largeFaceListId
        ],
        queryParameters: [
            start0,
            top0
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PersistedFace"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var addFaceFromStreamOperationSpec$3 = {
        httpMethod: "POST",
        path: "largefacelists/{largeFaceListId}/persistedfaces",
        urlParameters: [
            endpoint,
            largeFaceListId
        ],
        queryParameters: [
            userData,
            targetFace,
            detectionModel
        ],
        requestBody: {
            parameterPath: "image",
            mapper: {
                required: true,
                serializedName: "Image",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "application/octet-stream",
        responses: {
            200: {
                bodyMapper: PersistedFace
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        APIError: APIError,
        ApplySnapshotRequest: ApplySnapshotRequest,
        ErrorModel: ErrorModel,
        OperationStatus: OperationStatus,
        Snapshot: Snapshot,
        SnapshotApplyHeaders: SnapshotApplyHeaders,
        SnapshotTakeHeaders: SnapshotTakeHeaders,
        TakeSnapshotRequest: TakeSnapshotRequest,
        UpdateSnapshotRequest: UpdateSnapshotRequest
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SnapshotOperations. */
    var SnapshotOperations = /** @class */ (function () {
        /**
         * Create a SnapshotOperations.
         * @param {FaceClientContext} client Reference to the service client.
         */
        function SnapshotOperations(client) {
            this.client = client;
        }
        SnapshotOperations.prototype.take = function (type, objectId, applyScope, options, callback) {
            return this.client.sendOperationRequest({
                type: type,
                objectId: objectId,
                applyScope: applyScope,
                options: options
            }, takeOperationSpec, callback);
        };
        SnapshotOperations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$6, callback);
        };
        SnapshotOperations.prototype.get = function (snapshotId, options, callback) {
            return this.client.sendOperationRequest({
                snapshotId: snapshotId,
                options: options
            }, getOperationSpec$6, callback);
        };
        SnapshotOperations.prototype.update = function (snapshotId, options, callback) {
            return this.client.sendOperationRequest({
                snapshotId: snapshotId,
                options: options
            }, updateOperationSpec$6, callback);
        };
        SnapshotOperations.prototype.deleteMethod = function (snapshotId, options, callback) {
            return this.client.sendOperationRequest({
                snapshotId: snapshotId,
                options: options
            }, deleteMethodOperationSpec$6, callback);
        };
        SnapshotOperations.prototype.apply = function (snapshotId, objectId, options, callback) {
            return this.client.sendOperationRequest({
                snapshotId: snapshotId,
                objectId: objectId,
                options: options
            }, applyOperationSpec, callback);
        };
        SnapshotOperations.prototype.getOperationStatus = function (operationId, options, callback) {
            return this.client.sendOperationRequest({
                operationId: operationId,
                options: options
            }, getOperationStatusOperationSpec, callback);
        };
        return SnapshotOperations;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var takeOperationSpec = {
        httpMethod: "POST",
        path: "snapshots",
        urlParameters: [
            endpoint
        ],
        requestBody: {
            parameterPath: {
                type: "type",
                objectId: "objectId",
                applyScope: "applyScope",
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign(__assign({}, TakeSnapshotRequest), { required: true })
        },
        responses: {
            202: {
                headersMapper: SnapshotTakeHeaders
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$7
    };
    var listOperationSpec$6 = {
        httpMethod: "GET",
        path: "snapshots",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            type,
            applyScope
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Snapshot"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$7
    };
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "snapshots/{snapshotId}",
        urlParameters: [
            endpoint,
            snapshotId
        ],
        responses: {
            200: {
                bodyMapper: Snapshot
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$7
    };
    var updateOperationSpec$6 = {
        httpMethod: "PATCH",
        path: "snapshots/{snapshotId}",
        urlParameters: [
            endpoint,
            snapshotId
        ],
        requestBody: {
            parameterPath: {
                applyScope: [
                    "options",
                    "applyScope"
                ],
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign(__assign({}, UpdateSnapshotRequest), { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$7
    };
    var deleteMethodOperationSpec$6 = {
        httpMethod: "DELETE",
        path: "snapshots/{snapshotId}",
        urlParameters: [
            endpoint,
            snapshotId
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$7
    };
    var applyOperationSpec = {
        httpMethod: "POST",
        path: "snapshots/{snapshotId}/apply",
        urlParameters: [
            endpoint,
            snapshotId
        ],
        requestBody: {
            parameterPath: {
                objectId: "objectId",
                mode: [
                    "options",
                    "mode"
                ]
            },
            mapper: __assign(__assign({}, ApplySnapshotRequest), { required: true })
        },
        responses: {
            202: {
                headersMapper: SnapshotApplyHeaders
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$7
    };
    var getOperationStatusOperationSpec = {
        httpMethod: "GET",
        path: "operations/{operationId}",
        urlParameters: [
            endpoint,
            operationId
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/cognitiveservices-face";
    var packageVersion = "5.0.0";
    var FaceClientContext = /** @class */ (function (_super) {
        __extends(FaceClientContext, _super);
        /**
         * Initializes a new instance of the FaceClientContext class.
         * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
         * https://westus.api.cognitive.microsoft.com).
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function FaceClientContext(credentials, endpoint, options) {
            var _this = this;
            if (endpoint == undefined) {
                throw new Error("'endpoint' cannot be null.");
            }
            if (credentials == undefined) {
                throw new Error("'credentials' cannot be null.");
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRest.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.baseUri = "{Endpoint}/face/v1.0";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.endpoint = endpoint;
            _this.credentials = credentials;
            return _this;
        }
        return FaceClientContext;
    }(msRest.ServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var FaceClient = /** @class */ (function (_super) {
        __extends(FaceClient, _super);
        /**
         * Initializes a new instance of the FaceClient class.
         * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
         * https://westus.api.cognitive.microsoft.com).
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function FaceClient(credentials, endpoint, options) {
            var _this = _super.call(this, credentials, endpoint, options) || this;
            _this.face = new Face(_this);
            _this.personGroupPerson = new PersonGroupPerson(_this);
            _this.personGroup = new PersonGroupOperations(_this);
            _this.faceList = new FaceListOperations(_this);
            _this.largePersonGroupPerson = new LargePersonGroupPerson(_this);
            _this.largePersonGroup = new LargePersonGroupOperations(_this);
            _this.largeFaceList = new LargeFaceListOperations(_this);
            _this.snapshot = new SnapshotOperations(_this);
            return _this;
        }
        return FaceClient;
    }(FaceClientContext));

    exports.Face = Face;
    exports.FaceClient = FaceClient;
    exports.FaceClientContext = FaceClientContext;
    exports.FaceListOperations = FaceListOperations;
    exports.FaceMappers = mappers;
    exports.FaceModels = index;
    exports.LargeFaceListOperations = LargeFaceListOperations;
    exports.LargePersonGroupOperations = LargePersonGroupOperations;
    exports.LargePersonGroupPerson = LargePersonGroupPerson;
    exports.PersonGroupOperations = PersonGroupOperations;
    exports.PersonGroupPerson = PersonGroupPerson;
    exports.SnapshotOperations = SnapshotOperations;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=cognitiveservices-face.js.map
