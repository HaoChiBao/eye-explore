{"version":3,"file":"cognitiveservices-computervision.js","sources":["../node_modules/tslib/tslib.es6.js","../src/models/index.ts","../src/models/mappers.ts","../src/models/parameters.ts","../src/computerVisionClientContext.ts","../src/computerVisionClient.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\n/**\n * An object describing face rectangle.\n */\nexport interface FaceRectangle {\n  /**\n   * X-coordinate of the top left point of the face, in pixels.\n   */\n  left?: number;\n  /**\n   * Y-coordinate of the top left point of the face, in pixels.\n   */\n  top?: number;\n  /**\n   * Width measured from the top-left point of the face, in pixels.\n   */\n  width?: number;\n  /**\n   * Height measured from the top-left point of the face, in pixels.\n   */\n  height?: number;\n}\n\n/**\n * An object describing possible celebrity identification.\n */\nexport interface CelebritiesModel {\n  /**\n   * Name of the celebrity.\n   */\n  name?: string;\n  /**\n   * Confidence level for the celebrity recognition as a value ranging from 0 to 1.\n   */\n  confidence?: number;\n  /**\n   * Location of the identified face in the image.\n   */\n  faceRectangle?: FaceRectangle;\n}\n\n/**\n * A landmark recognized in the image.\n */\nexport interface LandmarksModel {\n  /**\n   * Name of the landmark.\n   */\n  name?: string;\n  /**\n   * Confidence level for the landmark recognition as a value ranging from 0 to 1.\n   */\n  confidence?: number;\n}\n\n/**\n * An object describing additional category details.\n */\nexport interface CategoryDetail {\n  /**\n   * An array of celebrities if any identified.\n   */\n  celebrities?: CelebritiesModel[];\n  /**\n   * An array of landmarks if any identified.\n   */\n  landmarks?: LandmarksModel[];\n}\n\n/**\n * An object describing identified category.\n */\nexport interface Category {\n  /**\n   * Name of the category.\n   */\n  name?: string;\n  /**\n   * Scoring of the category.\n   */\n  score?: number;\n  /**\n   * Details of the identified category.\n   */\n  detail?: CategoryDetail;\n}\n\n/**\n * An object describing whether the image contains adult-oriented content and/or is racy.\n */\nexport interface AdultInfo {\n  /**\n   * A value indicating if the image contains adult-oriented content.\n   */\n  isAdultContent?: boolean;\n  /**\n   * A value indicating if the image is racy.\n   */\n  isRacyContent?: boolean;\n  /**\n   * A value indicating if the image is gory.\n   */\n  isGoryContent?: boolean;\n  /**\n   * Score from 0 to 1 that indicates how much the content is considered adult-oriented within the\n   * image.\n   */\n  adultScore?: number;\n  /**\n   * Score from 0 to 1 that indicates how suggestive is the image.\n   */\n  racyScore?: number;\n  /**\n   * Score from 0 to 1 that indicates how gory is the image.\n   */\n  goreScore?: number;\n}\n\n/**\n * An object providing additional metadata describing color attributes.\n */\nexport interface ColorInfo {\n  /**\n   * Possible dominant foreground color.\n   */\n  dominantColorForeground?: string;\n  /**\n   * Possible dominant background color.\n   */\n  dominantColorBackground?: string;\n  /**\n   * An array of possible dominant colors.\n   */\n  dominantColors?: string[];\n  /**\n   * Possible accent color.\n   */\n  accentColor?: string;\n  /**\n   * A value indicating if the image is black and white.\n   */\n  isBWImg?: boolean;\n}\n\n/**\n * An object providing possible image types and matching confidence levels.\n */\nexport interface ImageType {\n  /**\n   * Confidence level that the image is a clip art.\n   */\n  clipArtType?: number;\n  /**\n   * Confidence level that the image is a line drawing.\n   */\n  lineDrawingType?: number;\n}\n\n/**\n * An entity observation in the image, along with the confidence score.\n */\nexport interface ImageTag {\n  /**\n   * Name of the entity.\n   */\n  name?: string;\n  /**\n   * The level of confidence that the entity was observed.\n   */\n  confidence?: number;\n  /**\n   * Optional hint/details for this tag.\n   */\n  hint?: string;\n}\n\n/**\n * An image caption, i.e. a brief description of what the image depicts.\n */\nexport interface ImageCaption {\n  /**\n   * The text of the caption.\n   */\n  text?: string;\n  /**\n   * The level of confidence the service has in the caption.\n   */\n  confidence?: number;\n}\n\n/**\n * A collection of content tags, along with a list of captions sorted by confidence level, and\n * image metadata.\n */\nexport interface ImageDescriptionDetails {\n  /**\n   * A collection of image tags.\n   */\n  tags?: string[];\n  /**\n   * A list of captions, sorted by confidence level.\n   */\n  captions?: ImageCaption[];\n}\n\n/**\n * An object describing a face identified in the image.\n */\nexport interface FaceDescription {\n  /**\n   * Possible age of the face.\n   */\n  age?: number;\n  /**\n   * Possible gender of the face. Possible values include: 'Male', 'Female'\n   */\n  gender?: Gender;\n  /**\n   * Rectangle in the image containing the identified face.\n   */\n  faceRectangle?: FaceRectangle;\n}\n\n/**\n * A bounding box for an area inside an image.\n */\nexport interface BoundingRect {\n  /**\n   * X-coordinate of the top left point of the area, in pixels.\n   */\n  x?: number;\n  /**\n   * Y-coordinate of the top left point of the area, in pixels.\n   */\n  y?: number;\n  /**\n   * Width measured from the top-left point of the area, in pixels.\n   */\n  w?: number;\n  /**\n   * Height measured from the top-left point of the area, in pixels.\n   */\n  h?: number;\n}\n\n/**\n * An object detected inside an image.\n */\nexport interface ObjectHierarchy {\n  /**\n   * Label for the object.\n   */\n  object?: string;\n  /**\n   * Confidence score of having observed the object in the image, as a value ranging from 0 to 1.\n   */\n  confidence?: number;\n  /**\n   * The parent object, from a taxonomy perspective.\n   * The parent object is a more generic form of this object.  For example, a 'bulldog' would have\n   * a parent of 'dog'.\n   */\n  parent?: ObjectHierarchy;\n}\n\n/**\n * An object detected in an image.\n */\nexport interface DetectedObject {\n  /**\n   * Approximate location of the detected object.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly rectangle?: BoundingRect;\n  /**\n   * Label for the object.\n   */\n  object?: string;\n  /**\n   * Confidence score of having observed the object in the image, as a value ranging from 0 to 1.\n   */\n  confidence?: number;\n  /**\n   * The parent object, from a taxonomy perspective.\n   * The parent object is a more generic form of this object.  For example, a 'bulldog' would have\n   * a parent of 'dog'.\n   */\n  parent?: ObjectHierarchy;\n}\n\n/**\n * A brand detected in an image.\n */\nexport interface DetectedBrand {\n  /**\n   * Label for the brand.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly name?: string;\n  /**\n   * Confidence score of having observed the brand in the image, as a value ranging from 0 to 1.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly confidence?: number;\n  /**\n   * Approximate location of the detected brand.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly rectangle?: BoundingRect;\n}\n\n/**\n * Image metadata.\n */\nexport interface ImageMetadata {\n  /**\n   * Image width, in pixels.\n   */\n  width?: number;\n  /**\n   * Image height, in pixels.\n   */\n  height?: number;\n  /**\n   * Image format.\n   */\n  format?: string;\n}\n\n/**\n * Result of AnalyzeImage operation.\n */\nexport interface ImageAnalysis {\n  /**\n   * An array indicating identified categories.\n   */\n  categories?: Category[];\n  /**\n   * An object describing whether the image contains adult-oriented content and/or is racy.\n   */\n  adult?: AdultInfo;\n  /**\n   * An object providing additional metadata describing color attributes.\n   */\n  color?: ColorInfo;\n  /**\n   * An object providing possible image types and matching confidence levels.\n   */\n  imageType?: ImageType;\n  /**\n   * A list of tags with confidence level.\n   */\n  tags?: ImageTag[];\n  /**\n   * A collection of content tags, along with a list of captions sorted by confidence level, and\n   * image metadata.\n   */\n  description?: ImageDescriptionDetails;\n  /**\n   * An array of possible faces within the image.\n   */\n  faces?: FaceDescription[];\n  /**\n   * Array of objects describing what was detected in the image.\n   */\n  objects?: DetectedObject[];\n  /**\n   * Array of brands detected in the image.\n   */\n  brands?: DetectedBrand[];\n  /**\n   * Id of the REST API request.\n   */\n  requestId?: string;\n  metadata?: ImageMetadata;\n  modelVersion?: string;\n}\n\n/**\n * A collection of content tags, along with a list of captions sorted by confidence level, and\n * image metadata.\n */\nexport interface ImageDescription {\n  /**\n   * A collection of image tags.\n   */\n  tags?: string[];\n  /**\n   * A list of captions, sorted by confidence level.\n   */\n  captions?: ImageCaption[];\n  /**\n   * Id of the REST API request.\n   */\n  requestId?: string;\n  metadata?: ImageMetadata;\n  modelVersion?: string;\n}\n\n/**\n * Result of a DetectImage call.\n */\nexport interface DetectResult {\n  /**\n   * An array of detected objects.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly objects?: DetectedObject[];\n  /**\n   * Id of the REST API request.\n   */\n  requestId?: string;\n  metadata?: ImageMetadata;\n  modelVersion?: string;\n}\n\n/**\n * An object describing supported model by name and categories.\n */\nexport interface ModelDescription {\n  /**\n   * The name of the model.\n   */\n  name?: string;\n  /**\n   * Categories of the model.\n   */\n  categories?: string[];\n}\n\n/**\n * Result of the List Domain Models operation.\n */\nexport interface ListModelsResult {\n  /**\n   * An array of supported models.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly modelsProperty?: ModelDescription[];\n}\n\n/**\n * Result of image analysis using a specific domain model including additional metadata.\n */\nexport interface DomainModelResults {\n  /**\n   * Model-specific response.\n   */\n  result?: any;\n  /**\n   * Id of the REST API request.\n   */\n  requestId?: string;\n  metadata?: ImageMetadata;\n  modelVersion?: string;\n}\n\n/**\n * Information on a recognized word.\n */\nexport interface OcrWord {\n  /**\n   * Bounding box of a recognized word. The four integers represent the x-coordinate of the left\n   * edge, the y-coordinate of the top edge, width, and height of the bounding box, in the\n   * coordinate system of the input image, after it has been rotated around its center according to\n   * the detected text angle (see textAngle property), with the origin at the top-left corner, and\n   * the y-axis pointing down.\n   */\n  boundingBox?: string;\n  /**\n   * String value of a recognized word.\n   */\n  text?: string;\n}\n\n/**\n * An object describing a single recognized line of text.\n */\nexport interface OcrLine {\n  /**\n   * Bounding box of a recognized line. The four integers represent the x-coordinate of the left\n   * edge, the y-coordinate of the top edge, width, and height of the bounding box, in the\n   * coordinate system of the input image, after it has been rotated around its center according to\n   * the detected text angle (see textAngle property), with the origin at the top-left corner, and\n   * the y-axis pointing down.\n   */\n  boundingBox?: string;\n  /**\n   * An array of objects, where each object represents a recognized word.\n   */\n  words?: OcrWord[];\n}\n\n/**\n * A region consists of multiple lines (e.g. a column of text in a multi-column document).\n */\nexport interface OcrRegion {\n  /**\n   * Bounding box of a recognized region. The four integers represent the x-coordinate of the left\n   * edge, the y-coordinate of the top edge, width, and height of the bounding box, in the\n   * coordinate system of the input image, after it has been rotated around its center according to\n   * the detected text angle (see textAngle property), with the origin at the top-left corner, and\n   * the y-axis pointing down.\n   */\n  boundingBox?: string;\n  /**\n   * An array of recognized lines of text.\n   */\n  lines?: OcrLine[];\n}\n\n/**\n * An interface representing OcrResult.\n */\nexport interface OcrResult {\n  /**\n   * The BCP-47 language code of the text in the image.\n   */\n  language?: string;\n  /**\n   * The angle, in radians, of the detected text with respect to the closest horizontal or vertical\n   * direction. After rotating the input image clockwise by this angle, the recognized text lines\n   * become horizontal or vertical. In combination with the orientation property it can be used to\n   * overlay recognition results correctly on the original image, by rotating either the original\n   * image or recognition results by a suitable angle around the center of the original image. If\n   * the angle cannot be confidently detected, this property is not present. If the image contains\n   * text at different angles, only part of the text will be recognized correctly.\n   */\n  textAngle?: number;\n  /**\n   * Orientation of the text recognized in the image, if requested. The value (up, down, left, or\n   * right) refers to the direction that the top of the recognized text is facing, after the image\n   * has been rotated around its center according to the detected text angle (see textAngle\n   * property).\n   * If detection of the orientation was not requested, or no text is detected, the value is\n   * 'NotDetected'.\n   */\n  orientation?: string;\n  /**\n   * An array of objects, where each object represents a region of recognized text.\n   */\n  regions?: OcrRegion[];\n  modelVersion?: string;\n}\n\n/**\n * The results of a image tag operation, including any tags and image metadata.\n */\nexport interface TagResult {\n  /**\n   * A list of tags with confidence level.\n   */\n  tags?: ImageTag[];\n  /**\n   * Id of the REST API request.\n   */\n  requestId?: string;\n  metadata?: ImageMetadata;\n  modelVersion?: string;\n}\n\n/**\n * Result of AreaOfInterest operation.\n */\nexport interface AreaOfInterestResult {\n  /**\n   * A bounding box for an area of interest inside an image.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly areaOfInterest?: BoundingRect;\n  /**\n   * Id of the REST API request.\n   */\n  requestId?: string;\n  metadata?: ImageMetadata;\n  modelVersion?: string;\n}\n\n/**\n * An interface representing ImageUrl.\n */\nexport interface ImageUrl {\n  /**\n   * Publicly reachable URL of an image.\n   */\n  url: string;\n}\n\n/**\n * Details about the API request error.\n */\nexport interface ComputerVisionInnerError {\n  /**\n   * The error code. Possible values include: 'InvalidImageFormat', 'UnsupportedMediaType',\n   * 'InvalidImageUrl', 'NotSupportedFeature', 'NotSupportedImage', 'Timeout',\n   * 'InternalServerError', 'InvalidImageSize', 'BadArgument', 'DetectFaceError',\n   * 'NotSupportedLanguage', 'InvalidThumbnailSize', 'InvalidDetails', 'InvalidModel',\n   * 'CancelledRequest', 'NotSupportedVisualFeature', 'FailedToProcess', 'Unspecified',\n   * 'StorageException'\n   */\n  code: ComputerVisionInnerErrorCodeValue;\n  /**\n   * Error message.\n   */\n  message: string;\n}\n\n/**\n * The API request error.\n */\nexport interface ComputerVisionError {\n  /**\n   * The error code. Possible values include: 'InvalidRequest', 'InvalidArgument',\n   * 'InternalServerError', 'ServiceUnavailable'\n   */\n  code: ComputerVisionErrorCodes;\n  /**\n   * A message explaining the error reported by the service.\n   */\n  message: string;\n  /**\n   * Inner error contains more specific information.\n   */\n  innererror?: ComputerVisionInnerError;\n}\n\n/**\n * The API error response.\n */\nexport interface ComputerVisionErrorResponse {\n  /**\n   * Error contents.\n   */\n  error: ComputerVisionError;\n}\n\n/**\n * An object representing the style of the text line.\n */\nexport interface Style {\n  /**\n   * The text line style name, including handwriting and other. Possible values include: 'other',\n   * 'handwriting'\n   */\n  name: TextStyle;\n  /**\n   * The confidence of text line style.\n   */\n  confidence: number;\n}\n\n/**\n * An object representing the appearance of the text line.\n */\nexport interface Appearance {\n  /**\n   * An object representing the style of the text line.\n   */\n  style: Style;\n}\n\n/**\n * An object representing a recognized word.\n */\nexport interface Word {\n  /**\n   * Bounding box of a recognized word.\n   */\n  boundingBox: number[];\n  /**\n   * The text content of the word.\n   */\n  text: string;\n  /**\n   * Qualitative confidence measure.\n   */\n  confidence: number;\n}\n\n/**\n * An object representing a recognized text line.\n */\nexport interface Line {\n  /**\n   * The BCP-47 language code of the recognized text line. Only provided where the language of the\n   * line differs from the page's.\n   */\n  language?: string;\n  /**\n   * Bounding box of a recognized line.\n   */\n  boundingBox: number[];\n  /**\n   * Appearance of the text line.\n   */\n  appearance?: Appearance;\n  /**\n   * The text content of the line.\n   */\n  text: string;\n  /**\n   * List of words in the text line.\n   */\n  words: Word[];\n}\n\n/**\n * Text extracted from a page in the input document.\n */\nexport interface ReadResult {\n  /**\n   * The 1-based page number of the recognition result.\n   */\n  page: number;\n  /**\n   * The BCP-47 language code of the recognized text page.\n   */\n  language?: string;\n  /**\n   * The orientation of the image in degrees in the clockwise direction. Range between [-180, 180).\n   */\n  angle: number;\n  /**\n   * The width of the image in pixels or the PDF in inches.\n   */\n  width: number;\n  /**\n   * The height of the image in pixels or the PDF in inches.\n   */\n  height: number;\n  /**\n   * The unit used in the Width, Height and BoundingBox. For images, the unit is 'pixel'. For PDF,\n   * the unit is 'inch'. Possible values include: 'pixel', 'inch'\n   */\n  unit: TextRecognitionResultDimensionUnit;\n  /**\n   * A list of recognized text lines.\n   */\n  lines: Line[];\n}\n\n/**\n * Analyze batch operation result.\n */\nexport interface AnalyzeResults {\n  /**\n   * Version of schema used for this result.\n   */\n  version: string;\n  /**\n   * Version of the OCR model used for text extraction.\n   */\n  modelVersion: string;\n  /**\n   * Text extracted from the input.\n   */\n  readResults: ReadResult[];\n}\n\n/**\n * OCR result of the read operation.\n */\nexport interface ReadOperationResult {\n  /**\n   * Status of the read operation. Possible values include: 'notStarted', 'running', 'failed',\n   * 'succeeded'\n   */\n  status?: OperationStatusCodes;\n  /**\n   * Get UTC date time the batch operation was submitted.\n   */\n  createdDateTime?: string;\n  /**\n   * Get last updated UTC date time of this batch operation.\n   */\n  lastUpdatedDateTime?: string;\n  /**\n   * Analyze batch operation result.\n   */\n  analyzeResult?: AnalyzeResults;\n}\n\n/**\n * Details about the API request error.\n */\nexport interface ComputerVisionOcrError {\n  /**\n   * The error code.\n   */\n  code: any;\n  /**\n   * A message explaining the error reported by the service.\n   */\n  message: string;\n  /**\n   * A unique request identifier.\n   */\n  requestId?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ComputerVisionClientAnalyzeImageOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * A string indicating what visual feature types to return. Multiple values should be\n   * comma-separated. Valid visual feature types include: Categories - categorizes image content\n   * according to a taxonomy defined in documentation. Tags - tags the image with a detailed list\n   * of words related to the image content. Description - describes the image content with a\n   * complete English sentence. Faces - detects if faces are present. If present, generate\n   * coordinates, gender and age. ImageType - detects if image is clipart or a line drawing. Color\n   * - determines the accent color, dominant color, and whether an image is black&white. Adult -\n   * detects if the image is pornographic in nature (depicts nudity or a sex act), or is gory\n   * (depicts extreme violence or blood). Sexually suggestive content (aka racy content) is also\n   * detected. Objects - detects various objects within an image, including the approximate\n   * location. The Objects argument is only available in English. Brands - detects various brands\n   * within an image, including the approximate location. The Brands argument is only available in\n   * English.\n   */\n  visualFeatures?: VisualFeatureTypes[];\n  /**\n   * A string indicating which domain-specific details to return. Multiple values should be\n   * comma-separated. Valid visual feature types include: Celebrities - identifies celebrities if\n   * detected in the image, Landmarks - identifies notable landmarks in the image.\n   */\n  details?: Details[];\n  /**\n   * The desired language for output generation. If this parameter is not specified, the default\n   * value is \"en\". See https://aka.ms/cv-languages for list of supported languages. Possible\n   * values include: 'ar', 'az', 'bg', 'bs', 'ca', 'cs', 'cy', 'da', 'de', 'el', 'en', 'es', 'et',\n   * 'eu', 'fi', 'fr', 'ga', 'gl', 'he', 'hi', 'hr', 'hu', 'id', 'it', 'ja', 'kk', 'ko', 'lt',\n   * 'lv', 'mk', 'ms', 'nb', 'nl', 'pl', 'prs', 'pt', 'pt-BR', 'pt-PT', 'ro', 'ru', 'sk', 'sl',\n   * 'sr-Cyrl', 'sr-Latn', 'sv', 'th', 'tr', 'uk', 'vi', 'zh', 'zh-Hans', 'zh-Hant'. Default value:\n   * 'en'.\n   */\n  language?: Language;\n  /**\n   * Turn off specified domain models when generating the description.\n   */\n  descriptionExclude?: DescriptionExclude[];\n  /**\n   * Optional parameter to specify the version of the AI model. Accepted values are: \"latest\",\n   * \"2021-04-01\", \"2021-05-01\". Defaults to \"latest\". Default value: 'latest'.\n   */\n  modelVersion?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ComputerVisionClientDescribeImageOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * Maximum number of candidate descriptions to be returned.  The default is 1. Default value: 1.\n   */\n  maxCandidates?: number;\n  /**\n   * The desired language for output generation. If this parameter is not specified, the default\n   * value is \"en\". See https://aka.ms/cv-languages for list of supported languages. Possible\n   * values include: 'ar', 'az', 'bg', 'bs', 'ca', 'cs', 'cy', 'da', 'de', 'el', 'en', 'es', 'et',\n   * 'eu', 'fi', 'fr', 'ga', 'gl', 'he', 'hi', 'hr', 'hu', 'id', 'it', 'ja', 'kk', 'ko', 'lt',\n   * 'lv', 'mk', 'ms', 'nb', 'nl', 'pl', 'prs', 'pt', 'pt-BR', 'pt-PT', 'ro', 'ru', 'sk', 'sl',\n   * 'sr-Cyrl', 'sr-Latn', 'sv', 'th', 'tr', 'uk', 'vi', 'zh', 'zh-Hans', 'zh-Hant'. Default value:\n   * 'en'.\n   */\n  language?: Language1;\n  /**\n   * Turn off specified domain models when generating the description.\n   */\n  descriptionExclude?: DescriptionExclude[];\n  /**\n   * Optional parameter to specify the version of the AI model. Accepted values are: \"latest\",\n   * \"2021-04-01\", \"2021-05-01\". Defaults to \"latest\". Default value: 'latest'.\n   */\n  modelVersion?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ComputerVisionClientDetectObjectsOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * Optional parameter to specify the version of the AI model. Accepted values are: \"latest\",\n   * \"2021-04-01\", \"2021-05-01\". Defaults to \"latest\". Default value: 'latest'.\n   */\n  modelVersion?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ComputerVisionClientAnalyzeImageByDomainOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * The desired language for output generation. If this parameter is not specified, the default\n   * value is \"en\". See https://aka.ms/cv-languages for list of supported languages. Possible\n   * values include: 'ar', 'az', 'bg', 'bs', 'ca', 'cs', 'cy', 'da', 'de', 'el', 'en', 'es', 'et',\n   * 'eu', 'fi', 'fr', 'ga', 'gl', 'he', 'hi', 'hr', 'hu', 'id', 'it', 'ja', 'kk', 'ko', 'lt',\n   * 'lv', 'mk', 'ms', 'nb', 'nl', 'pl', 'prs', 'pt', 'pt-BR', 'pt-PT', 'ro', 'ru', 'sk', 'sl',\n   * 'sr-Cyrl', 'sr-Latn', 'sv', 'th', 'tr', 'uk', 'vi', 'zh', 'zh-Hans', 'zh-Hant'. Default value:\n   * 'en'.\n   */\n  language?: Language2;\n  /**\n   * Optional parameter to specify the version of the AI model. Accepted values are: \"latest\",\n   * \"2021-04-01\", \"2021-05-01\". Defaults to \"latest\". Default value: 'latest'.\n   */\n  modelVersion?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ComputerVisionClientRecognizePrintedTextOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * The BCP-47 language code of the text to be detected in the image. The default value is 'unk'.\n   * Possible values include: 'unk', 'zh-Hans', 'zh-Hant', 'cs', 'da', 'nl', 'en', 'fi', 'fr',\n   * 'de', 'el', 'hu', 'it', 'ja', 'ko', 'nb', 'pl', 'pt', 'ru', 'es', 'sv', 'tr', 'ar', 'ro',\n   * 'sr-Cyrl', 'sr-Latn', 'sk'. Default value: 'unk'.\n   */\n  language?: OcrLanguages;\n  /**\n   * Optional parameter to specify the version of the AI model. Accepted values are: \"latest\",\n   * \"2021-04-01\", \"2021-05-01\". Defaults to \"latest\". Default value: 'latest'.\n   */\n  modelVersion?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ComputerVisionClientTagImageOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * The desired language for output generation. If this parameter is not specified, the default\n   * value is \"en\". See https://aka.ms/cv-languages for list of supported languages. Possible\n   * values include: 'ar', 'az', 'bg', 'bs', 'ca', 'cs', 'cy', 'da', 'de', 'el', 'en', 'es', 'et',\n   * 'eu', 'fi', 'fr', 'ga', 'gl', 'he', 'hi', 'hr', 'hu', 'id', 'it', 'ja', 'kk', 'ko', 'lt',\n   * 'lv', 'mk', 'ms', 'nb', 'nl', 'pl', 'prs', 'pt', 'pt-BR', 'pt-PT', 'ro', 'ru', 'sk', 'sl',\n   * 'sr-Cyrl', 'sr-Latn', 'sv', 'th', 'tr', 'uk', 'vi', 'zh', 'zh-Hans', 'zh-Hant'. Default value:\n   * 'en'.\n   */\n  language?: Language3;\n  /**\n   * Optional parameter to specify the version of the AI model. Accepted values are: \"latest\",\n   * \"2021-04-01\", \"2021-05-01\". Defaults to \"latest\". Default value: 'latest'.\n   */\n  modelVersion?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ComputerVisionClientGenerateThumbnailOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * Boolean flag for enabling smart cropping. Default value: false.\n   */\n  smartCropping?: boolean;\n  /**\n   * Optional parameter to specify the version of the AI model. Accepted values are: \"latest\",\n   * \"2021-04-01\", \"2021-05-01\". Defaults to \"latest\". Default value: 'latest'.\n   */\n  modelVersion?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ComputerVisionClientGetAreaOfInterestOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * Optional parameter to specify the version of the AI model. Accepted values are: \"latest\",\n   * \"2021-04-01\", \"2021-05-01\". Defaults to \"latest\". Default value: 'latest'.\n   */\n  modelVersion?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ComputerVisionClientReadOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * The BCP-47 language code of the text in the document. Read supports auto language\n   * identification and multi-language documents, so only provide a language code if you would like\n   * to force the document to be processed in that specific language. See\n   * https://aka.ms/ocr-languages for list of supported languages. Possible values include: 'af',\n   * 'ast', 'bi', 'br', 'ca', 'ceb', 'ch', 'co', 'crh', 'cs', 'csb', 'da', 'de', 'en', 'es', 'et',\n   * 'eu', 'fi', 'fil', 'fj', 'fr', 'fur', 'fy', 'ga', 'gd', 'gil', 'gl', 'gv', 'hni', 'hsb', 'ht',\n   * 'hu', 'ia', 'id', 'it', 'iu', 'ja', 'jv', 'kaa', 'kac', 'kea', 'kha', 'kl', 'ko', 'ku', 'kw',\n   * 'lb', 'ms', 'mww', 'nap', 'nl', 'no', 'oc', 'pl', 'pt', 'quc', 'rm', 'sco', 'sl', 'sq', 'sv',\n   * 'sw', 'tet', 'tr', 'tt', 'uz', 'vo', 'wae', 'yua', 'za', 'zh-Hans', 'zh-Hant', 'zu'\n   */\n  language?: OcrDetectionLanguage;\n  /**\n   * Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want\n   * to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a\n   * comma.\n   */\n  pages?: string[];\n  /**\n   * Optional parameter to specify the version of the OCR model used for text extraction. Accepted\n   * values are: \"latest\", \"latest-preview\", \"2021-04-12\". Defaults to \"latest\". Default value:\n   * 'latest'.\n   */\n  modelVersion?: string;\n  /**\n   * Optional parameter to specify which reading order algorithm should be applied when ordering\n   * the extract text elements. Can be either 'basic' or 'natural'. Will default to 'basic' if not\n   * specified. Default value: 'basic'.\n   */\n  readingOrder?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ComputerVisionClientAnalyzeImageInStreamOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * A string indicating what visual feature types to return. Multiple values should be\n   * comma-separated. Valid visual feature types include: Categories - categorizes image content\n   * according to a taxonomy defined in documentation. Tags - tags the image with a detailed list\n   * of words related to the image content. Description - describes the image content with a\n   * complete English sentence. Faces - detects if faces are present. If present, generate\n   * coordinates, gender and age. ImageType - detects if image is clipart or a line drawing. Color\n   * - determines the accent color, dominant color, and whether an image is black&white. Adult -\n   * detects if the image is pornographic in nature (depicts nudity or a sex act), or is gory\n   * (depicts extreme violence or blood). Sexually suggestive content (aka racy content) is also\n   * detected. Objects - detects various objects within an image, including the approximate\n   * location. The Objects argument is only available in English. Brands - detects various brands\n   * within an image, including the approximate location. The Brands argument is only available in\n   * English.\n   */\n  visualFeatures?: VisualFeatureTypes[];\n  /**\n   * A string indicating which domain-specific details to return. Multiple values should be\n   * comma-separated. Valid visual feature types include: Celebrities - identifies celebrities if\n   * detected in the image, Landmarks - identifies notable landmarks in the image.\n   */\n  details?: Details[];\n  /**\n   * The desired language for output generation. If this parameter is not specified, the default\n   * value is \"en\". See https://aka.ms/cv-languages for list of supported languages. Possible\n   * values include: 'ar', 'az', 'bg', 'bs', 'ca', 'cs', 'cy', 'da', 'de', 'el', 'en', 'es', 'et',\n   * 'eu', 'fi', 'fr', 'ga', 'gl', 'he', 'hi', 'hr', 'hu', 'id', 'it', 'ja', 'kk', 'ko', 'lt',\n   * 'lv', 'mk', 'ms', 'nb', 'nl', 'pl', 'prs', 'pt', 'pt-BR', 'pt-PT', 'ro', 'ru', 'sk', 'sl',\n   * 'sr-Cyrl', 'sr-Latn', 'sv', 'th', 'tr', 'uk', 'vi', 'zh', 'zh-Hans', 'zh-Hant'. Default value:\n   * 'en'.\n   */\n  language?: Language4;\n  /**\n   * Turn off specified domain models when generating the description.\n   */\n  descriptionExclude?: DescriptionExclude[];\n  /**\n   * Optional parameter to specify the version of the AI model. Accepted values are: \"latest\",\n   * \"2021-04-01\", \"2021-05-01\". Defaults to \"latest\". Default value: 'latest'.\n   */\n  modelVersion?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ComputerVisionClientGetAreaOfInterestInStreamOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * Optional parameter to specify the version of the AI model. Accepted values are: \"latest\",\n   * \"2021-04-01\", \"2021-05-01\". Defaults to \"latest\". Default value: 'latest'.\n   */\n  modelVersion?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ComputerVisionClientDescribeImageInStreamOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * Maximum number of candidate descriptions to be returned.  The default is 1. Default value: 1.\n   */\n  maxCandidates?: number;\n  /**\n   * The desired language for output generation. If this parameter is not specified, the default\n   * value is \"en\". See https://aka.ms/cv-languages for list of supported languages. Possible\n   * values include: 'ar', 'az', 'bg', 'bs', 'ca', 'cs', 'cy', 'da', 'de', 'el', 'en', 'es', 'et',\n   * 'eu', 'fi', 'fr', 'ga', 'gl', 'he', 'hi', 'hr', 'hu', 'id', 'it', 'ja', 'kk', 'ko', 'lt',\n   * 'lv', 'mk', 'ms', 'nb', 'nl', 'pl', 'prs', 'pt', 'pt-BR', 'pt-PT', 'ro', 'ru', 'sk', 'sl',\n   * 'sr-Cyrl', 'sr-Latn', 'sv', 'th', 'tr', 'uk', 'vi', 'zh', 'zh-Hans', 'zh-Hant'. Default value:\n   * 'en'.\n   */\n  language?: Language5;\n  /**\n   * Turn off specified domain models when generating the description.\n   */\n  descriptionExclude?: DescriptionExclude[];\n  /**\n   * Optional parameter to specify the version of the AI model. Accepted values are: \"latest\",\n   * \"2021-04-01\", \"2021-05-01\". Defaults to \"latest\". Default value: 'latest'.\n   */\n  modelVersion?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ComputerVisionClientDetectObjectsInStreamOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * Optional parameter to specify the version of the AI model. Accepted values are: \"latest\",\n   * \"2021-04-01\", \"2021-05-01\". Defaults to \"latest\". Default value: 'latest'.\n   */\n  modelVersion?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ComputerVisionClientGenerateThumbnailInStreamOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * Boolean flag for enabling smart cropping. Default value: false.\n   */\n  smartCropping?: boolean;\n  /**\n   * Optional parameter to specify the version of the AI model. Accepted values are: \"latest\",\n   * \"2021-04-01\", \"2021-05-01\". Defaults to \"latest\". Default value: 'latest'.\n   */\n  modelVersion?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ComputerVisionClientAnalyzeImageByDomainInStreamOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * The desired language for output generation. If this parameter is not specified, the default\n   * value is \"en\". See https://aka.ms/cv-languages for list of supported languages. Possible\n   * values include: 'ar', 'az', 'bg', 'bs', 'ca', 'cs', 'cy', 'da', 'de', 'el', 'en', 'es', 'et',\n   * 'eu', 'fi', 'fr', 'ga', 'gl', 'he', 'hi', 'hr', 'hu', 'id', 'it', 'ja', 'kk', 'ko', 'lt',\n   * 'lv', 'mk', 'ms', 'nb', 'nl', 'pl', 'prs', 'pt', 'pt-BR', 'pt-PT', 'ro', 'ru', 'sk', 'sl',\n   * 'sr-Cyrl', 'sr-Latn', 'sv', 'th', 'tr', 'uk', 'vi', 'zh', 'zh-Hans', 'zh-Hant'. Default value:\n   * 'en'.\n   */\n  language?: Language6;\n  /**\n   * Optional parameter to specify the version of the AI model. Accepted values are: \"latest\",\n   * \"2021-04-01\", \"2021-05-01\". Defaults to \"latest\". Default value: 'latest'.\n   */\n  modelVersion?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ComputerVisionClientRecognizePrintedTextInStreamOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * The BCP-47 language code of the text to be detected in the image. The default value is 'unk'.\n   * Possible values include: 'unk', 'zh-Hans', 'zh-Hant', 'cs', 'da', 'nl', 'en', 'fi', 'fr',\n   * 'de', 'el', 'hu', 'it', 'ja', 'ko', 'nb', 'pl', 'pt', 'ru', 'es', 'sv', 'tr', 'ar', 'ro',\n   * 'sr-Cyrl', 'sr-Latn', 'sk'. Default value: 'unk'.\n   */\n  language?: OcrLanguages;\n  /**\n   * Optional parameter to specify the version of the AI model. Accepted values are: \"latest\",\n   * \"2021-04-01\", \"2021-05-01\". Defaults to \"latest\". Default value: 'latest'.\n   */\n  modelVersion?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ComputerVisionClientTagImageInStreamOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * The desired language for output generation. If this parameter is not specified, the default\n   * value is \"en\". See https://aka.ms/cv-languages for list of supported languages. Possible\n   * values include: 'ar', 'az', 'bg', 'bs', 'ca', 'cs', 'cy', 'da', 'de', 'el', 'en', 'es', 'et',\n   * 'eu', 'fi', 'fr', 'ga', 'gl', 'he', 'hi', 'hr', 'hu', 'id', 'it', 'ja', 'kk', 'ko', 'lt',\n   * 'lv', 'mk', 'ms', 'nb', 'nl', 'pl', 'prs', 'pt', 'pt-BR', 'pt-PT', 'ro', 'ru', 'sk', 'sl',\n   * 'sr-Cyrl', 'sr-Latn', 'sv', 'th', 'tr', 'uk', 'vi', 'zh', 'zh-Hans', 'zh-Hant'. Default value:\n   * 'en'.\n   */\n  language?: Language7;\n  /**\n   * Optional parameter to specify the version of the AI model. Accepted values are: \"latest\",\n   * \"2021-04-01\", \"2021-05-01\". Defaults to \"latest\". Default value: 'latest'.\n   */\n  modelVersion?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ComputerVisionClientReadInStreamOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * The BCP-47 language code of the text in the document. Read supports auto language\n   * identification and multi-language documents, so only provide a language code if you would like\n   * to force the document to be processed in that specific language. See\n   * https://aka.ms/ocr-languages for list of supported languages. Possible values include: 'af',\n   * 'ast', 'bi', 'br', 'ca', 'ceb', 'ch', 'co', 'crh', 'cs', 'csb', 'da', 'de', 'en', 'es', 'et',\n   * 'eu', 'fi', 'fil', 'fj', 'fr', 'fur', 'fy', 'ga', 'gd', 'gil', 'gl', 'gv', 'hni', 'hsb', 'ht',\n   * 'hu', 'ia', 'id', 'it', 'iu', 'ja', 'jv', 'kaa', 'kac', 'kea', 'kha', 'kl', 'ko', 'ku', 'kw',\n   * 'lb', 'ms', 'mww', 'nap', 'nl', 'no', 'oc', 'pl', 'pt', 'quc', 'rm', 'sco', 'sl', 'sq', 'sv',\n   * 'sw', 'tet', 'tr', 'tt', 'uz', 'vo', 'wae', 'yua', 'za', 'zh-Hans', 'zh-Hant', 'zu'\n   */\n  language?: OcrDetectionLanguage;\n  /**\n   * Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want\n   * to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a\n   * comma.\n   */\n  pages?: string[];\n  /**\n   * Optional parameter to specify the version of the OCR model used for text extraction. Accepted\n   * values are: \"latest\", \"latest-preview\", \"2021-04-12\". Defaults to \"latest\". Default value:\n   * 'latest'.\n   */\n  modelVersion?: string;\n  /**\n   * Optional parameter to specify which reading order algorithm should be applied when ordering\n   * the extract text elements. Can be either 'basic' or 'natural'. Will default to 'basic' if not\n   * specified. Default value: 'basic'.\n   */\n  readingOrder?: string;\n}\n\n/**\n * Defines headers for Read operation.\n */\nexport interface ReadHeaders {\n  /**\n   * URL to query for status of the operation. The operation ID will expire in 48 hours.\n   */\n  operationLocation: string;\n}\n\n/**\n * Defines headers for ReadInStream operation.\n */\nexport interface ReadInStreamHeaders {\n  /**\n   * URL to query for status of the operation. The operation ID will expire in 48 hours.\n   */\n  operationLocation: string;\n}\n\n/**\n * Defines values for Gender.\n * Possible values include: 'Male', 'Female'\n * @readonly\n * @enum {string}\n */\nexport type Gender = 'Male' | 'Female';\n\n/**\n * Defines values for ComputerVisionErrorCodes.\n * Possible values include: 'InvalidRequest', 'InvalidArgument', 'InternalServerError',\n * 'ServiceUnavailable'\n * @readonly\n * @enum {string}\n */\nexport type ComputerVisionErrorCodes = 'InvalidRequest' | 'InvalidArgument' | 'InternalServerError' | 'ServiceUnavailable';\n\n/**\n * Defines values for ComputerVisionInnerErrorCodeValue.\n * Possible values include: 'InvalidImageFormat', 'UnsupportedMediaType', 'InvalidImageUrl',\n * 'NotSupportedFeature', 'NotSupportedImage', 'Timeout', 'InternalServerError',\n * 'InvalidImageSize', 'BadArgument', 'DetectFaceError', 'NotSupportedLanguage',\n * 'InvalidThumbnailSize', 'InvalidDetails', 'InvalidModel', 'CancelledRequest',\n * 'NotSupportedVisualFeature', 'FailedToProcess', 'Unspecified', 'StorageException'\n * @readonly\n * @enum {string}\n */\nexport type ComputerVisionInnerErrorCodeValue = 'InvalidImageFormat' | 'UnsupportedMediaType' | 'InvalidImageUrl' | 'NotSupportedFeature' | 'NotSupportedImage' | 'Timeout' | 'InternalServerError' | 'InvalidImageSize' | 'BadArgument' | 'DetectFaceError' | 'NotSupportedLanguage' | 'InvalidThumbnailSize' | 'InvalidDetails' | 'InvalidModel' | 'CancelledRequest' | 'NotSupportedVisualFeature' | 'FailedToProcess' | 'Unspecified' | 'StorageException';\n\n/**\n * Defines values for OperationStatusCodes.\n * Possible values include: 'notStarted', 'running', 'failed', 'succeeded'\n * @readonly\n * @enum {string}\n */\nexport type OperationStatusCodes = 'notStarted' | 'running' | 'failed' | 'succeeded';\n\n/**\n * Defines values for TextRecognitionResultDimensionUnit.\n * Possible values include: 'pixel', 'inch'\n * @readonly\n * @enum {string}\n */\nexport type TextRecognitionResultDimensionUnit = 'pixel' | 'inch';\n\n/**\n * Defines values for TextStyle.\n * Possible values include: 'other', 'handwriting'\n * @readonly\n * @enum {string}\n */\nexport type TextStyle = 'other' | 'handwriting';\n\n/**\n * Defines values for DescriptionExclude.\n * Possible values include: 'Celebrities', 'Landmarks'\n * @readonly\n * @enum {string}\n */\nexport type DescriptionExclude = 'Celebrities' | 'Landmarks';\n\n/**\n * Defines values for OcrLanguages.\n * Possible values include: 'unk', 'zh-Hans', 'zh-Hant', 'cs', 'da', 'nl', 'en', 'fi', 'fr', 'de',\n * 'el', 'hu', 'it', 'ja', 'ko', 'nb', 'pl', 'pt', 'ru', 'es', 'sv', 'tr', 'ar', 'ro', 'sr-Cyrl',\n * 'sr-Latn', 'sk'\n * @readonly\n * @enum {string}\n */\nexport type OcrLanguages = 'unk' | 'zh-Hans' | 'zh-Hant' | 'cs' | 'da' | 'nl' | 'en' | 'fi' | 'fr' | 'de' | 'el' | 'hu' | 'it' | 'ja' | 'ko' | 'nb' | 'pl' | 'pt' | 'ru' | 'es' | 'sv' | 'tr' | 'ar' | 'ro' | 'sr-Cyrl' | 'sr-Latn' | 'sk';\n\n/**\n * Defines values for VisualFeatureTypes.\n * Possible values include: 'ImageType', 'Faces', 'Adult', 'Categories', 'Color', 'Tags',\n * 'Description', 'Objects', 'Brands'\n * @readonly\n * @enum {string}\n */\nexport type VisualFeatureTypes = 'ImageType' | 'Faces' | 'Adult' | 'Categories' | 'Color' | 'Tags' | 'Description' | 'Objects' | 'Brands';\n\n/**\n * Defines values for OcrDetectionLanguage.\n * Possible values include: 'af', 'ast', 'bi', 'br', 'ca', 'ceb', 'ch', 'co', 'crh', 'cs', 'csb',\n * 'da', 'de', 'en', 'es', 'et', 'eu', 'fi', 'fil', 'fj', 'fr', 'fur', 'fy', 'ga', 'gd', 'gil',\n * 'gl', 'gv', 'hni', 'hsb', 'ht', 'hu', 'ia', 'id', 'it', 'iu', 'ja', 'jv', 'kaa', 'kac', 'kea',\n * 'kha', 'kl', 'ko', 'ku', 'kw', 'lb', 'ms', 'mww', 'nap', 'nl', 'no', 'oc', 'pl', 'pt', 'quc',\n * 'rm', 'sco', 'sl', 'sq', 'sv', 'sw', 'tet', 'tr', 'tt', 'uz', 'vo', 'wae', 'yua', 'za',\n * 'zh-Hans', 'zh-Hant', 'zu'\n * @readonly\n * @enum {string}\n */\nexport type OcrDetectionLanguage = 'af' | 'ast' | 'bi' | 'br' | 'ca' | 'ceb' | 'ch' | 'co' | 'crh' | 'cs' | 'csb' | 'da' | 'de' | 'en' | 'es' | 'et' | 'eu' | 'fi' | 'fil' | 'fj' | 'fr' | 'fur' | 'fy' | 'ga' | 'gd' | 'gil' | 'gl' | 'gv' | 'hni' | 'hsb' | 'ht' | 'hu' | 'ia' | 'id' | 'it' | 'iu' | 'ja' | 'jv' | 'kaa' | 'kac' | 'kea' | 'kha' | 'kl' | 'ko' | 'ku' | 'kw' | 'lb' | 'ms' | 'mww' | 'nap' | 'nl' | 'no' | 'oc' | 'pl' | 'pt' | 'quc' | 'rm' | 'sco' | 'sl' | 'sq' | 'sv' | 'sw' | 'tet' | 'tr' | 'tt' | 'uz' | 'vo' | 'wae' | 'yua' | 'za' | 'zh-Hans' | 'zh-Hant' | 'zu';\n\n/**\n * Defines values for Details.\n * Possible values include: 'Celebrities', 'Landmarks'\n * @readonly\n * @enum {string}\n */\nexport type Details = 'Celebrities' | 'Landmarks';\n\n/**\n * Defines values for Language.\n * Possible values include: 'ar', 'az', 'bg', 'bs', 'ca', 'cs', 'cy', 'da', 'de', 'el', 'en', 'es',\n * 'et', 'eu', 'fi', 'fr', 'ga', 'gl', 'he', 'hi', 'hr', 'hu', 'id', 'it', 'ja', 'kk', 'ko', 'lt',\n * 'lv', 'mk', 'ms', 'nb', 'nl', 'pl', 'prs', 'pt', 'pt-BR', 'pt-PT', 'ro', 'ru', 'sk', 'sl',\n * 'sr-Cyrl', 'sr-Latn', 'sv', 'th', 'tr', 'uk', 'vi', 'zh', 'zh-Hans', 'zh-Hant'\n * @readonly\n * @enum {string}\n */\nexport type Language = 'ar' | 'az' | 'bg' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'eu' | 'fi' | 'fr' | 'ga' | 'gl' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kk' | 'ko' | 'lt' | 'lv' | 'mk' | 'ms' | 'nb' | 'nl' | 'pl' | 'prs' | 'pt' | 'pt-BR' | 'pt-PT' | 'ro' | 'ru' | 'sk' | 'sl' | 'sr-Cyrl' | 'sr-Latn' | 'sv' | 'th' | 'tr' | 'uk' | 'vi' | 'zh' | 'zh-Hans' | 'zh-Hant';\n\n/**\n * Defines values for Language1.\n * Possible values include: 'ar', 'az', 'bg', 'bs', 'ca', 'cs', 'cy', 'da', 'de', 'el', 'en', 'es',\n * 'et', 'eu', 'fi', 'fr', 'ga', 'gl', 'he', 'hi', 'hr', 'hu', 'id', 'it', 'ja', 'kk', 'ko', 'lt',\n * 'lv', 'mk', 'ms', 'nb', 'nl', 'pl', 'prs', 'pt', 'pt-BR', 'pt-PT', 'ro', 'ru', 'sk', 'sl',\n * 'sr-Cyrl', 'sr-Latn', 'sv', 'th', 'tr', 'uk', 'vi', 'zh', 'zh-Hans', 'zh-Hant'\n * @readonly\n * @enum {string}\n */\nexport type Language1 = 'ar' | 'az' | 'bg' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'eu' | 'fi' | 'fr' | 'ga' | 'gl' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kk' | 'ko' | 'lt' | 'lv' | 'mk' | 'ms' | 'nb' | 'nl' | 'pl' | 'prs' | 'pt' | 'pt-BR' | 'pt-PT' | 'ro' | 'ru' | 'sk' | 'sl' | 'sr-Cyrl' | 'sr-Latn' | 'sv' | 'th' | 'tr' | 'uk' | 'vi' | 'zh' | 'zh-Hans' | 'zh-Hant';\n\n/**\n * Defines values for Language2.\n * Possible values include: 'ar', 'az', 'bg', 'bs', 'ca', 'cs', 'cy', 'da', 'de', 'el', 'en', 'es',\n * 'et', 'eu', 'fi', 'fr', 'ga', 'gl', 'he', 'hi', 'hr', 'hu', 'id', 'it', 'ja', 'kk', 'ko', 'lt',\n * 'lv', 'mk', 'ms', 'nb', 'nl', 'pl', 'prs', 'pt', 'pt-BR', 'pt-PT', 'ro', 'ru', 'sk', 'sl',\n * 'sr-Cyrl', 'sr-Latn', 'sv', 'th', 'tr', 'uk', 'vi', 'zh', 'zh-Hans', 'zh-Hant'\n * @readonly\n * @enum {string}\n */\nexport type Language2 = 'ar' | 'az' | 'bg' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'eu' | 'fi' | 'fr' | 'ga' | 'gl' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kk' | 'ko' | 'lt' | 'lv' | 'mk' | 'ms' | 'nb' | 'nl' | 'pl' | 'prs' | 'pt' | 'pt-BR' | 'pt-PT' | 'ro' | 'ru' | 'sk' | 'sl' | 'sr-Cyrl' | 'sr-Latn' | 'sv' | 'th' | 'tr' | 'uk' | 'vi' | 'zh' | 'zh-Hans' | 'zh-Hant';\n\n/**\n * Defines values for Language3.\n * Possible values include: 'ar', 'az', 'bg', 'bs', 'ca', 'cs', 'cy', 'da', 'de', 'el', 'en', 'es',\n * 'et', 'eu', 'fi', 'fr', 'ga', 'gl', 'he', 'hi', 'hr', 'hu', 'id', 'it', 'ja', 'kk', 'ko', 'lt',\n * 'lv', 'mk', 'ms', 'nb', 'nl', 'pl', 'prs', 'pt', 'pt-BR', 'pt-PT', 'ro', 'ru', 'sk', 'sl',\n * 'sr-Cyrl', 'sr-Latn', 'sv', 'th', 'tr', 'uk', 'vi', 'zh', 'zh-Hans', 'zh-Hant'\n * @readonly\n * @enum {string}\n */\nexport type Language3 = 'ar' | 'az' | 'bg' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'eu' | 'fi' | 'fr' | 'ga' | 'gl' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kk' | 'ko' | 'lt' | 'lv' | 'mk' | 'ms' | 'nb' | 'nl' | 'pl' | 'prs' | 'pt' | 'pt-BR' | 'pt-PT' | 'ro' | 'ru' | 'sk' | 'sl' | 'sr-Cyrl' | 'sr-Latn' | 'sv' | 'th' | 'tr' | 'uk' | 'vi' | 'zh' | 'zh-Hans' | 'zh-Hant';\n\n/**\n * Defines values for Language4.\n * Possible values include: 'ar', 'az', 'bg', 'bs', 'ca', 'cs', 'cy', 'da', 'de', 'el', 'en', 'es',\n * 'et', 'eu', 'fi', 'fr', 'ga', 'gl', 'he', 'hi', 'hr', 'hu', 'id', 'it', 'ja', 'kk', 'ko', 'lt',\n * 'lv', 'mk', 'ms', 'nb', 'nl', 'pl', 'prs', 'pt', 'pt-BR', 'pt-PT', 'ro', 'ru', 'sk', 'sl',\n * 'sr-Cyrl', 'sr-Latn', 'sv', 'th', 'tr', 'uk', 'vi', 'zh', 'zh-Hans', 'zh-Hant'\n * @readonly\n * @enum {string}\n */\nexport type Language4 = 'ar' | 'az' | 'bg' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'eu' | 'fi' | 'fr' | 'ga' | 'gl' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kk' | 'ko' | 'lt' | 'lv' | 'mk' | 'ms' | 'nb' | 'nl' | 'pl' | 'prs' | 'pt' | 'pt-BR' | 'pt-PT' | 'ro' | 'ru' | 'sk' | 'sl' | 'sr-Cyrl' | 'sr-Latn' | 'sv' | 'th' | 'tr' | 'uk' | 'vi' | 'zh' | 'zh-Hans' | 'zh-Hant';\n\n/**\n * Defines values for Language5.\n * Possible values include: 'ar', 'az', 'bg', 'bs', 'ca', 'cs', 'cy', 'da', 'de', 'el', 'en', 'es',\n * 'et', 'eu', 'fi', 'fr', 'ga', 'gl', 'he', 'hi', 'hr', 'hu', 'id', 'it', 'ja', 'kk', 'ko', 'lt',\n * 'lv', 'mk', 'ms', 'nb', 'nl', 'pl', 'prs', 'pt', 'pt-BR', 'pt-PT', 'ro', 'ru', 'sk', 'sl',\n * 'sr-Cyrl', 'sr-Latn', 'sv', 'th', 'tr', 'uk', 'vi', 'zh', 'zh-Hans', 'zh-Hant'\n * @readonly\n * @enum {string}\n */\nexport type Language5 = 'ar' | 'az' | 'bg' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'eu' | 'fi' | 'fr' | 'ga' | 'gl' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kk' | 'ko' | 'lt' | 'lv' | 'mk' | 'ms' | 'nb' | 'nl' | 'pl' | 'prs' | 'pt' | 'pt-BR' | 'pt-PT' | 'ro' | 'ru' | 'sk' | 'sl' | 'sr-Cyrl' | 'sr-Latn' | 'sv' | 'th' | 'tr' | 'uk' | 'vi' | 'zh' | 'zh-Hans' | 'zh-Hant';\n\n/**\n * Defines values for Language6.\n * Possible values include: 'ar', 'az', 'bg', 'bs', 'ca', 'cs', 'cy', 'da', 'de', 'el', 'en', 'es',\n * 'et', 'eu', 'fi', 'fr', 'ga', 'gl', 'he', 'hi', 'hr', 'hu', 'id', 'it', 'ja', 'kk', 'ko', 'lt',\n * 'lv', 'mk', 'ms', 'nb', 'nl', 'pl', 'prs', 'pt', 'pt-BR', 'pt-PT', 'ro', 'ru', 'sk', 'sl',\n * 'sr-Cyrl', 'sr-Latn', 'sv', 'th', 'tr', 'uk', 'vi', 'zh', 'zh-Hans', 'zh-Hant'\n * @readonly\n * @enum {string}\n */\nexport type Language6 = 'ar' | 'az' | 'bg' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'eu' | 'fi' | 'fr' | 'ga' | 'gl' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kk' | 'ko' | 'lt' | 'lv' | 'mk' | 'ms' | 'nb' | 'nl' | 'pl' | 'prs' | 'pt' | 'pt-BR' | 'pt-PT' | 'ro' | 'ru' | 'sk' | 'sl' | 'sr-Cyrl' | 'sr-Latn' | 'sv' | 'th' | 'tr' | 'uk' | 'vi' | 'zh' | 'zh-Hans' | 'zh-Hant';\n\n/**\n * Defines values for Language7.\n * Possible values include: 'ar', 'az', 'bg', 'bs', 'ca', 'cs', 'cy', 'da', 'de', 'el', 'en', 'es',\n * 'et', 'eu', 'fi', 'fr', 'ga', 'gl', 'he', 'hi', 'hr', 'hu', 'id', 'it', 'ja', 'kk', 'ko', 'lt',\n * 'lv', 'mk', 'ms', 'nb', 'nl', 'pl', 'prs', 'pt', 'pt-BR', 'pt-PT', 'ro', 'ru', 'sk', 'sl',\n * 'sr-Cyrl', 'sr-Latn', 'sv', 'th', 'tr', 'uk', 'vi', 'zh', 'zh-Hans', 'zh-Hant'\n * @readonly\n * @enum {string}\n */\nexport type Language7 = 'ar' | 'az' | 'bg' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'eu' | 'fi' | 'fr' | 'ga' | 'gl' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kk' | 'ko' | 'lt' | 'lv' | 'mk' | 'ms' | 'nb' | 'nl' | 'pl' | 'prs' | 'pt' | 'pt-BR' | 'pt-PT' | 'ro' | 'ru' | 'sk' | 'sl' | 'sr-Cyrl' | 'sr-Latn' | 'sv' | 'th' | 'tr' | 'uk' | 'vi' | 'zh' | 'zh-Hans' | 'zh-Hant';\n\n/**\n * Contains response data for the analyzeImage operation.\n */\nexport type AnalyzeImageResponse = ImageAnalysis & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ImageAnalysis;\n    };\n};\n\n/**\n * Contains response data for the describeImage operation.\n */\nexport type DescribeImageResponse = ImageDescription & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ImageDescription;\n    };\n};\n\n/**\n * Contains response data for the detectObjects operation.\n */\nexport type DetectObjectsResponse = DetectResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: DetectResult;\n    };\n};\n\n/**\n * Contains response data for the listModels operation.\n */\nexport type ListModelsResponse = ListModelsResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ListModelsResult;\n    };\n};\n\n/**\n * Contains response data for the analyzeImageByDomain operation.\n */\nexport type AnalyzeImageByDomainResponse = DomainModelResults & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: DomainModelResults;\n    };\n};\n\n/**\n * Contains response data for the recognizePrintedText operation.\n */\nexport type RecognizePrintedTextResponse = OcrResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: OcrResult;\n    };\n};\n\n/**\n * Contains response data for the tagImage operation.\n */\nexport type TagImageResponse = TagResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: TagResult;\n    };\n};\n\n/**\n * Contains response data for the generateThumbnail operation.\n */\nexport type GenerateThumbnailResponse = {\n  /**\n   * BROWSER ONLY\n   *\n   * The response body as a browser Blob.\n   * Always undefined in node.js.\n   */\n  blobBody?: Promise<Blob>;\n\n  /**\n   * NODEJS ONLY\n   *\n   * The response body as a node.js Readable stream.\n   * Always undefined in the browser.\n   */\n  readableStreamBody?: NodeJS.ReadableStream;\n\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse;\n};\n\n/**\n * Contains response data for the getAreaOfInterest operation.\n */\nexport type GetAreaOfInterestResponse = AreaOfInterestResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: AreaOfInterestResult;\n    };\n};\n\n/**\n * Contains response data for the read operation.\n */\nexport type ReadResponse = ReadHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ReadHeaders;\n    };\n};\n\n/**\n * Contains response data for the getReadResult operation.\n */\nexport type GetReadResultResponse = ReadOperationResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ReadOperationResult;\n    };\n};\n\n/**\n * Contains response data for the analyzeImageInStream operation.\n */\nexport type AnalyzeImageInStreamResponse = ImageAnalysis & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ImageAnalysis;\n    };\n};\n\n/**\n * Contains response data for the getAreaOfInterestInStream operation.\n */\nexport type GetAreaOfInterestInStreamResponse = AreaOfInterestResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: AreaOfInterestResult;\n    };\n};\n\n/**\n * Contains response data for the describeImageInStream operation.\n */\nexport type DescribeImageInStreamResponse = ImageDescription & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ImageDescription;\n    };\n};\n\n/**\n * Contains response data for the detectObjectsInStream operation.\n */\nexport type DetectObjectsInStreamResponse = DetectResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: DetectResult;\n    };\n};\n\n/**\n * Contains response data for the generateThumbnailInStream operation.\n */\nexport type GenerateThumbnailInStreamResponse = {\n  /**\n   * BROWSER ONLY\n   *\n   * The response body as a browser Blob.\n   * Always undefined in node.js.\n   */\n  blobBody?: Promise<Blob>;\n\n  /**\n   * NODEJS ONLY\n   *\n   * The response body as a node.js Readable stream.\n   * Always undefined in the browser.\n   */\n  readableStreamBody?: NodeJS.ReadableStream;\n\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse;\n};\n\n/**\n * Contains response data for the analyzeImageByDomainInStream operation.\n */\nexport type AnalyzeImageByDomainInStreamResponse = DomainModelResults & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: DomainModelResults;\n    };\n};\n\n/**\n * Contains response data for the recognizePrintedTextInStream operation.\n */\nexport type RecognizePrintedTextInStreamResponse = OcrResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: OcrResult;\n    };\n};\n\n/**\n * Contains response data for the tagImageInStream operation.\n */\nexport type TagImageInStreamResponse = TagResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: TagResult;\n    };\n};\n\n/**\n * Contains response data for the readInStream operation.\n */\nexport type ReadInStreamResponse = ReadInStreamHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ReadInStreamHeaders;\n    };\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\n\nexport const FaceRectangle: msRest.CompositeMapper = {\n  serializedName: \"FaceRectangle\",\n  type: {\n    name: \"Composite\",\n    className: \"FaceRectangle\",\n    modelProperties: {\n      left: {\n        nullable: false,\n        serializedName: \"left\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      top: {\n        nullable: false,\n        serializedName: \"top\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      width: {\n        nullable: false,\n        serializedName: \"width\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      height: {\n        nullable: false,\n        serializedName: \"height\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const CelebritiesModel: msRest.CompositeMapper = {\n  serializedName: \"CelebritiesModel\",\n  type: {\n    name: \"Composite\",\n    className: \"CelebritiesModel\",\n    modelProperties: {\n      name: {\n        nullable: true,\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      confidence: {\n        nullable: false,\n        serializedName: \"confidence\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      faceRectangle: {\n        serializedName: \"faceRectangle\",\n        type: {\n          name: \"Composite\",\n          className: \"FaceRectangle\"\n        }\n      }\n    }\n  }\n};\n\nexport const LandmarksModel: msRest.CompositeMapper = {\n  serializedName: \"LandmarksModel\",\n  type: {\n    name: \"Composite\",\n    className: \"LandmarksModel\",\n    modelProperties: {\n      name: {\n        nullable: true,\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      confidence: {\n        nullable: false,\n        serializedName: \"confidence\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const CategoryDetail: msRest.CompositeMapper = {\n  serializedName: \"CategoryDetail\",\n  type: {\n    name: \"Composite\",\n    className: \"CategoryDetail\",\n    modelProperties: {\n      celebrities: {\n        nullable: true,\n        serializedName: \"celebrities\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CelebritiesModel\"\n            }\n          }\n        }\n      },\n      landmarks: {\n        nullable: true,\n        serializedName: \"landmarks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"LandmarksModel\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Category: msRest.CompositeMapper = {\n  serializedName: \"Category\",\n  type: {\n    name: \"Composite\",\n    className: \"Category\",\n    modelProperties: {\n      name: {\n        nullable: true,\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      score: {\n        nullable: false,\n        serializedName: \"score\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      detail: {\n        serializedName: \"detail\",\n        type: {\n          name: \"Composite\",\n          className: \"CategoryDetail\"\n        }\n      }\n    }\n  }\n};\n\nexport const AdultInfo: msRest.CompositeMapper = {\n  serializedName: \"AdultInfo\",\n  type: {\n    name: \"Composite\",\n    className: \"AdultInfo\",\n    modelProperties: {\n      isAdultContent: {\n        nullable: false,\n        serializedName: \"isAdultContent\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      isRacyContent: {\n        nullable: false,\n        serializedName: \"isRacyContent\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      isGoryContent: {\n        nullable: false,\n        serializedName: \"isGoryContent\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      adultScore: {\n        nullable: false,\n        serializedName: \"adultScore\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      racyScore: {\n        nullable: false,\n        serializedName: \"racyScore\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      goreScore: {\n        nullable: false,\n        serializedName: \"goreScore\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const ColorInfo: msRest.CompositeMapper = {\n  serializedName: \"ColorInfo\",\n  type: {\n    name: \"Composite\",\n    className: \"ColorInfo\",\n    modelProperties: {\n      dominantColorForeground: {\n        nullable: true,\n        serializedName: \"dominantColorForeground\",\n        type: {\n          name: \"String\"\n        }\n      },\n      dominantColorBackground: {\n        nullable: true,\n        serializedName: \"dominantColorBackground\",\n        type: {\n          name: \"String\"\n        }\n      },\n      dominantColors: {\n        nullable: true,\n        serializedName: \"dominantColors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      accentColor: {\n        nullable: true,\n        serializedName: \"accentColor\",\n        type: {\n          name: \"String\"\n        }\n      },\n      isBWImg: {\n        nullable: false,\n        serializedName: \"isBWImg\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const ImageType: msRest.CompositeMapper = {\n  serializedName: \"ImageType\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageType\",\n    modelProperties: {\n      clipArtType: {\n        nullable: false,\n        serializedName: \"clipArtType\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      lineDrawingType: {\n        nullable: false,\n        serializedName: \"lineDrawingType\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const ImageTag: msRest.CompositeMapper = {\n  serializedName: \"ImageTag\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageTag\",\n    modelProperties: {\n      name: {\n        nullable: true,\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      confidence: {\n        nullable: false,\n        serializedName: \"confidence\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      hint: {\n        nullable: true,\n        serializedName: \"hint\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ImageCaption: msRest.CompositeMapper = {\n  serializedName: \"ImageCaption\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageCaption\",\n    modelProperties: {\n      text: {\n        nullable: true,\n        serializedName: \"text\",\n        type: {\n          name: \"String\"\n        }\n      },\n      confidence: {\n        nullable: false,\n        serializedName: \"confidence\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const ImageDescriptionDetails: msRest.CompositeMapper = {\n  serializedName: \"ImageDescriptionDetails\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageDescriptionDetails\",\n    modelProperties: {\n      tags: {\n        nullable: true,\n        serializedName: \"tags\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      captions: {\n        nullable: true,\n        serializedName: \"captions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ImageCaption\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const FaceDescription: msRest.CompositeMapper = {\n  serializedName: \"FaceDescription\",\n  type: {\n    name: \"Composite\",\n    className: \"FaceDescription\",\n    modelProperties: {\n      age: {\n        nullable: false,\n        serializedName: \"age\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      gender: {\n        nullable: true,\n        serializedName: \"gender\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Male\",\n            \"Female\"\n          ]\n        }\n      },\n      faceRectangle: {\n        serializedName: \"faceRectangle\",\n        type: {\n          name: \"Composite\",\n          className: \"FaceRectangle\"\n        }\n      }\n    }\n  }\n};\n\nexport const BoundingRect: msRest.CompositeMapper = {\n  serializedName: \"BoundingRect\",\n  type: {\n    name: \"Composite\",\n    className: \"BoundingRect\",\n    modelProperties: {\n      x: {\n        nullable: false,\n        serializedName: \"x\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      y: {\n        nullable: false,\n        serializedName: \"y\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      w: {\n        nullable: false,\n        serializedName: \"w\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      h: {\n        nullable: false,\n        serializedName: \"h\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const ObjectHierarchy: msRest.CompositeMapper = {\n  serializedName: \"ObjectHierarchy\",\n  type: {\n    name: \"Composite\",\n    className: \"ObjectHierarchy\",\n    modelProperties: {\n      object: {\n        nullable: true,\n        serializedName: \"object\",\n        type: {\n          name: \"String\"\n        }\n      },\n      confidence: {\n        nullable: false,\n        serializedName: \"confidence\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      parent: {\n        serializedName: \"parent\",\n        type: {\n          name: \"Composite\",\n          className: \"ObjectHierarchy\"\n        }\n      }\n    }\n  }\n};\n\nexport const DetectedObject: msRest.CompositeMapper = {\n  serializedName: \"DetectedObject\",\n  type: {\n    name: \"Composite\",\n    className: \"DetectedObject\",\n    modelProperties: {\n      rectangle: {\n        readOnly: true,\n        serializedName: \"rectangle\",\n        type: {\n          name: \"Composite\",\n          className: \"BoundingRect\"\n        }\n      },\n      object: {\n        nullable: true,\n        serializedName: \"object\",\n        type: {\n          name: \"String\"\n        }\n      },\n      confidence: {\n        nullable: false,\n        serializedName: \"confidence\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      parent: {\n        serializedName: \"parent\",\n        type: {\n          name: \"Composite\",\n          className: \"ObjectHierarchy\"\n        }\n      }\n    }\n  }\n};\n\nexport const DetectedBrand: msRest.CompositeMapper = {\n  serializedName: \"DetectedBrand\",\n  type: {\n    name: \"Composite\",\n    className: \"DetectedBrand\",\n    modelProperties: {\n      name: {\n        nullable: true,\n        readOnly: true,\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      confidence: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"confidence\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      rectangle: {\n        readOnly: true,\n        serializedName: \"rectangle\",\n        type: {\n          name: \"Composite\",\n          className: \"BoundingRect\"\n        }\n      }\n    }\n  }\n};\n\nexport const ImageMetadata: msRest.CompositeMapper = {\n  serializedName: \"ImageMetadata\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageMetadata\",\n    modelProperties: {\n      width: {\n        nullable: false,\n        serializedName: \"width\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      height: {\n        nullable: false,\n        serializedName: \"height\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      format: {\n        nullable: true,\n        serializedName: \"format\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ImageAnalysis: msRest.CompositeMapper = {\n  serializedName: \"ImageAnalysis\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageAnalysis\",\n    modelProperties: {\n      categories: {\n        nullable: true,\n        serializedName: \"categories\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Category\"\n            }\n          }\n        }\n      },\n      adult: {\n        serializedName: \"adult\",\n        type: {\n          name: \"Composite\",\n          className: \"AdultInfo\"\n        }\n      },\n      color: {\n        serializedName: \"color\",\n        type: {\n          name: \"Composite\",\n          className: \"ColorInfo\"\n        }\n      },\n      imageType: {\n        serializedName: \"imageType\",\n        type: {\n          name: \"Composite\",\n          className: \"ImageType\"\n        }\n      },\n      tags: {\n        nullable: true,\n        serializedName: \"tags\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ImageTag\"\n            }\n          }\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"Composite\",\n          className: \"ImageDescriptionDetails\"\n        }\n      },\n      faces: {\n        nullable: true,\n        serializedName: \"faces\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"FaceDescription\"\n            }\n          }\n        }\n      },\n      objects: {\n        nullable: true,\n        serializedName: \"objects\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DetectedObject\"\n            }\n          }\n        }\n      },\n      brands: {\n        nullable: true,\n        serializedName: \"brands\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DetectedBrand\"\n            }\n          }\n        }\n      },\n      requestId: {\n        nullable: true,\n        serializedName: \"requestId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      metadata: {\n        serializedName: \"metadata\",\n        type: {\n          name: \"Composite\",\n          className: \"ImageMetadata\"\n        }\n      },\n      modelVersion: {\n        serializedName: \"modelVersion\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ImageDescription: msRest.CompositeMapper = {\n  serializedName: \"ImageDescription\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageDescription\",\n    modelProperties: {\n      tags: {\n        nullable: true,\n        serializedName: \"description.tags\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      captions: {\n        nullable: true,\n        serializedName: \"description.captions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ImageCaption\"\n            }\n          }\n        }\n      },\n      requestId: {\n        nullable: true,\n        serializedName: \"requestId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      metadata: {\n        serializedName: \"metadata\",\n        type: {\n          name: \"Composite\",\n          className: \"ImageMetadata\"\n        }\n      },\n      modelVersion: {\n        serializedName: \"modelVersion\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DetectResult: msRest.CompositeMapper = {\n  serializedName: \"DetectResult\",\n  type: {\n    name: \"Composite\",\n    className: \"DetectResult\",\n    modelProperties: {\n      objects: {\n        nullable: true,\n        readOnly: true,\n        serializedName: \"objects\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DetectedObject\"\n            }\n          }\n        }\n      },\n      requestId: {\n        nullable: true,\n        serializedName: \"requestId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      metadata: {\n        serializedName: \"metadata\",\n        type: {\n          name: \"Composite\",\n          className: \"ImageMetadata\"\n        }\n      },\n      modelVersion: {\n        serializedName: \"modelVersion\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ModelDescription: msRest.CompositeMapper = {\n  serializedName: \"ModelDescription\",\n  type: {\n    name: \"Composite\",\n    className: \"ModelDescription\",\n    modelProperties: {\n      name: {\n        nullable: true,\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      categories: {\n        nullable: true,\n        serializedName: \"categories\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ListModelsResult: msRest.CompositeMapper = {\n  serializedName: \"ListModelsResult\",\n  type: {\n    name: \"Composite\",\n    className: \"ListModelsResult\",\n    modelProperties: {\n      modelsProperty: {\n        nullable: true,\n        readOnly: true,\n        serializedName: \"models\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ModelDescription\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DomainModelResults: msRest.CompositeMapper = {\n  serializedName: \"DomainModelResults\",\n  type: {\n    name: \"Composite\",\n    className: \"DomainModelResults\",\n    modelProperties: {\n      result: {\n        serializedName: \"result\",\n        type: {\n          name: \"Object\"\n        }\n      },\n      requestId: {\n        nullable: true,\n        serializedName: \"requestId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      metadata: {\n        serializedName: \"metadata\",\n        type: {\n          name: \"Composite\",\n          className: \"ImageMetadata\"\n        }\n      },\n      modelVersion: {\n        serializedName: \"modelVersion\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OcrWord: msRest.CompositeMapper = {\n  serializedName: \"OcrWord\",\n  type: {\n    name: \"Composite\",\n    className: \"OcrWord\",\n    modelProperties: {\n      boundingBox: {\n        nullable: true,\n        serializedName: \"boundingBox\",\n        type: {\n          name: \"String\"\n        }\n      },\n      text: {\n        nullable: true,\n        serializedName: \"text\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OcrLine: msRest.CompositeMapper = {\n  serializedName: \"OcrLine\",\n  type: {\n    name: \"Composite\",\n    className: \"OcrLine\",\n    modelProperties: {\n      boundingBox: {\n        nullable: true,\n        serializedName: \"boundingBox\",\n        type: {\n          name: \"String\"\n        }\n      },\n      words: {\n        nullable: true,\n        serializedName: \"words\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"OcrWord\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const OcrRegion: msRest.CompositeMapper = {\n  serializedName: \"OcrRegion\",\n  type: {\n    name: \"Composite\",\n    className: \"OcrRegion\",\n    modelProperties: {\n      boundingBox: {\n        nullable: true,\n        serializedName: \"boundingBox\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lines: {\n        nullable: true,\n        serializedName: \"lines\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"OcrLine\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const OcrResult: msRest.CompositeMapper = {\n  serializedName: \"OcrResult\",\n  type: {\n    name: \"Composite\",\n    className: \"OcrResult\",\n    modelProperties: {\n      language: {\n        nullable: true,\n        serializedName: \"language\",\n        type: {\n          name: \"String\"\n        }\n      },\n      textAngle: {\n        nullable: false,\n        serializedName: \"textAngle\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      orientation: {\n        nullable: true,\n        serializedName: \"orientation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      regions: {\n        nullable: true,\n        serializedName: \"regions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"OcrRegion\"\n            }\n          }\n        }\n      },\n      modelVersion: {\n        serializedName: \"modelVersion\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TagResult: msRest.CompositeMapper = {\n  serializedName: \"TagResult\",\n  type: {\n    name: \"Composite\",\n    className: \"TagResult\",\n    modelProperties: {\n      tags: {\n        nullable: true,\n        serializedName: \"tags\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ImageTag\"\n            }\n          }\n        }\n      },\n      requestId: {\n        nullable: true,\n        serializedName: \"requestId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      metadata: {\n        serializedName: \"metadata\",\n        type: {\n          name: \"Composite\",\n          className: \"ImageMetadata\"\n        }\n      },\n      modelVersion: {\n        serializedName: \"modelVersion\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AreaOfInterestResult: msRest.CompositeMapper = {\n  serializedName: \"AreaOfInterestResult\",\n  type: {\n    name: \"Composite\",\n    className: \"AreaOfInterestResult\",\n    modelProperties: {\n      areaOfInterest: {\n        readOnly: true,\n        serializedName: \"areaOfInterest\",\n        type: {\n          name: \"Composite\",\n          className: \"BoundingRect\"\n        }\n      },\n      requestId: {\n        nullable: true,\n        serializedName: \"requestId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      metadata: {\n        serializedName: \"metadata\",\n        type: {\n          name: \"Composite\",\n          className: \"ImageMetadata\"\n        }\n      },\n      modelVersion: {\n        serializedName: \"modelVersion\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ImageUrl: msRest.CompositeMapper = {\n  serializedName: \"ImageUrl\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageUrl\",\n    modelProperties: {\n      url: {\n        required: true,\n        serializedName: \"url\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ComputerVisionInnerError: msRest.CompositeMapper = {\n  serializedName: \"ComputerVisionInnerError\",\n  type: {\n    name: \"Composite\",\n    className: \"ComputerVisionInnerError\",\n    modelProperties: {\n      code: {\n        required: true,\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        required: true,\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ComputerVisionError: msRest.CompositeMapper = {\n  serializedName: \"ComputerVisionError\",\n  type: {\n    name: \"Composite\",\n    className: \"ComputerVisionError\",\n    modelProperties: {\n      code: {\n        required: true,\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        required: true,\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      },\n      innererror: {\n        serializedName: \"innererror\",\n        type: {\n          name: \"Composite\",\n          className: \"ComputerVisionInnerError\"\n        }\n      }\n    }\n  }\n};\n\nexport const ComputerVisionErrorResponse: msRest.CompositeMapper = {\n  serializedName: \"ComputerVisionErrorResponse\",\n  type: {\n    name: \"Composite\",\n    className: \"ComputerVisionErrorResponse\",\n    modelProperties: {\n      error: {\n        required: true,\n        serializedName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"ComputerVisionError\"\n        }\n      }\n    }\n  }\n};\n\nexport const Style: msRest.CompositeMapper = {\n  serializedName: \"Style\",\n  type: {\n    name: \"Composite\",\n    className: \"Style\",\n    modelProperties: {\n      name: {\n        required: true,\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      confidence: {\n        required: true,\n        serializedName: \"confidence\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Appearance: msRest.CompositeMapper = {\n  serializedName: \"Appearance\",\n  type: {\n    name: \"Composite\",\n    className: \"Appearance\",\n    modelProperties: {\n      style: {\n        required: true,\n        serializedName: \"style\",\n        type: {\n          name: \"Composite\",\n          className: \"Style\"\n        }\n      }\n    }\n  }\n};\n\nexport const Word: msRest.CompositeMapper = {\n  serializedName: \"Word\",\n  type: {\n    name: \"Composite\",\n    className: \"Word\",\n    modelProperties: {\n      boundingBox: {\n        required: true,\n        serializedName: \"boundingBox\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Number\"\n            }\n          }\n        }\n      },\n      text: {\n        required: true,\n        serializedName: \"text\",\n        type: {\n          name: \"String\"\n        }\n      },\n      confidence: {\n        required: true,\n        serializedName: \"confidence\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Line: msRest.CompositeMapper = {\n  serializedName: \"Line\",\n  type: {\n    name: \"Composite\",\n    className: \"Line\",\n    modelProperties: {\n      language: {\n        serializedName: \"language\",\n        type: {\n          name: \"String\"\n        }\n      },\n      boundingBox: {\n        required: true,\n        serializedName: \"boundingBox\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Number\"\n            }\n          }\n        }\n      },\n      appearance: {\n        serializedName: \"appearance\",\n        type: {\n          name: \"Composite\",\n          className: \"Appearance\"\n        }\n      },\n      text: {\n        required: true,\n        serializedName: \"text\",\n        type: {\n          name: \"String\"\n        }\n      },\n      words: {\n        required: true,\n        serializedName: \"words\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Word\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ReadResult: msRest.CompositeMapper = {\n  serializedName: \"ReadResult\",\n  type: {\n    name: \"Composite\",\n    className: \"ReadResult\",\n    modelProperties: {\n      page: {\n        required: true,\n        serializedName: \"page\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      language: {\n        serializedName: \"language\",\n        type: {\n          name: \"String\"\n        }\n      },\n      angle: {\n        required: true,\n        serializedName: \"angle\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      width: {\n        required: true,\n        serializedName: \"width\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      height: {\n        required: true,\n        serializedName: \"height\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      unit: {\n        required: true,\n        nullable: false,\n        serializedName: \"unit\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"pixel\",\n            \"inch\"\n          ]\n        }\n      },\n      lines: {\n        required: true,\n        serializedName: \"lines\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Line\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyzeResults: msRest.CompositeMapper = {\n  serializedName: \"analyzeResults\",\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeResults\",\n    modelProperties: {\n      version: {\n        required: true,\n        serializedName: \"version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      modelVersion: {\n        required: true,\n        serializedName: \"modelVersion\",\n        constraints: {\n          Pattern: /^(latest|\\d{4}-\\d{2}-\\d{2})(-preview)?$/\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      readResults: {\n        required: true,\n        serializedName: \"readResults\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ReadResult\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ReadOperationResult: msRest.CompositeMapper = {\n  serializedName: \"ReadOperationResult\",\n  type: {\n    name: \"Composite\",\n    className: \"ReadOperationResult\",\n    modelProperties: {\n      status: {\n        nullable: false,\n        serializedName: \"status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"notStarted\",\n            \"running\",\n            \"failed\",\n            \"succeeded\"\n          ]\n        }\n      },\n      createdDateTime: {\n        nullable: false,\n        serializedName: \"createdDateTime\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastUpdatedDateTime: {\n        nullable: false,\n        serializedName: \"lastUpdatedDateTime\",\n        type: {\n          name: \"String\"\n        }\n      },\n      analyzeResult: {\n        serializedName: \"analyzeResult\",\n        type: {\n          name: \"Composite\",\n          className: \"AnalyzeResults\"\n        }\n      }\n    }\n  }\n};\n\nexport const ComputerVisionOcrError: msRest.CompositeMapper = {\n  serializedName: \"ComputerVisionOcrError\",\n  type: {\n    name: \"Composite\",\n    className: \"ComputerVisionOcrError\",\n    modelProperties: {\n      code: {\n        required: true,\n        serializedName: \"code\",\n        type: {\n          name: \"Object\"\n        }\n      },\n      message: {\n        required: true,\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"requestId\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ReadHeaders: msRest.CompositeMapper = {\n  serializedName: \"read-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ReadHeaders\",\n    modelProperties: {\n      operationLocation: {\n        serializedName: \"operation-location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ReadInStreamHeaders: msRest.CompositeMapper = {\n  serializedName: \"readinstream-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ReadInStreamHeaders\",\n    modelProperties: {\n      operationLocation: {\n        serializedName: \"operation-location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\nexport const descriptionExclude: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"descriptionExclude\"\n  ],\n  mapper: {\n    serializedName: \"descriptionExclude\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Celebrities\",\n            \"Landmarks\"\n          ]\n        }\n      }\n    }\n  },\n  collectionFormat: msRest.QueryCollectionFormat.Csv\n};\nexport const details: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"details\"\n  ],\n  mapper: {\n    serializedName: \"details\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Celebrities\",\n            \"Landmarks\"\n          ]\n        }\n      }\n    }\n  },\n  collectionFormat: msRest.QueryCollectionFormat.Csv\n};\nexport const detectOrientation: msRest.OperationQueryParameter = {\n  parameterPath: \"detectOrientation\",\n  mapper: {\n    required: true,\n    serializedName: \"detectOrientation\",\n    defaultValue: true,\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\nexport const endpoint: msRest.OperationURLParameter = {\n  parameterPath: \"endpoint\",\n  mapper: {\n    required: true,\n    serializedName: \"Endpoint\",\n    defaultValue: '',\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\nexport const height: msRest.OperationQueryParameter = {\n  parameterPath: \"height\",\n  mapper: {\n    required: true,\n    serializedName: \"height\",\n    constraints: {\n      InclusiveMaximum: 1024,\n      InclusiveMinimum: 1\n    },\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const language0: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"language\"\n  ],\n  mapper: {\n    serializedName: \"language\",\n    defaultValue: 'en',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const language1: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"language\"\n  ],\n  mapper: {\n    serializedName: \"language\",\n    defaultValue: 'unk',\n    type: {\n      name: \"Enum\",\n      allowedValues: [\n        \"unk\",\n        \"zh-Hans\",\n        \"zh-Hant\",\n        \"cs\",\n        \"da\",\n        \"nl\",\n        \"en\",\n        \"fi\",\n        \"fr\",\n        \"de\",\n        \"el\",\n        \"hu\",\n        \"it\",\n        \"ja\",\n        \"ko\",\n        \"nb\",\n        \"pl\",\n        \"pt\",\n        \"ru\",\n        \"es\",\n        \"sv\",\n        \"tr\",\n        \"ar\",\n        \"ro\",\n        \"sr-Cyrl\",\n        \"sr-Latn\",\n        \"sk\"\n      ]\n    }\n  }\n};\nexport const language2: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"language\"\n  ],\n  mapper: {\n    serializedName: \"language\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const maxCandidates: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"maxCandidates\"\n  ],\n  mapper: {\n    serializedName: \"maxCandidates\",\n    defaultValue: 1,\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const model: msRest.OperationURLParameter = {\n  parameterPath: \"model\",\n  mapper: {\n    required: true,\n    serializedName: \"model\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const modelVersion: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"modelVersion\"\n  ],\n  mapper: {\n    serializedName: \"model-version\",\n    defaultValue: 'latest',\n    constraints: {\n      Pattern: /^(latest|\\d{4}-\\d{2}-\\d{2})(-preview)?$/\n    },\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const operationId: msRest.OperationURLParameter = {\n  parameterPath: \"operationId\",\n  mapper: {\n    required: true,\n    serializedName: \"operationId\",\n    type: {\n      name: \"Uuid\"\n    }\n  }\n};\nexport const pages: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"pages\"\n  ],\n  mapper: {\n    serializedName: \"pages\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  },\n  collectionFormat: msRest.QueryCollectionFormat.Csv\n};\nexport const readingOrder: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"readingOrder\"\n  ],\n  mapper: {\n    serializedName: \"readingOrder\",\n    defaultValue: 'basic',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const smartCropping: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"smartCropping\"\n  ],\n  mapper: {\n    serializedName: \"smartCropping\",\n    defaultValue: false,\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\nexport const visualFeatures: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"visualFeatures\"\n  ],\n  mapper: {\n    serializedName: \"visualFeatures\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"ImageType\",\n            \"Faces\",\n            \"Adult\",\n            \"Categories\",\n            \"Color\",\n            \"Tags\",\n            \"Description\",\n            \"Objects\",\n            \"Brands\"\n          ]\n        }\n      }\n    }\n  },\n  collectionFormat: msRest.QueryCollectionFormat.Csv\n};\nexport const width: msRest.OperationQueryParameter = {\n  parameterPath: \"width\",\n  mapper: {\n    required: true,\n    serializedName: \"width\",\n    constraints: {\n      InclusiveMaximum: 1024,\n      InclusiveMinimum: 1\n    },\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\nconst packageName = \"@azure/cognitiveservices-computervision\";\nconst packageVersion = \"8.2.0\";\n\nexport class ComputerVisionClientContext extends msRest.ServiceClient {\n  endpoint: string;\n  credentials: msRest.ServiceClientCredentials;\n\n  /**\n   * Initializes a new instance of the ComputerVisionClientContext class.\n   * @param endpoint Supported Cognitive Services endpoints.\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param [options] The parameter options\n   */\n  constructor(credentials: msRest.ServiceClientCredentials, endpoint: string, options?: msRest.ServiceClientOptions) {\n    if (endpoint == undefined) {\n      throw new Error(\"'endpoint' cannot be null.\");\n    }\n    if (credentials == undefined) {\n      throw new Error(\"'credentials' cannot be null.\");\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    if (!options.userAgent) {\n      const defaultUserAgent = msRest.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(credentials, options);\n\n    this.baseUri = \"{Endpoint}/vision/v3.2\";\n    this.requestContentType = \"application/json; charset=utf-8\";\n    this.endpoint = endpoint;\n    this.credentials = credentials;\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"./models\";\nimport * as Mappers from \"./models/mappers\";\nimport * as Parameters from \"./models/parameters\";\nimport { ComputerVisionClientContext } from \"./computerVisionClientContext\";\n\nclass ComputerVisionClient extends ComputerVisionClientContext {\n  /**\n   * Initializes a new instance of the ComputerVisionClient class.\n   * @param endpoint Supported Cognitive Services endpoints.\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param [options] The parameter options\n   */\n  constructor(credentials: msRest.ServiceClientCredentials, endpoint: string, options?: msRest.ServiceClientOptions) {\n    super(credentials, endpoint, options);\n  }\n\n  /**\n   * This operation extracts a rich set of visual features based on the image content.\n   * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within\n   * your request, there is an optional parameter to allow you to choose which features to return. By\n   * default, image categories are returned in the response.\n   * A successful response will be returned in JSON. If the request failed, the response will contain\n   * an error code and a message to help understand what went wrong.\n   * @param url Publicly reachable URL of an image.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.AnalyzeImageResponse>\n   */\n  analyzeImage(url: string, options?: Models.ComputerVisionClientAnalyzeImageOptionalParams): Promise<Models.AnalyzeImageResponse>;\n  /**\n   * @param url Publicly reachable URL of an image.\n   * @param callback The callback\n   */\n  analyzeImage(url: string, callback: msRest.ServiceCallback<Models.ImageAnalysis>): void;\n  /**\n   * @param url Publicly reachable URL of an image.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  analyzeImage(url: string, options: Models.ComputerVisionClientAnalyzeImageOptionalParams, callback: msRest.ServiceCallback<Models.ImageAnalysis>): void;\n  analyzeImage(url: string, options?: Models.ComputerVisionClientAnalyzeImageOptionalParams | msRest.ServiceCallback<Models.ImageAnalysis>, callback?: msRest.ServiceCallback<Models.ImageAnalysis>): Promise<Models.AnalyzeImageResponse> {\n    return this.sendOperationRequest(\n      {\n        url,\n        options\n      },\n      analyzeImageOperationSpec,\n      callback) as Promise<Models.AnalyzeImageResponse>;\n  }\n\n  /**\n   * This operation generates a description of an image in human readable language with complete\n   * sentences. The description is based on a collection of content tags, which are also returned by\n   * the operation. More than one description can be generated for each image. Descriptions are\n   * ordered by their confidence score. Descriptions may include results from celebrity and landmark\n   * domain models, if applicable.\n   * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.\n   * A successful response will be returned in JSON. If the request failed, the response will contain\n   * an error code and a message to help understand what went wrong.\n   * @param url Publicly reachable URL of an image.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DescribeImageResponse>\n   */\n  describeImage(url: string, options?: Models.ComputerVisionClientDescribeImageOptionalParams): Promise<Models.DescribeImageResponse>;\n  /**\n   * @param url Publicly reachable URL of an image.\n   * @param callback The callback\n   */\n  describeImage(url: string, callback: msRest.ServiceCallback<Models.ImageDescription>): void;\n  /**\n   * @param url Publicly reachable URL of an image.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  describeImage(url: string, options: Models.ComputerVisionClientDescribeImageOptionalParams, callback: msRest.ServiceCallback<Models.ImageDescription>): void;\n  describeImage(url: string, options?: Models.ComputerVisionClientDescribeImageOptionalParams | msRest.ServiceCallback<Models.ImageDescription>, callback?: msRest.ServiceCallback<Models.ImageDescription>): Promise<Models.DescribeImageResponse> {\n    return this.sendOperationRequest(\n      {\n        url,\n        options\n      },\n      describeImageOperationSpec,\n      callback) as Promise<Models.DescribeImageResponse>;\n  }\n\n  /**\n   * Performs object detection on the specified image.\n   * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.\n   * A successful response will be returned in JSON. If the request failed, the response will contain\n   * an error code and a message to help understand what went wrong.\n   * @param url Publicly reachable URL of an image.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DetectObjectsResponse>\n   */\n  detectObjects(url: string, options?: Models.ComputerVisionClientDetectObjectsOptionalParams): Promise<Models.DetectObjectsResponse>;\n  /**\n   * @param url Publicly reachable URL of an image.\n   * @param callback The callback\n   */\n  detectObjects(url: string, callback: msRest.ServiceCallback<Models.DetectResult>): void;\n  /**\n   * @param url Publicly reachable URL of an image.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  detectObjects(url: string, options: Models.ComputerVisionClientDetectObjectsOptionalParams, callback: msRest.ServiceCallback<Models.DetectResult>): void;\n  detectObjects(url: string, options?: Models.ComputerVisionClientDetectObjectsOptionalParams | msRest.ServiceCallback<Models.DetectResult>, callback?: msRest.ServiceCallback<Models.DetectResult>): Promise<Models.DetectObjectsResponse> {\n    return this.sendOperationRequest(\n      {\n        url,\n        options\n      },\n      detectObjectsOperationSpec,\n      callback) as Promise<Models.DetectObjectsResponse>;\n  }\n\n  /**\n   * This operation returns the list of domain-specific models that are supported by the Computer\n   * Vision API. Currently, the API supports following domain-specific models: celebrity recognizer,\n   * landmark recognizer.\n   * A successful response will be returned in JSON. If the request failed, the response will contain\n   * an error code and a message to help understand what went wrong.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ListModelsResponse>\n   */\n  listModels(options?: msRest.RequestOptionsBase): Promise<Models.ListModelsResponse>;\n  /**\n   * @param callback The callback\n   */\n  listModels(callback: msRest.ServiceCallback<Models.ListModelsResult>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listModels(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListModelsResult>): void;\n  listModels(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListModelsResult>, callback?: msRest.ServiceCallback<Models.ListModelsResult>): Promise<Models.ListModelsResponse> {\n    return this.sendOperationRequest(\n      {\n        options\n      },\n      listModelsOperationSpec,\n      callback) as Promise<Models.ListModelsResponse>;\n  }\n\n  /**\n   * This operation recognizes content within an image by applying a domain-specific model. The list\n   * of domain-specific models that are supported by the Computer Vision API can be retrieved using\n   * the /models GET request. Currently, the API provides following domain-specific models:\n   * celebrities, landmarks.\n   * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.\n   * A successful response will be returned in JSON.\n   * If the request failed, the response will contain an error code and a message to help understand\n   * what went wrong.\n   * @param model The domain-specific content to recognize.\n   * @param url Publicly reachable URL of an image.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.AnalyzeImageByDomainResponse>\n   */\n  analyzeImageByDomain(model: string, url: string, options?: Models.ComputerVisionClientAnalyzeImageByDomainOptionalParams): Promise<Models.AnalyzeImageByDomainResponse>;\n  /**\n   * @param model The domain-specific content to recognize.\n   * @param url Publicly reachable URL of an image.\n   * @param callback The callback\n   */\n  analyzeImageByDomain(model: string, url: string, callback: msRest.ServiceCallback<Models.DomainModelResults>): void;\n  /**\n   * @param model The domain-specific content to recognize.\n   * @param url Publicly reachable URL of an image.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  analyzeImageByDomain(model: string, url: string, options: Models.ComputerVisionClientAnalyzeImageByDomainOptionalParams, callback: msRest.ServiceCallback<Models.DomainModelResults>): void;\n  analyzeImageByDomain(model: string, url: string, options?: Models.ComputerVisionClientAnalyzeImageByDomainOptionalParams | msRest.ServiceCallback<Models.DomainModelResults>, callback?: msRest.ServiceCallback<Models.DomainModelResults>): Promise<Models.AnalyzeImageByDomainResponse> {\n    return this.sendOperationRequest(\n      {\n        model,\n        url,\n        options\n      },\n      analyzeImageByDomainOperationSpec,\n      callback) as Promise<Models.AnalyzeImageByDomainResponse>;\n  }\n\n  /**\n   * Optical Character Recognition (OCR) detects text in an image and extracts the recognized\n   * characters into a machine-usable character stream.\n   * Upon success, the OCR results will be returned.\n   * Upon failure, the error code together with an error message will be returned. The error code can\n   * be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage,\n   * NotSupportedLanguage, or InternalServerError.\n   * @param detectOrientation Whether detect the text orientation in the image. With\n   * detectOrientation=true the OCR service tries to detect the image orientation and correct it\n   * before further processing (e.g. if it's upside-down).\n   * @param url Publicly reachable URL of an image.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RecognizePrintedTextResponse>\n   */\n  recognizePrintedText(detectOrientation: boolean, url: string, options?: Models.ComputerVisionClientRecognizePrintedTextOptionalParams): Promise<Models.RecognizePrintedTextResponse>;\n  /**\n   * @param detectOrientation Whether detect the text orientation in the image. With\n   * detectOrientation=true the OCR service tries to detect the image orientation and correct it\n   * before further processing (e.g. if it's upside-down).\n   * @param url Publicly reachable URL of an image.\n   * @param callback The callback\n   */\n  recognizePrintedText(detectOrientation: boolean, url: string, callback: msRest.ServiceCallback<Models.OcrResult>): void;\n  /**\n   * @param detectOrientation Whether detect the text orientation in the image. With\n   * detectOrientation=true the OCR service tries to detect the image orientation and correct it\n   * before further processing (e.g. if it's upside-down).\n   * @param url Publicly reachable URL of an image.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  recognizePrintedText(detectOrientation: boolean, url: string, options: Models.ComputerVisionClientRecognizePrintedTextOptionalParams, callback: msRest.ServiceCallback<Models.OcrResult>): void;\n  recognizePrintedText(detectOrientation: boolean, url: string, options?: Models.ComputerVisionClientRecognizePrintedTextOptionalParams | msRest.ServiceCallback<Models.OcrResult>, callback?: msRest.ServiceCallback<Models.OcrResult>): Promise<Models.RecognizePrintedTextResponse> {\n    return this.sendOperationRequest(\n      {\n        detectOrientation,\n        url,\n        options\n      },\n      recognizePrintedTextOperationSpec,\n      callback) as Promise<Models.RecognizePrintedTextResponse>;\n  }\n\n  /**\n   * This operation generates a list of words, or tags, that are relevant to the content of the\n   * supplied image. The Computer Vision API can return tags based on objects, living beings, scenery\n   * or actions found in images. Unlike categories, tags are not organized according to a\n   * hierarchical classification system, but correspond to image content. Tags may contain hints to\n   * avoid ambiguity or provide context, for example the tag \"ascomycete\" may be accompanied by the\n   * hint \"fungus\".\n   * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.\n   * A successful response will be returned in JSON. If the request failed, the response will contain\n   * an error code and a message to help understand what went wrong.\n   * @param url Publicly reachable URL of an image.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.TagImageResponse>\n   */\n  tagImage(url: string, options?: Models.ComputerVisionClientTagImageOptionalParams): Promise<Models.TagImageResponse>;\n  /**\n   * @param url Publicly reachable URL of an image.\n   * @param callback The callback\n   */\n  tagImage(url: string, callback: msRest.ServiceCallback<Models.TagResult>): void;\n  /**\n   * @param url Publicly reachable URL of an image.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  tagImage(url: string, options: Models.ComputerVisionClientTagImageOptionalParams, callback: msRest.ServiceCallback<Models.TagResult>): void;\n  tagImage(url: string, options?: Models.ComputerVisionClientTagImageOptionalParams | msRest.ServiceCallback<Models.TagResult>, callback?: msRest.ServiceCallback<Models.TagResult>): Promise<Models.TagImageResponse> {\n    return this.sendOperationRequest(\n      {\n        url,\n        options\n      },\n      tagImageOperationSpec,\n      callback) as Promise<Models.TagImageResponse>;\n  }\n\n  /**\n   * This operation generates a thumbnail image with the user-specified width and height. By default,\n   * the service analyzes the image, identifies the region of interest (ROI), and generates smart\n   * cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio\n   * that differs from that of the input image.\n   * A successful response contains the thumbnail image binary. If the request failed, the response\n   * contains an error code and a message to help determine what went wrong.\n   * Upon failure, the error code and an error message are returned. The error code could be one of\n   * InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage,\n   * FailedToProcess, Timeout, or InternalServerError.\n   * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended\n   * minimum of 50.\n   * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended\n   * minimum of 50.\n   * @param url Publicly reachable URL of an image.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GenerateThumbnailResponse>\n   */\n  generateThumbnail(width: number, height: number, url: string, options?: Models.ComputerVisionClientGenerateThumbnailOptionalParams): Promise<Models.GenerateThumbnailResponse>;\n  /**\n   * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended\n   * minimum of 50.\n   * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended\n   * minimum of 50.\n   * @param url Publicly reachable URL of an image.\n   * @param callback The callback\n   */\n  generateThumbnail(width: number, height: number, url: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended\n   * minimum of 50.\n   * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended\n   * minimum of 50.\n   * @param url Publicly reachable URL of an image.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  generateThumbnail(width: number, height: number, url: string, options: Models.ComputerVisionClientGenerateThumbnailOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  generateThumbnail(width: number, height: number, url: string, options?: Models.ComputerVisionClientGenerateThumbnailOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.GenerateThumbnailResponse> {\n    return this.sendOperationRequest(\n      {\n        width,\n        height,\n        url,\n        options\n      },\n      generateThumbnailOperationSpec,\n      callback) as Promise<Models.GenerateThumbnailResponse>;\n  }\n\n  /**\n   * This operation returns a bounding box around the most important area of the image.\n   * A successful response will be returned in JSON. If the request failed, the response contains an\n   * error code and a message to help determine what went wrong.\n   * Upon failure, the error code and an error message are returned. The error code could be one of\n   * InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess,\n   * Timeout, or InternalServerError.\n   * @param url Publicly reachable URL of an image.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetAreaOfInterestResponse>\n   */\n  getAreaOfInterest(url: string, options?: Models.ComputerVisionClientGetAreaOfInterestOptionalParams): Promise<Models.GetAreaOfInterestResponse>;\n  /**\n   * @param url Publicly reachable URL of an image.\n   * @param callback The callback\n   */\n  getAreaOfInterest(url: string, callback: msRest.ServiceCallback<Models.AreaOfInterestResult>): void;\n  /**\n   * @param url Publicly reachable URL of an image.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getAreaOfInterest(url: string, options: Models.ComputerVisionClientGetAreaOfInterestOptionalParams, callback: msRest.ServiceCallback<Models.AreaOfInterestResult>): void;\n  getAreaOfInterest(url: string, options?: Models.ComputerVisionClientGetAreaOfInterestOptionalParams | msRest.ServiceCallback<Models.AreaOfInterestResult>, callback?: msRest.ServiceCallback<Models.AreaOfInterestResult>): Promise<Models.GetAreaOfInterestResponse> {\n    return this.sendOperationRequest(\n      {\n        url,\n        options\n      },\n      getAreaOfInterestOperationSpec,\n      callback) as Promise<Models.GetAreaOfInterestResponse>;\n  }\n\n  /**\n   * Use this interface to get the result of a Read operation, employing the state-of-the-art Optical\n   * Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read\n   * interface, the response contains a field called 'Operation-Location'. The 'Operation-Location'\n   * field contains the URL that you must use for your 'GetReadResult' operation to access OCR\n   * results.​\n   * @param url Publicly reachable URL of an image.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ReadResponse>\n   */\n  read(url: string, options?: Models.ComputerVisionClientReadOptionalParams): Promise<Models.ReadResponse>;\n  /**\n   * @param url Publicly reachable URL of an image.\n   * @param callback The callback\n   */\n  read(url: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param url Publicly reachable URL of an image.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  read(url: string, options: Models.ComputerVisionClientReadOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  read(url: string, options?: Models.ComputerVisionClientReadOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.ReadResponse> {\n    return this.sendOperationRequest(\n      {\n        url,\n        options\n      },\n      readOperationSpec,\n      callback) as Promise<Models.ReadResponse>;\n  }\n\n  /**\n   * This interface is used for getting OCR results of Read operation. The URL to this interface\n   * should be retrieved from 'Operation-Location' field returned from Read interface.\n   * @param operationId Id of read operation returned in the response of the 'Read' interface.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetReadResultResponse>\n   */\n  getReadResult(operationId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetReadResultResponse>;\n  /**\n   * @param operationId Id of read operation returned in the response of the 'Read' interface.\n   * @param callback The callback\n   */\n  getReadResult(operationId: string, callback: msRest.ServiceCallback<Models.ReadOperationResult>): void;\n  /**\n   * @param operationId Id of read operation returned in the response of the 'Read' interface.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getReadResult(operationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ReadOperationResult>): void;\n  getReadResult(operationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ReadOperationResult>, callback?: msRest.ServiceCallback<Models.ReadOperationResult>): Promise<Models.GetReadResultResponse> {\n    return this.sendOperationRequest(\n      {\n        operationId,\n        options\n      },\n      getReadResultOperationSpec,\n      callback) as Promise<Models.GetReadResultResponse>;\n  }\n\n  /**\n   * This operation extracts a rich set of visual features based on the image content.\n   * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within\n   * your request, there is an optional parameter to allow you to choose which features to return. By\n   * default, image categories are returned in the response.\n   * A successful response will be returned in JSON. If the request failed, the response will contain\n   * an error code and a message to help understand what went wrong.\n   * @param image An image stream.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.AnalyzeImageInStreamResponse>\n   */\n  analyzeImageInStream(image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientAnalyzeImageInStreamOptionalParams): Promise<Models.AnalyzeImageInStreamResponse>;\n  /**\n   * @param image An image stream.\n   * @param callback The callback\n   */\n  analyzeImageInStream(image: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.ImageAnalysis>): void;\n  /**\n   * @param image An image stream.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  analyzeImageInStream(image: msRest.HttpRequestBody, options: Models.ComputerVisionClientAnalyzeImageInStreamOptionalParams, callback: msRest.ServiceCallback<Models.ImageAnalysis>): void;\n  analyzeImageInStream(image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientAnalyzeImageInStreamOptionalParams | msRest.ServiceCallback<Models.ImageAnalysis>, callback?: msRest.ServiceCallback<Models.ImageAnalysis>): Promise<Models.AnalyzeImageInStreamResponse> {\n    return this.sendOperationRequest(\n      {\n        image,\n        options\n      },\n      analyzeImageInStreamOperationSpec,\n      callback) as Promise<Models.AnalyzeImageInStreamResponse>;\n  }\n\n  /**\n   * This operation returns a bounding box around the most important area of the image.\n   * A successful response will be returned in JSON. If the request failed, the response contains an\n   * error code and a message to help determine what went wrong.\n   * Upon failure, the error code and an error message are returned. The error code could be one of\n   * InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess,\n   * Timeout, or InternalServerError.\n   * @param image An image stream.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetAreaOfInterestInStreamResponse>\n   */\n  getAreaOfInterestInStream(image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientGetAreaOfInterestInStreamOptionalParams): Promise<Models.GetAreaOfInterestInStreamResponse>;\n  /**\n   * @param image An image stream.\n   * @param callback The callback\n   */\n  getAreaOfInterestInStream(image: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.AreaOfInterestResult>): void;\n  /**\n   * @param image An image stream.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getAreaOfInterestInStream(image: msRest.HttpRequestBody, options: Models.ComputerVisionClientGetAreaOfInterestInStreamOptionalParams, callback: msRest.ServiceCallback<Models.AreaOfInterestResult>): void;\n  getAreaOfInterestInStream(image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientGetAreaOfInterestInStreamOptionalParams | msRest.ServiceCallback<Models.AreaOfInterestResult>, callback?: msRest.ServiceCallback<Models.AreaOfInterestResult>): Promise<Models.GetAreaOfInterestInStreamResponse> {\n    return this.sendOperationRequest(\n      {\n        image,\n        options\n      },\n      getAreaOfInterestInStreamOperationSpec,\n      callback) as Promise<Models.GetAreaOfInterestInStreamResponse>;\n  }\n\n  /**\n   * This operation generates a description of an image in human readable language with complete\n   * sentences. The description is based on a collection of content tags, which are also returned by\n   * the operation. More than one description can be generated for each image. Descriptions are\n   * ordered by their confidence score. Descriptions may include results from celebrity and landmark\n   * domain models, if applicable.\n   * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.\n   * A successful response will be returned in JSON. If the request failed, the response will contain\n   * an error code and a message to help understand what went wrong.\n   * @param image An image stream.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DescribeImageInStreamResponse>\n   */\n  describeImageInStream(image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientDescribeImageInStreamOptionalParams): Promise<Models.DescribeImageInStreamResponse>;\n  /**\n   * @param image An image stream.\n   * @param callback The callback\n   */\n  describeImageInStream(image: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.ImageDescription>): void;\n  /**\n   * @param image An image stream.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  describeImageInStream(image: msRest.HttpRequestBody, options: Models.ComputerVisionClientDescribeImageInStreamOptionalParams, callback: msRest.ServiceCallback<Models.ImageDescription>): void;\n  describeImageInStream(image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientDescribeImageInStreamOptionalParams | msRest.ServiceCallback<Models.ImageDescription>, callback?: msRest.ServiceCallback<Models.ImageDescription>): Promise<Models.DescribeImageInStreamResponse> {\n    return this.sendOperationRequest(\n      {\n        image,\n        options\n      },\n      describeImageInStreamOperationSpec,\n      callback) as Promise<Models.DescribeImageInStreamResponse>;\n  }\n\n  /**\n   * Performs object detection on the specified image.\n   * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.\n   * A successful response will be returned in JSON. If the request failed, the response will contain\n   * an error code and a message to help understand what went wrong.\n   * @param image An image stream.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DetectObjectsInStreamResponse>\n   */\n  detectObjectsInStream(image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientDetectObjectsInStreamOptionalParams): Promise<Models.DetectObjectsInStreamResponse>;\n  /**\n   * @param image An image stream.\n   * @param callback The callback\n   */\n  detectObjectsInStream(image: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.DetectResult>): void;\n  /**\n   * @param image An image stream.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  detectObjectsInStream(image: msRest.HttpRequestBody, options: Models.ComputerVisionClientDetectObjectsInStreamOptionalParams, callback: msRest.ServiceCallback<Models.DetectResult>): void;\n  detectObjectsInStream(image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientDetectObjectsInStreamOptionalParams | msRest.ServiceCallback<Models.DetectResult>, callback?: msRest.ServiceCallback<Models.DetectResult>): Promise<Models.DetectObjectsInStreamResponse> {\n    return this.sendOperationRequest(\n      {\n        image,\n        options\n      },\n      detectObjectsInStreamOperationSpec,\n      callback) as Promise<Models.DetectObjectsInStreamResponse>;\n  }\n\n  /**\n   * This operation generates a thumbnail image with the user-specified width and height. By default,\n   * the service analyzes the image, identifies the region of interest (ROI), and generates smart\n   * cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio\n   * that differs from that of the input image.\n   * A successful response contains the thumbnail image binary. If the request failed, the response\n   * contains an error code and a message to help determine what went wrong.\n   * Upon failure, the error code and an error message are returned. The error code could be one of\n   * InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage,\n   * FailedToProcess, Timeout, or InternalServerError.\n   * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended\n   * minimum of 50.\n   * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended\n   * minimum of 50.\n   * @param image An image stream.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GenerateThumbnailInStreamResponse>\n   */\n  generateThumbnailInStream(width: number, height: number, image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientGenerateThumbnailInStreamOptionalParams): Promise<Models.GenerateThumbnailInStreamResponse>;\n  /**\n   * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended\n   * minimum of 50.\n   * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended\n   * minimum of 50.\n   * @param image An image stream.\n   * @param callback The callback\n   */\n  generateThumbnailInStream(width: number, height: number, image: msRest.HttpRequestBody, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended\n   * minimum of 50.\n   * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended\n   * minimum of 50.\n   * @param image An image stream.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  generateThumbnailInStream(width: number, height: number, image: msRest.HttpRequestBody, options: Models.ComputerVisionClientGenerateThumbnailInStreamOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  generateThumbnailInStream(width: number, height: number, image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientGenerateThumbnailInStreamOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.GenerateThumbnailInStreamResponse> {\n    return this.sendOperationRequest(\n      {\n        width,\n        height,\n        image,\n        options\n      },\n      generateThumbnailInStreamOperationSpec,\n      callback) as Promise<Models.GenerateThumbnailInStreamResponse>;\n  }\n\n  /**\n   * This operation recognizes content within an image by applying a domain-specific model. The list\n   * of domain-specific models that are supported by the Computer Vision API can be retrieved using\n   * the /models GET request. Currently, the API provides following domain-specific models:\n   * celebrities, landmarks.\n   * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.\n   * A successful response will be returned in JSON.\n   * If the request failed, the response will contain an error code and a message to help understand\n   * what went wrong.\n   * @param model The domain-specific content to recognize.\n   * @param image An image stream.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.AnalyzeImageByDomainInStreamResponse>\n   */\n  analyzeImageByDomainInStream(model: string, image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientAnalyzeImageByDomainInStreamOptionalParams): Promise<Models.AnalyzeImageByDomainInStreamResponse>;\n  /**\n   * @param model The domain-specific content to recognize.\n   * @param image An image stream.\n   * @param callback The callback\n   */\n  analyzeImageByDomainInStream(model: string, image: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.DomainModelResults>): void;\n  /**\n   * @param model The domain-specific content to recognize.\n   * @param image An image stream.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  analyzeImageByDomainInStream(model: string, image: msRest.HttpRequestBody, options: Models.ComputerVisionClientAnalyzeImageByDomainInStreamOptionalParams, callback: msRest.ServiceCallback<Models.DomainModelResults>): void;\n  analyzeImageByDomainInStream(model: string, image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientAnalyzeImageByDomainInStreamOptionalParams | msRest.ServiceCallback<Models.DomainModelResults>, callback?: msRest.ServiceCallback<Models.DomainModelResults>): Promise<Models.AnalyzeImageByDomainInStreamResponse> {\n    return this.sendOperationRequest(\n      {\n        model,\n        image,\n        options\n      },\n      analyzeImageByDomainInStreamOperationSpec,\n      callback) as Promise<Models.AnalyzeImageByDomainInStreamResponse>;\n  }\n\n  /**\n   * Optical Character Recognition (OCR) detects text in an image and extracts the recognized\n   * characters into a machine-usable character stream.\n   * Upon success, the OCR results will be returned.\n   * Upon failure, the error code together with an error message will be returned. The error code can\n   * be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage,\n   * NotSupportedLanguage, or InternalServerError.\n   * @param detectOrientation Whether detect the text orientation in the image. With\n   * detectOrientation=true the OCR service tries to detect the image orientation and correct it\n   * before further processing (e.g. if it's upside-down).\n   * @param image An image stream.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RecognizePrintedTextInStreamResponse>\n   */\n  recognizePrintedTextInStream(detectOrientation: boolean, image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientRecognizePrintedTextInStreamOptionalParams): Promise<Models.RecognizePrintedTextInStreamResponse>;\n  /**\n   * @param detectOrientation Whether detect the text orientation in the image. With\n   * detectOrientation=true the OCR service tries to detect the image orientation and correct it\n   * before further processing (e.g. if it's upside-down).\n   * @param image An image stream.\n   * @param callback The callback\n   */\n  recognizePrintedTextInStream(detectOrientation: boolean, image: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.OcrResult>): void;\n  /**\n   * @param detectOrientation Whether detect the text orientation in the image. With\n   * detectOrientation=true the OCR service tries to detect the image orientation and correct it\n   * before further processing (e.g. if it's upside-down).\n   * @param image An image stream.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  recognizePrintedTextInStream(detectOrientation: boolean, image: msRest.HttpRequestBody, options: Models.ComputerVisionClientRecognizePrintedTextInStreamOptionalParams, callback: msRest.ServiceCallback<Models.OcrResult>): void;\n  recognizePrintedTextInStream(detectOrientation: boolean, image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientRecognizePrintedTextInStreamOptionalParams | msRest.ServiceCallback<Models.OcrResult>, callback?: msRest.ServiceCallback<Models.OcrResult>): Promise<Models.RecognizePrintedTextInStreamResponse> {\n    return this.sendOperationRequest(\n      {\n        detectOrientation,\n        image,\n        options\n      },\n      recognizePrintedTextInStreamOperationSpec,\n      callback) as Promise<Models.RecognizePrintedTextInStreamResponse>;\n  }\n\n  /**\n   * This operation generates a list of words, or tags, that are relevant to the content of the\n   * supplied image. The Computer Vision API can return tags based on objects, living beings, scenery\n   * or actions found in images. Unlike categories, tags are not organized according to a\n   * hierarchical classification system, but correspond to image content. Tags may contain hints to\n   * avoid ambiguity or provide context, for example the tag \"ascomycete\" may be accompanied by the\n   * hint \"fungus\".\n   * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.\n   * A successful response will be returned in JSON. If the request failed, the response will contain\n   * an error code and a message to help understand what went wrong.\n   * @param image An image stream.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.TagImageInStreamResponse>\n   */\n  tagImageInStream(image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientTagImageInStreamOptionalParams): Promise<Models.TagImageInStreamResponse>;\n  /**\n   * @param image An image stream.\n   * @param callback The callback\n   */\n  tagImageInStream(image: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.TagResult>): void;\n  /**\n   * @param image An image stream.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  tagImageInStream(image: msRest.HttpRequestBody, options: Models.ComputerVisionClientTagImageInStreamOptionalParams, callback: msRest.ServiceCallback<Models.TagResult>): void;\n  tagImageInStream(image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientTagImageInStreamOptionalParams | msRest.ServiceCallback<Models.TagResult>, callback?: msRest.ServiceCallback<Models.TagResult>): Promise<Models.TagImageInStreamResponse> {\n    return this.sendOperationRequest(\n      {\n        image,\n        options\n      },\n      tagImageInStreamOperationSpec,\n      callback) as Promise<Models.TagImageInStreamResponse>;\n  }\n\n  /**\n   * Use this interface to get the result of a Read operation, employing the state-of-the-art Optical\n   * Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read\n   * interface, the response contains a field called 'Operation-Location'. The 'Operation-Location'\n   * field contains the URL that you must use for your 'GetReadResult' operation to access OCR\n   * results.​\n   * @param image An image stream.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ReadInStreamResponse>\n   */\n  readInStream(image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientReadInStreamOptionalParams): Promise<Models.ReadInStreamResponse>;\n  /**\n   * @param image An image stream.\n   * @param callback The callback\n   */\n  readInStream(image: msRest.HttpRequestBody, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param image An image stream.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  readInStream(image: msRest.HttpRequestBody, options: Models.ComputerVisionClientReadInStreamOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  readInStream(image: msRest.HttpRequestBody, options?: Models.ComputerVisionClientReadInStreamOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.ReadInStreamResponse> {\n    return this.sendOperationRequest(\n      {\n        image,\n        options\n      },\n      readInStreamOperationSpec,\n      callback) as Promise<Models.ReadInStreamResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new msRest.Serializer(Mappers);\nconst analyzeImageOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"analyze\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.visualFeatures,\n    Parameters.details,\n    Parameters.language0,\n    Parameters.descriptionExclude,\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImageAnalysis\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst describeImageOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"describe\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.maxCandidates,\n    Parameters.language0,\n    Parameters.descriptionExclude,\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImageDescription\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst detectObjectsOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"detect\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.DetectResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst listModelsOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"models\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListModelsResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst analyzeImageByDomainOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"models/{model}/analyze\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.model\n  ],\n  queryParameters: [\n    Parameters.language0,\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.DomainModelResults\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst recognizePrintedTextOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"ocr\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.detectOrientation,\n    Parameters.language1,\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.OcrResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst tagImageOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"tag\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.language0,\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.TagResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst generateThumbnailOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"generateThumbnail\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.width,\n    Parameters.height,\n    Parameters.smartCropping,\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Stream\"\n        }\n      }\n    },\n    default: {}\n  },\n  serializer\n};\n\nconst getAreaOfInterestOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"areaOfInterest\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.AreaOfInterestResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst readOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"read/analyze\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.language2,\n    Parameters.pages,\n    Parameters.modelVersion,\n    Parameters.readingOrder\n  ],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    202: {\n      headersMapper: Mappers.ReadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionOcrError,\n      headersMapper: Mappers.ReadHeaders\n    }\n  },\n  serializer\n};\n\nconst getReadResultOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"read/analyzeResults/{operationId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.operationId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ReadOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionOcrError\n    }\n  },\n  serializer\n};\n\nconst analyzeImageInStreamOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"analyze\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.visualFeatures,\n    Parameters.details,\n    Parameters.language0,\n    Parameters.descriptionExclude,\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImageAnalysis\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst getAreaOfInterestInStreamOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"areaOfInterest\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AreaOfInterestResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst describeImageInStreamOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"describe\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.maxCandidates,\n    Parameters.language0,\n    Parameters.descriptionExclude,\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImageDescription\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst detectObjectsInStreamOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"detect\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DetectResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst generateThumbnailInStreamOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"generateThumbnail\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.width,\n    Parameters.height,\n    Parameters.smartCropping,\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Stream\"\n        }\n      }\n    },\n    default: {}\n  },\n  serializer\n};\n\nconst analyzeImageByDomainInStreamOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"models/{model}/analyze\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.model\n  ],\n  queryParameters: [\n    Parameters.language0,\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DomainModelResults\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst recognizePrintedTextInStreamOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"ocr\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.detectOrientation,\n    Parameters.language1,\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OcrResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst tagImageInStreamOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"tag\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.language0,\n    Parameters.modelVersion\n  ],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TagResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer\n};\n\nconst readInStreamOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"read/analyze\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.language2,\n    Parameters.pages,\n    Parameters.modelVersion,\n    Parameters.readingOrder\n  ],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ReadInStreamHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionOcrError,\n      headersMapper: Mappers.ReadInStreamHeaders\n    }\n  },\n  serializer\n};\n\nexport {\n  ComputerVisionClient,\n  ComputerVisionClientContext,\n  Models as ComputerVisionModels,\n  Mappers as ComputerVisionMappers\n};\n"],"names":["msRest.QueryCollectionFormat","msRest.getDefaultUserAgentValue","msRest.ServiceClient","msRest.Serializer","Parameters.endpoint","Parameters.visualFeatures","Parameters.details","Parameters.language0","Parameters.descriptionExclude","Parameters.modelVersion","Mappers.ImageUrl","Mappers.ImageAnalysis","Mappers.ComputerVisionErrorResponse","Parameters.maxCandidates","Mappers.ImageDescription","Mappers.DetectResult","Mappers.ListModelsResult","Parameters.model","Mappers.DomainModelResults","Parameters.detectOrientation","Parameters.language1","Mappers.OcrResult","Mappers.TagResult","Parameters.width","Parameters.height","Parameters.smartCropping","Mappers.AreaOfInterestResult","Parameters.language2","Parameters.pages","Parameters.readingOrder","Mappers.ReadHeaders","Mappers.ComputerVisionOcrError","Parameters.operationId","Mappers.ReadOperationResult","Mappers.ReadInStreamHeaders"],"mappings":"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"}