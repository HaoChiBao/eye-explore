/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/reviewsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Reviews. */
var Reviews = /** @class */ (function () {
    /**
     * Create a Reviews.
     * @param {ContentModeratorClientContext} client Reference to the service client.
     */
    function Reviews(client) {
        this.client = client;
    }
    Reviews.prototype.getReview = function (teamName, reviewId, options, callback) {
        return this.client.sendOperationRequest({
            teamName: teamName,
            reviewId: reviewId,
            options: options
        }, getReviewOperationSpec, callback);
    };
    Reviews.prototype.getJobDetails = function (teamName, jobId, options, callback) {
        return this.client.sendOperationRequest({
            teamName: teamName,
            jobId: jobId,
            options: options
        }, getJobDetailsOperationSpec, callback);
    };
    Reviews.prototype.createReviews = function (urlContentType, teamName, createReviewBody, options, callback) {
        return this.client.sendOperationRequest({
            urlContentType: urlContentType,
            teamName: teamName,
            createReviewBody: createReviewBody,
            options: options
        }, createReviewsOperationSpec, callback);
    };
    Reviews.prototype.createJob = function (teamName, contentType, contentId, workflowName, jobContentType, content, options, callback) {
        return this.client.sendOperationRequest({
            teamName: teamName,
            contentType: contentType,
            contentId: contentId,
            workflowName: workflowName,
            jobContentType: jobContentType,
            content: content,
            options: options
        }, createJobOperationSpec, callback);
    };
    Reviews.prototype.addVideoFrame = function (teamName, reviewId, options, callback) {
        return this.client.sendOperationRequest({
            teamName: teamName,
            reviewId: reviewId,
            options: options
        }, addVideoFrameOperationSpec, callback);
    };
    Reviews.prototype.getVideoFrames = function (teamName, reviewId, options, callback) {
        return this.client.sendOperationRequest({
            teamName: teamName,
            reviewId: reviewId,
            options: options
        }, getVideoFramesOperationSpec, callback);
    };
    Reviews.prototype.publishVideoReview = function (teamName, reviewId, options, callback) {
        return this.client.sendOperationRequest({
            teamName: teamName,
            reviewId: reviewId,
            options: options
        }, publishVideoReviewOperationSpec, callback);
    };
    Reviews.prototype.addVideoTranscriptModerationResult = function (contentType, teamName, reviewId, transcriptModerationBody, options, callback) {
        return this.client.sendOperationRequest({
            contentType: contentType,
            teamName: teamName,
            reviewId: reviewId,
            transcriptModerationBody: transcriptModerationBody,
            options: options
        }, addVideoTranscriptModerationResultOperationSpec, callback);
    };
    Reviews.prototype.addVideoTranscript = function (teamName, reviewId, vTTfile, options, callback) {
        return this.client.sendOperationRequest({
            teamName: teamName,
            reviewId: reviewId,
            vTTfile: vTTfile,
            options: options
        }, addVideoTranscriptOperationSpec, callback);
    };
    Reviews.prototype.createVideoReviews = function (contentType, teamName, createVideoReviewsBody, options, callback) {
        return this.client.sendOperationRequest({
            contentType: contentType,
            teamName: teamName,
            createVideoReviewsBody: createVideoReviewsBody,
            options: options
        }, createVideoReviewsOperationSpec, callback);
    };
    Reviews.prototype.addVideoFrameUrl = function (contentType, teamName, reviewId, videoFrameBody, options, callback) {
        return this.client.sendOperationRequest({
            contentType: contentType,
            teamName: teamName,
            reviewId: reviewId,
            videoFrameBody: videoFrameBody,
            options: options
        }, addVideoFrameUrlOperationSpec, callback);
    };
    Reviews.prototype.addVideoFrameStream = function (contentType, teamName, reviewId, frameImageZip, frameMetadata, options, callback) {
        return this.client.sendOperationRequest({
            contentType: contentType,
            teamName: teamName,
            reviewId: reviewId,
            frameImageZip: frameImageZip,
            frameMetadata: frameMetadata,
            options: options
        }, addVideoFrameStreamOperationSpec, callback);
    };
    return Reviews;
}());
export { Reviews };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getReviewOperationSpec = {
    httpMethod: "GET",
    path: "contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.teamName,
        Parameters.reviewId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Review
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var getJobDetailsOperationSpec = {
    httpMethod: "GET",
    path: "contentmoderator/review/v1.0/teams/{teamName}/jobs/{JobId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.teamName,
        Parameters.jobId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Job
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var createReviewsOperationSpec = {
    httpMethod: "POST",
    path: "contentmoderator/review/v1.0/teams/{teamName}/reviews",
    urlParameters: [
        Parameters.endpoint,
        Parameters.teamName
    ],
    queryParameters: [
        Parameters.subTeam
    ],
    headerParameters: [
        Parameters.urlContentType
    ],
    requestBody: {
        parameterPath: "createReviewBody",
        mapper: {
            required: true,
            serializedName: "createReviewBody",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Composite",
                        className: "CreateReviewBodyItem"
                    }
                }
            }
        }
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var createJobOperationSpec = {
    httpMethod: "POST",
    path: "contentmoderator/review/v1.0/teams/{teamName}/jobs",
    urlParameters: [
        Parameters.endpoint,
        Parameters.teamName
    ],
    queryParameters: [
        Parameters.contentType1,
        Parameters.contentId,
        Parameters.workflowName,
        Parameters.callBackEndpoint
    ],
    headerParameters: [
        Parameters.jobContentType
    ],
    requestBody: {
        parameterPath: "content",
        mapper: __assign(__assign({}, Mappers.Content), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.JobId
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var addVideoFrameOperationSpec = {
    httpMethod: "POST",
    path: "contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames",
    urlParameters: [
        Parameters.endpoint,
        Parameters.teamName,
        Parameters.reviewId
    ],
    queryParameters: [
        Parameters.timescale
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var getVideoFramesOperationSpec = {
    httpMethod: "GET",
    path: "contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames",
    urlParameters: [
        Parameters.endpoint,
        Parameters.teamName,
        Parameters.reviewId
    ],
    queryParameters: [
        Parameters.startSeed,
        Parameters.noOfRecords,
        Parameters.filter
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Frames
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var publishVideoReviewOperationSpec = {
    httpMethod: "POST",
    path: "contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/publish",
    urlParameters: [
        Parameters.endpoint,
        Parameters.teamName,
        Parameters.reviewId
    ],
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var addVideoTranscriptModerationResultOperationSpec = {
    httpMethod: "PUT",
    path: "contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/transcriptmoderationresult",
    urlParameters: [
        Parameters.endpoint,
        Parameters.teamName,
        Parameters.reviewId
    ],
    headerParameters: [
        Parameters.contentType0
    ],
    requestBody: {
        parameterPath: "transcriptModerationBody",
        mapper: {
            required: true,
            serializedName: "transcriptModerationBody",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Composite",
                        className: "TranscriptModerationBodyItem"
                    }
                }
            }
        }
    },
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var addVideoTranscriptOperationSpec = {
    httpMethod: "PUT",
    path: "contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/transcript",
    urlParameters: [
        Parameters.endpoint,
        Parameters.teamName,
        Parameters.reviewId
    ],
    headerParameters: [
        Parameters.contentType2
    ],
    requestBody: {
        parameterPath: "vTTfile",
        mapper: {
            required: true,
            serializedName: "VTT file",
            type: {
                name: "Stream"
            }
        }
    },
    contentType: "text/plain",
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var createVideoReviewsOperationSpec = {
    httpMethod: "POST",
    path: "contentmoderator/review/v1.0/teams/{teamName}/reviews",
    urlParameters: [
        Parameters.endpoint,
        Parameters.teamName
    ],
    queryParameters: [
        Parameters.subTeam
    ],
    headerParameters: [
        Parameters.contentType0
    ],
    requestBody: {
        parameterPath: "createVideoReviewsBody",
        mapper: {
            required: true,
            serializedName: "CreateVideoReviewsBody",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Composite",
                        className: "CreateVideoReviewsBodyItem"
                    }
                }
            }
        }
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var addVideoFrameUrlOperationSpec = {
    httpMethod: "POST",
    path: "contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames",
    urlParameters: [
        Parameters.endpoint,
        Parameters.teamName,
        Parameters.reviewId
    ],
    queryParameters: [
        Parameters.timescale
    ],
    headerParameters: [
        Parameters.contentType0
    ],
    requestBody: {
        parameterPath: "videoFrameBody",
        mapper: {
            required: true,
            serializedName: "videoFrameBody",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Composite",
                        className: "VideoFrameBodyItem"
                    }
                }
            }
        }
    },
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var addVideoFrameStreamOperationSpec = {
    httpMethod: "POST",
    path: "contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames",
    urlParameters: [
        Parameters.endpoint,
        Parameters.teamName,
        Parameters.reviewId
    ],
    queryParameters: [
        Parameters.timescale
    ],
    headerParameters: [
        Parameters.contentType0
    ],
    formDataParameters: [
        Parameters.frameImageZip,
        Parameters.frameMetadata
    ],
    contentType: "multipart/form-data",
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=reviews.js.map