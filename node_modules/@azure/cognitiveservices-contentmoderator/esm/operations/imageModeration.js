/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/imageModerationMappers";
import * as Parameters from "../models/parameters";
/** Class representing a ImageModeration. */
var ImageModeration = /** @class */ (function () {
    /**
     * Create a ImageModeration.
     * @param {ContentModeratorClientContext} client Reference to the service client.
     */
    function ImageModeration(client) {
        this.client = client;
    }
    ImageModeration.prototype.findFaces = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, findFacesOperationSpec, callback);
    };
    ImageModeration.prototype.oCRMethod = function (language, options, callback) {
        return this.client.sendOperationRequest({
            language: language,
            options: options
        }, oCRMethodOperationSpec, callback);
    };
    ImageModeration.prototype.evaluateMethod = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, evaluateMethodOperationSpec, callback);
    };
    ImageModeration.prototype.matchMethod = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, matchMethodOperationSpec, callback);
    };
    ImageModeration.prototype.findFacesFileInput = function (imageStream, options, callback) {
        return this.client.sendOperationRequest({
            imageStream: imageStream,
            options: options
        }, findFacesFileInputOperationSpec, callback);
    };
    ImageModeration.prototype.findFacesUrlInput = function (contentType, imageUrl, options, callback) {
        return this.client.sendOperationRequest({
            contentType: contentType,
            imageUrl: imageUrl,
            options: options
        }, findFacesUrlInputOperationSpec, callback);
    };
    ImageModeration.prototype.oCRUrlInput = function (language, contentType, imageUrl, options, callback) {
        return this.client.sendOperationRequest({
            language: language,
            contentType: contentType,
            imageUrl: imageUrl,
            options: options
        }, oCRUrlInputOperationSpec, callback);
    };
    ImageModeration.prototype.oCRFileInput = function (language, imageStream, options, callback) {
        return this.client.sendOperationRequest({
            language: language,
            imageStream: imageStream,
            options: options
        }, oCRFileInputOperationSpec, callback);
    };
    ImageModeration.prototype.evaluateFileInput = function (imageStream, options, callback) {
        return this.client.sendOperationRequest({
            imageStream: imageStream,
            options: options
        }, evaluateFileInputOperationSpec, callback);
    };
    ImageModeration.prototype.evaluateUrlInput = function (contentType, imageUrl, options, callback) {
        return this.client.sendOperationRequest({
            contentType: contentType,
            imageUrl: imageUrl,
            options: options
        }, evaluateUrlInputOperationSpec, callback);
    };
    ImageModeration.prototype.matchUrlInput = function (contentType, imageUrl, options, callback) {
        return this.client.sendOperationRequest({
            contentType: contentType,
            imageUrl: imageUrl,
            options: options
        }, matchUrlInputOperationSpec, callback);
    };
    ImageModeration.prototype.matchFileInput = function (imageStream, options, callback) {
        return this.client.sendOperationRequest({
            imageStream: imageStream,
            options: options
        }, matchFileInputOperationSpec, callback);
    };
    return ImageModeration;
}());
export { ImageModeration };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var findFacesOperationSpec = {
    httpMethod: "POST",
    path: "contentmoderator/moderate/v1.0/ProcessImage/FindFaces",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.cacheImage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.FoundFaces
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var oCRMethodOperationSpec = {
    httpMethod: "POST",
    path: "contentmoderator/moderate/v1.0/ProcessImage/OCR",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.language0,
        Parameters.cacheImage,
        Parameters.enhanced
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OCR
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var evaluateMethodOperationSpec = {
    httpMethod: "POST",
    path: "contentmoderator/moderate/v1.0/ProcessImage/Evaluate",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.cacheImage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Evaluate
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var matchMethodOperationSpec = {
    httpMethod: "POST",
    path: "contentmoderator/moderate/v1.0/ProcessImage/Match",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.listId0,
        Parameters.cacheImage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.MatchResponse
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var findFacesFileInputOperationSpec = {
    httpMethod: "POST",
    path: "contentmoderator/moderate/v1.0/ProcessImage/FindFaces",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.cacheImage
    ],
    requestBody: {
        parameterPath: "imageStream",
        mapper: {
            required: true,
            serializedName: "ImageStream",
            type: {
                name: "Stream"
            }
        }
    },
    contentType: "image/gif",
    responses: {
        200: {
            bodyMapper: Mappers.FoundFaces
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var findFacesUrlInputOperationSpec = {
    httpMethod: "POST",
    path: "contentmoderator/moderate/v1.0/ProcessImage/FindFaces",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.cacheImage
    ],
    headerParameters: [
        Parameters.contentType0
    ],
    requestBody: {
        parameterPath: "imageUrl",
        mapper: __assign(__assign({}, Mappers.ImageUrl), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.FoundFaces
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var oCRUrlInputOperationSpec = {
    httpMethod: "POST",
    path: "contentmoderator/moderate/v1.0/ProcessImage/OCR",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.language0,
        Parameters.cacheImage,
        Parameters.enhanced
    ],
    headerParameters: [
        Parameters.contentType0
    ],
    requestBody: {
        parameterPath: "imageUrl",
        mapper: __assign(__assign({}, Mappers.ImageUrl), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OCR
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var oCRFileInputOperationSpec = {
    httpMethod: "POST",
    path: "contentmoderator/moderate/v1.0/ProcessImage/OCR",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.language0,
        Parameters.cacheImage,
        Parameters.enhanced
    ],
    requestBody: {
        parameterPath: "imageStream",
        mapper: {
            required: true,
            serializedName: "ImageStream",
            type: {
                name: "Stream"
            }
        }
    },
    contentType: "image/gif",
    responses: {
        200: {
            bodyMapper: Mappers.OCR
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var evaluateFileInputOperationSpec = {
    httpMethod: "POST",
    path: "contentmoderator/moderate/v1.0/ProcessImage/Evaluate",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.cacheImage
    ],
    requestBody: {
        parameterPath: "imageStream",
        mapper: {
            required: true,
            serializedName: "ImageStream",
            type: {
                name: "Stream"
            }
        }
    },
    contentType: "image/gif",
    responses: {
        200: {
            bodyMapper: Mappers.Evaluate
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var evaluateUrlInputOperationSpec = {
    httpMethod: "POST",
    path: "contentmoderator/moderate/v1.0/ProcessImage/Evaluate",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.cacheImage
    ],
    headerParameters: [
        Parameters.contentType0
    ],
    requestBody: {
        parameterPath: "imageUrl",
        mapper: __assign(__assign({}, Mappers.ImageUrl), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Evaluate
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var matchUrlInputOperationSpec = {
    httpMethod: "POST",
    path: "contentmoderator/moderate/v1.0/ProcessImage/Match",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.listId0,
        Parameters.cacheImage
    ],
    headerParameters: [
        Parameters.contentType0
    ],
    requestBody: {
        parameterPath: "imageUrl",
        mapper: __assign(__assign({}, Mappers.ImageUrl), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.MatchResponse
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var matchFileInputOperationSpec = {
    httpMethod: "POST",
    path: "contentmoderator/moderate/v1.0/ProcessImage/Match",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.listId0,
        Parameters.cacheImage
    ],
    requestBody: {
        parameterPath: "imageStream",
        mapper: {
            required: true,
            serializedName: "ImageStream",
            type: {
                name: "Stream"
            }
        }
    },
    contentType: "image/gif",
    responses: {
        200: {
            bodyMapper: Mappers.MatchResponse
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=imageModeration.js.map