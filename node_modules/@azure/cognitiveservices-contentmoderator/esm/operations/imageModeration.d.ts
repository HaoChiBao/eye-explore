import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { ContentModeratorClientContext } from "../contentModeratorClientContext";
/** Class representing a ImageModeration. */
export declare class ImageModeration {
    private readonly client;
    /**
     * Create a ImageModeration.
     * @param {ContentModeratorClientContext} client Reference to the service client.
     */
    constructor(client: ContentModeratorClientContext);
    /**
     * Returns the list of faces found.
     * @param [options] The optional parameters
     * @returns Promise<Models.ImageModerationFindFacesResponse>
     */
    findFaces(options?: Models.ImageModerationFindFacesOptionalParams): Promise<Models.ImageModerationFindFacesResponse>;
    /**
     * @param callback The callback
     */
    findFaces(callback: msRest.ServiceCallback<Models.FoundFaces>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    findFaces(options: Models.ImageModerationFindFacesOptionalParams, callback: msRest.ServiceCallback<Models.FoundFaces>): void;
    /**
     * Returns any text found in the image for the language specified. If no language is specified in
     * input then the detection defaults to English.
     * @param language Language of the terms.
     * @param [options] The optional parameters
     * @returns Promise<Models.ImageModerationOCRMethodResponse>
     */
    oCRMethod(language: string, options?: Models.ImageModerationOCRMethodOptionalParams): Promise<Models.ImageModerationOCRMethodResponse>;
    /**
     * @param language Language of the terms.
     * @param callback The callback
     */
    oCRMethod(language: string, callback: msRest.ServiceCallback<Models.OCR>): void;
    /**
     * @param language Language of the terms.
     * @param options The optional parameters
     * @param callback The callback
     */
    oCRMethod(language: string, options: Models.ImageModerationOCRMethodOptionalParams, callback: msRest.ServiceCallback<Models.OCR>): void;
    /**
     * Returns probabilities of the image containing racy or adult content.
     * @param [options] The optional parameters
     * @returns Promise<Models.ImageModerationEvaluateMethodResponse>
     */
    evaluateMethod(options?: Models.ImageModerationEvaluateMethodOptionalParams): Promise<Models.ImageModerationEvaluateMethodResponse>;
    /**
     * @param callback The callback
     */
    evaluateMethod(callback: msRest.ServiceCallback<Models.Evaluate>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    evaluateMethod(options: Models.ImageModerationEvaluateMethodOptionalParams, callback: msRest.ServiceCallback<Models.Evaluate>): void;
    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your
     * custom image lists using <a
     * href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe">this</a> API.
     *
     * Returns ID and tags of matching image.<br/>
     * <br/>
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals
     * are reflected in the response.
     * @param [options] The optional parameters
     * @returns Promise<Models.ImageModerationMatchMethodResponse>
     */
    matchMethod(options?: Models.ImageModerationMatchMethodOptionalParams): Promise<Models.ImageModerationMatchMethodResponse>;
    /**
     * @param callback The callback
     */
    matchMethod(callback: msRest.ServiceCallback<Models.MatchResponse>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    matchMethod(options: Models.ImageModerationMatchMethodOptionalParams, callback: msRest.ServiceCallback<Models.MatchResponse>): void;
    /**
     * Returns the list of faces found.
     * @param imageStream The image file.
     * @param [options] The optional parameters
     * @returns Promise<Models.ImageModerationFindFacesFileInputResponse>
     */
    findFacesFileInput(imageStream: msRest.HttpRequestBody, options?: Models.ImageModerationFindFacesFileInputOptionalParams): Promise<Models.ImageModerationFindFacesFileInputResponse>;
    /**
     * @param imageStream The image file.
     * @param callback The callback
     */
    findFacesFileInput(imageStream: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.FoundFaces>): void;
    /**
     * @param imageStream The image file.
     * @param options The optional parameters
     * @param callback The callback
     */
    findFacesFileInput(imageStream: msRest.HttpRequestBody, options: Models.ImageModerationFindFacesFileInputOptionalParams, callback: msRest.ServiceCallback<Models.FoundFaces>): void;
    /**
     * Returns the list of faces found.
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param [options] The optional parameters
     * @returns Promise<Models.ImageModerationFindFacesUrlInputResponse>
     */
    findFacesUrlInput(contentType: string, imageUrl: Models.ImageUrl, options?: Models.ImageModerationFindFacesUrlInputOptionalParams): Promise<Models.ImageModerationFindFacesUrlInputResponse>;
    /**
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param callback The callback
     */
    findFacesUrlInput(contentType: string, imageUrl: Models.ImageUrl, callback: msRest.ServiceCallback<Models.FoundFaces>): void;
    /**
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param options The optional parameters
     * @param callback The callback
     */
    findFacesUrlInput(contentType: string, imageUrl: Models.ImageUrl, options: Models.ImageModerationFindFacesUrlInputOptionalParams, callback: msRest.ServiceCallback<Models.FoundFaces>): void;
    /**
     * Returns any text found in the image for the language specified. If no language is specified in
     * input then the detection defaults to English.
     * @param language Language of the terms.
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param [options] The optional parameters
     * @returns Promise<Models.ImageModerationOCRUrlInputResponse>
     */
    oCRUrlInput(language: string, contentType: string, imageUrl: Models.ImageUrl, options?: Models.ImageModerationOCRUrlInputOptionalParams): Promise<Models.ImageModerationOCRUrlInputResponse>;
    /**
     * @param language Language of the terms.
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param callback The callback
     */
    oCRUrlInput(language: string, contentType: string, imageUrl: Models.ImageUrl, callback: msRest.ServiceCallback<Models.OCR>): void;
    /**
     * @param language Language of the terms.
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param options The optional parameters
     * @param callback The callback
     */
    oCRUrlInput(language: string, contentType: string, imageUrl: Models.ImageUrl, options: Models.ImageModerationOCRUrlInputOptionalParams, callback: msRest.ServiceCallback<Models.OCR>): void;
    /**
     * Returns any text found in the image for the language specified. If no language is specified in
     * input then the detection defaults to English.
     * @param language Language of the terms.
     * @param imageStream The image file.
     * @param [options] The optional parameters
     * @returns Promise<Models.ImageModerationOCRFileInputResponse>
     */
    oCRFileInput(language: string, imageStream: msRest.HttpRequestBody, options?: Models.ImageModerationOCRFileInputOptionalParams): Promise<Models.ImageModerationOCRFileInputResponse>;
    /**
     * @param language Language of the terms.
     * @param imageStream The image file.
     * @param callback The callback
     */
    oCRFileInput(language: string, imageStream: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.OCR>): void;
    /**
     * @param language Language of the terms.
     * @param imageStream The image file.
     * @param options The optional parameters
     * @param callback The callback
     */
    oCRFileInput(language: string, imageStream: msRest.HttpRequestBody, options: Models.ImageModerationOCRFileInputOptionalParams, callback: msRest.ServiceCallback<Models.OCR>): void;
    /**
     * Returns probabilities of the image containing racy or adult content.
     * @param imageStream The image file.
     * @param [options] The optional parameters
     * @returns Promise<Models.ImageModerationEvaluateFileInputResponse>
     */
    evaluateFileInput(imageStream: msRest.HttpRequestBody, options?: Models.ImageModerationEvaluateFileInputOptionalParams): Promise<Models.ImageModerationEvaluateFileInputResponse>;
    /**
     * @param imageStream The image file.
     * @param callback The callback
     */
    evaluateFileInput(imageStream: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.Evaluate>): void;
    /**
     * @param imageStream The image file.
     * @param options The optional parameters
     * @param callback The callback
     */
    evaluateFileInput(imageStream: msRest.HttpRequestBody, options: Models.ImageModerationEvaluateFileInputOptionalParams, callback: msRest.ServiceCallback<Models.Evaluate>): void;
    /**
     * Returns probabilities of the image containing racy or adult content.
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param [options] The optional parameters
     * @returns Promise<Models.ImageModerationEvaluateUrlInputResponse>
     */
    evaluateUrlInput(contentType: string, imageUrl: Models.ImageUrl, options?: Models.ImageModerationEvaluateUrlInputOptionalParams): Promise<Models.ImageModerationEvaluateUrlInputResponse>;
    /**
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param callback The callback
     */
    evaluateUrlInput(contentType: string, imageUrl: Models.ImageUrl, callback: msRest.ServiceCallback<Models.Evaluate>): void;
    /**
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param options The optional parameters
     * @param callback The callback
     */
    evaluateUrlInput(contentType: string, imageUrl: Models.ImageUrl, options: Models.ImageModerationEvaluateUrlInputOptionalParams, callback: msRest.ServiceCallback<Models.Evaluate>): void;
    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your
     * custom image lists using <a
     * href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe">this</a> API.
     *
     * Returns ID and tags of matching image.<br/>
     * <br/>
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals
     * are reflected in the response.
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param [options] The optional parameters
     * @returns Promise<Models.ImageModerationMatchUrlInputResponse>
     */
    matchUrlInput(contentType: string, imageUrl: Models.ImageUrl, options?: Models.ImageModerationMatchUrlInputOptionalParams): Promise<Models.ImageModerationMatchUrlInputResponse>;
    /**
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param callback The callback
     */
    matchUrlInput(contentType: string, imageUrl: Models.ImageUrl, callback: msRest.ServiceCallback<Models.MatchResponse>): void;
    /**
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param options The optional parameters
     * @param callback The callback
     */
    matchUrlInput(contentType: string, imageUrl: Models.ImageUrl, options: Models.ImageModerationMatchUrlInputOptionalParams, callback: msRest.ServiceCallback<Models.MatchResponse>): void;
    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your
     * custom image lists using <a
     * href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe">this</a> API.
     *
     * Returns ID and tags of matching image.<br/>
     * <br/>
     * Note: Refresh Index must be run on the corresponding Image List before additions and removals
     * are reflected in the response.
     * @param imageStream The image file.
     * @param [options] The optional parameters
     * @returns Promise<Models.ImageModerationMatchFileInputResponse>
     */
    matchFileInput(imageStream: msRest.HttpRequestBody, options?: Models.ImageModerationMatchFileInputOptionalParams): Promise<Models.ImageModerationMatchFileInputResponse>;
    /**
     * @param imageStream The image file.
     * @param callback The callback
     */
    matchFileInput(imageStream: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.MatchResponse>): void;
    /**
     * @param imageStream The image file.
     * @param options The optional parameters
     * @param callback The callback
     */
    matchFileInput(imageStream: msRest.HttpRequestBody, options: Models.ImageModerationMatchFileInputOptionalParams, callback: msRest.ServiceCallback<Models.MatchResponse>): void;
}
//# sourceMappingURL=imageModeration.d.ts.map