import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { ContentModeratorClientContext } from "../contentModeratorClientContext";
/** Class representing a ListManagementTerm. */
export declare class ListManagementTerm {
    private readonly client;
    /**
     * Create a ListManagementTerm.
     * @param {ContentModeratorClientContext} client Reference to the service client.
     */
    constructor(client: ContentModeratorClientContext);
    /**
     * Add a term to the term list with list Id equal to list Id passed.
     * @param listId List Id of the image list.
     * @param term Term to be deleted
     * @param language Language of the terms.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    addTerm(listId: string, term: string, language: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param listId List Id of the image list.
     * @param term Term to be deleted
     * @param language Language of the terms.
     * @param callback The callback
     */
    addTerm(listId: string, term: string, language: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param listId List Id of the image list.
     * @param term Term to be deleted
     * @param language Language of the terms.
     * @param options The optional parameters
     * @param callback The callback
     */
    addTerm(listId: string, term: string, language: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Deletes a term from the list with list Id equal to the list Id passed.
     * @param listId List Id of the image list.
     * @param term Term to be deleted
     * @param language Language of the terms.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListManagementTermDeleteTermResponse>
     */
    deleteTerm(listId: string, term: string, language: string, options?: msRest.RequestOptionsBase): Promise<Models.ListManagementTermDeleteTermResponse>;
    /**
     * @param listId List Id of the image list.
     * @param term Term to be deleted
     * @param language Language of the terms.
     * @param callback The callback
     */
    deleteTerm(listId: string, term: string, language: string, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param listId List Id of the image list.
     * @param term Term to be deleted
     * @param language Language of the terms.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteTerm(listId: string, term: string, language: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * Gets all terms from the list with list Id equal to the list Id passed.
     * @param listId List Id of the image list.
     * @param language Language of the terms.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListManagementTermGetAllTermsResponse>
     */
    getAllTerms(listId: string, language: string, options?: Models.ListManagementTermGetAllTermsOptionalParams): Promise<Models.ListManagementTermGetAllTermsResponse>;
    /**
     * @param listId List Id of the image list.
     * @param language Language of the terms.
     * @param callback The callback
     */
    getAllTerms(listId: string, language: string, callback: msRest.ServiceCallback<Models.Terms>): void;
    /**
     * @param listId List Id of the image list.
     * @param language Language of the terms.
     * @param options The optional parameters
     * @param callback The callback
     */
    getAllTerms(listId: string, language: string, options: Models.ListManagementTermGetAllTermsOptionalParams, callback: msRest.ServiceCallback<Models.Terms>): void;
    /**
     * Deletes all terms from the list with list Id equal to the list Id passed.
     * @param listId List Id of the image list.
     * @param language Language of the terms.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListManagementTermDeleteAllTermsResponse>
     */
    deleteAllTerms(listId: string, language: string, options?: msRest.RequestOptionsBase): Promise<Models.ListManagementTermDeleteAllTermsResponse>;
    /**
     * @param listId List Id of the image list.
     * @param language Language of the terms.
     * @param callback The callback
     */
    deleteAllTerms(listId: string, language: string, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param listId List Id of the image list.
     * @param language Language of the terms.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteAllTerms(listId: string, language: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
}
//# sourceMappingURL=listManagementTerm.d.ts.map