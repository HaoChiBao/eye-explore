import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { ContentModeratorClientContext } from "../contentModeratorClientContext";
/** Class representing a ListManagementImageLists. */
export declare class ListManagementImageLists {
    private readonly client;
    /**
     * Create a ListManagementImageLists.
     * @param {ContentModeratorClientContext} client Reference to the service client.
     */
    constructor(client: ContentModeratorClientContext);
    /**
     * Returns the details of the image list with list Id equal to list Id passed.
     * @param listId List Id of the image list.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListManagementImageListsGetDetailsResponse>
     */
    getDetails(listId: string, options?: msRest.RequestOptionsBase): Promise<Models.ListManagementImageListsGetDetailsResponse>;
    /**
     * @param listId List Id of the image list.
     * @param callback The callback
     */
    getDetails(listId: string, callback: msRest.ServiceCallback<Models.ImageList>): void;
    /**
     * @param listId List Id of the image list.
     * @param options The optional parameters
     * @param callback The callback
     */
    getDetails(listId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImageList>): void;
    /**
     * Deletes image list with the list Id equal to list Id passed.
     * @param listId List Id of the image list.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListManagementImageListsDeleteMethodResponse>
     */
    deleteMethod(listId: string, options?: msRest.RequestOptionsBase): Promise<Models.ListManagementImageListsDeleteMethodResponse>;
    /**
     * @param listId List Id of the image list.
     * @param callback The callback
     */
    deleteMethod(listId: string, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param listId List Id of the image list.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(listId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * Updates an image list with list Id equal to list Id passed.
     * @param listId List Id of the image list.
     * @param contentType The content type.
     * @param body Schema of the body.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListManagementImageListsUpdateResponse>
     */
    update(listId: string, contentType: string, body: Models.Body, options?: msRest.RequestOptionsBase): Promise<Models.ListManagementImageListsUpdateResponse>;
    /**
     * @param listId List Id of the image list.
     * @param contentType The content type.
     * @param body Schema of the body.
     * @param callback The callback
     */
    update(listId: string, contentType: string, body: Models.Body, callback: msRest.ServiceCallback<Models.ImageList>): void;
    /**
     * @param listId List Id of the image list.
     * @param contentType The content type.
     * @param body Schema of the body.
     * @param options The optional parameters
     * @param callback The callback
     */
    update(listId: string, contentType: string, body: Models.Body, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImageList>): void;
    /**
     * Creates an image list.
     * @param contentType The content type.
     * @param body Schema of the body.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListManagementImageListsCreateResponse>
     */
    create(contentType: string, body: Models.Body, options?: msRest.RequestOptionsBase): Promise<Models.ListManagementImageListsCreateResponse>;
    /**
     * @param contentType The content type.
     * @param body Schema of the body.
     * @param callback The callback
     */
    create(contentType: string, body: Models.Body, callback: msRest.ServiceCallback<Models.ImageList>): void;
    /**
     * @param contentType The content type.
     * @param body Schema of the body.
     * @param options The optional parameters
     * @param callback The callback
     */
    create(contentType: string, body: Models.Body, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImageList>): void;
    /**
     * Gets all the Image Lists.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListManagementImageListsGetAllImageListsResponse>
     */
    getAllImageLists(options?: msRest.RequestOptionsBase): Promise<Models.ListManagementImageListsGetAllImageListsResponse>;
    /**
     * @param callback The callback
     */
    getAllImageLists(callback: msRest.ServiceCallback<Models.ImageList[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    getAllImageLists(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImageList[]>): void;
    /**
     * Refreshes the index of the list with list Id equal to list Id passed.
     * @param listId List Id of the image list.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListManagementImageListsRefreshIndexMethodResponse>
     */
    refreshIndexMethod(listId: string, options?: msRest.RequestOptionsBase): Promise<Models.ListManagementImageListsRefreshIndexMethodResponse>;
    /**
     * @param listId List Id of the image list.
     * @param callback The callback
     */
    refreshIndexMethod(listId: string, callback: msRest.ServiceCallback<Models.RefreshIndex>): void;
    /**
     * @param listId List Id of the image list.
     * @param options The optional parameters
     * @param callback The callback
     */
    refreshIndexMethod(listId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RefreshIndex>): void;
}
//# sourceMappingURL=listManagementImageLists.d.ts.map