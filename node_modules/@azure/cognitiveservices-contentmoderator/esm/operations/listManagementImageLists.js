/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/listManagementImageListsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a ListManagementImageLists. */
var ListManagementImageLists = /** @class */ (function () {
    /**
     * Create a ListManagementImageLists.
     * @param {ContentModeratorClientContext} client Reference to the service client.
     */
    function ListManagementImageLists(client) {
        this.client = client;
    }
    ListManagementImageLists.prototype.getDetails = function (listId, options, callback) {
        return this.client.sendOperationRequest({
            listId: listId,
            options: options
        }, getDetailsOperationSpec, callback);
    };
    ListManagementImageLists.prototype.deleteMethod = function (listId, options, callback) {
        return this.client.sendOperationRequest({
            listId: listId,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    ListManagementImageLists.prototype.update = function (listId, contentType, body, options, callback) {
        return this.client.sendOperationRequest({
            listId: listId,
            contentType: contentType,
            body: body,
            options: options
        }, updateOperationSpec, callback);
    };
    ListManagementImageLists.prototype.create = function (contentType, body, options, callback) {
        return this.client.sendOperationRequest({
            contentType: contentType,
            body: body,
            options: options
        }, createOperationSpec, callback);
    };
    ListManagementImageLists.prototype.getAllImageLists = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getAllImageListsOperationSpec, callback);
    };
    ListManagementImageLists.prototype.refreshIndexMethod = function (listId, options, callback) {
        return this.client.sendOperationRequest({
            listId: listId,
            options: options
        }, refreshIndexMethodOperationSpec, callback);
    };
    return ListManagementImageLists;
}());
export { ListManagementImageLists };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getDetailsOperationSpec = {
    httpMethod: "GET",
    path: "contentmoderator/lists/v1.0/imagelists/{listId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.listId1
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ImageList
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "contentmoderator/lists/v1.0/imagelists/{listId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.listId1
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "String"
                }
            }
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PUT",
    path: "contentmoderator/lists/v1.0/imagelists/{listId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.listId1
    ],
    headerParameters: [
        Parameters.contentType0
    ],
    requestBody: {
        parameterPath: "body",
        mapper: __assign(__assign({}, Mappers.Body), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ImageList
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var createOperationSpec = {
    httpMethod: "POST",
    path: "contentmoderator/lists/v1.0/imagelists",
    urlParameters: [
        Parameters.endpoint
    ],
    headerParameters: [
        Parameters.contentType0
    ],
    requestBody: {
        parameterPath: "body",
        mapper: __assign(__assign({}, Mappers.Body), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ImageList
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var getAllImageListsOperationSpec = {
    httpMethod: "GET",
    path: "contentmoderator/lists/v1.0/imagelists",
    urlParameters: [
        Parameters.endpoint
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ImageList"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var refreshIndexMethodOperationSpec = {
    httpMethod: "POST",
    path: "contentmoderator/lists/v1.0/imagelists/{listId}/RefreshIndex",
    urlParameters: [
        Parameters.endpoint,
        Parameters.listId1
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RefreshIndex
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=listManagementImageLists.js.map