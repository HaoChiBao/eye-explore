/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/listManagementImageMappers";
import * as Parameters from "../models/parameters";
/** Class representing a ListManagementImage. */
var ListManagementImage = /** @class */ (function () {
    /**
     * Create a ListManagementImage.
     * @param {ContentModeratorClientContext} client Reference to the service client.
     */
    function ListManagementImage(client) {
        this.client = client;
    }
    ListManagementImage.prototype.addImage = function (listId, options, callback) {
        return this.client.sendOperationRequest({
            listId: listId,
            options: options
        }, addImageOperationSpec, callback);
    };
    ListManagementImage.prototype.deleteAllImages = function (listId, options, callback) {
        return this.client.sendOperationRequest({
            listId: listId,
            options: options
        }, deleteAllImagesOperationSpec, callback);
    };
    ListManagementImage.prototype.getAllImageIds = function (listId, options, callback) {
        return this.client.sendOperationRequest({
            listId: listId,
            options: options
        }, getAllImageIdsOperationSpec, callback);
    };
    ListManagementImage.prototype.deleteImage = function (listId, imageId, options, callback) {
        return this.client.sendOperationRequest({
            listId: listId,
            imageId: imageId,
            options: options
        }, deleteImageOperationSpec, callback);
    };
    ListManagementImage.prototype.addImageUrlInput = function (listId, contentType, imageUrl, options, callback) {
        return this.client.sendOperationRequest({
            listId: listId,
            contentType: contentType,
            imageUrl: imageUrl,
            options: options
        }, addImageUrlInputOperationSpec, callback);
    };
    ListManagementImage.prototype.addImageFileInput = function (listId, imageStream, options, callback) {
        return this.client.sendOperationRequest({
            listId: listId,
            imageStream: imageStream,
            options: options
        }, addImageFileInputOperationSpec, callback);
    };
    return ListManagementImage;
}());
export { ListManagementImage };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var addImageOperationSpec = {
    httpMethod: "POST",
    path: "contentmoderator/lists/v1.0/imagelists/{listId}/images",
    urlParameters: [
        Parameters.endpoint,
        Parameters.listId1
    ],
    queryParameters: [
        Parameters.tag,
        Parameters.label
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Image
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var deleteAllImagesOperationSpec = {
    httpMethod: "DELETE",
    path: "contentmoderator/lists/v1.0/imagelists/{listId}/images",
    urlParameters: [
        Parameters.endpoint,
        Parameters.listId1
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "String"
                }
            }
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var getAllImageIdsOperationSpec = {
    httpMethod: "GET",
    path: "contentmoderator/lists/v1.0/imagelists/{listId}/images",
    urlParameters: [
        Parameters.endpoint,
        Parameters.listId1
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ImageIds
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var deleteImageOperationSpec = {
    httpMethod: "DELETE",
    path: "contentmoderator/lists/v1.0/imagelists/{listId}/images/{ImageId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.listId1,
        Parameters.imageId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "String"
                }
            }
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var addImageUrlInputOperationSpec = {
    httpMethod: "POST",
    path: "contentmoderator/lists/v1.0/imagelists/{listId}/images",
    urlParameters: [
        Parameters.endpoint,
        Parameters.listId1
    ],
    queryParameters: [
        Parameters.tag,
        Parameters.label
    ],
    headerParameters: [
        Parameters.contentType0
    ],
    requestBody: {
        parameterPath: "imageUrl",
        mapper: __assign(__assign({}, Mappers.ImageUrl), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Image
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
var addImageFileInputOperationSpec = {
    httpMethod: "POST",
    path: "contentmoderator/lists/v1.0/imagelists/{listId}/images",
    urlParameters: [
        Parameters.endpoint,
        Parameters.listId1
    ],
    queryParameters: [
        Parameters.tag,
        Parameters.label
    ],
    requestBody: {
        parameterPath: "imageStream",
        mapper: {
            required: true,
            serializedName: "ImageStream",
            type: {
                name: "Stream"
            }
        }
    },
    contentType: "image/gif",
    responses: {
        200: {
            bodyMapper: Mappers.Image
        },
        default: {
            bodyMapper: Mappers.APIError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=listManagementImage.js.map