import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { ContentModeratorClientContext } from "../contentModeratorClientContext";
/** Class representing a ListManagementImage. */
export declare class ListManagementImage {
    private readonly client;
    /**
     * Create a ListManagementImage.
     * @param {ContentModeratorClientContext} client Reference to the service client.
     */
    constructor(client: ContentModeratorClientContext);
    /**
     * Add an image to the list with list Id equal to list Id passed.
     * @param listId List Id of the image list.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListManagementImageAddImageResponse>
     */
    addImage(listId: string, options?: Models.ListManagementImageAddImageOptionalParams): Promise<Models.ListManagementImageAddImageResponse>;
    /**
     * @param listId List Id of the image list.
     * @param callback The callback
     */
    addImage(listId: string, callback: msRest.ServiceCallback<Models.Image>): void;
    /**
     * @param listId List Id of the image list.
     * @param options The optional parameters
     * @param callback The callback
     */
    addImage(listId: string, options: Models.ListManagementImageAddImageOptionalParams, callback: msRest.ServiceCallback<Models.Image>): void;
    /**
     * Deletes all images from the list with list Id equal to list Id passed.
     * @param listId List Id of the image list.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListManagementImageDeleteAllImagesResponse>
     */
    deleteAllImages(listId: string, options?: msRest.RequestOptionsBase): Promise<Models.ListManagementImageDeleteAllImagesResponse>;
    /**
     * @param listId List Id of the image list.
     * @param callback The callback
     */
    deleteAllImages(listId: string, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param listId List Id of the image list.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteAllImages(listId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * Gets all image Ids from the list with list Id equal to list Id passed.
     * @param listId List Id of the image list.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListManagementImageGetAllImageIdsResponse>
     */
    getAllImageIds(listId: string, options?: msRest.RequestOptionsBase): Promise<Models.ListManagementImageGetAllImageIdsResponse>;
    /**
     * @param listId List Id of the image list.
     * @param callback The callback
     */
    getAllImageIds(listId: string, callback: msRest.ServiceCallback<Models.ImageIds>): void;
    /**
     * @param listId List Id of the image list.
     * @param options The optional parameters
     * @param callback The callback
     */
    getAllImageIds(listId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImageIds>): void;
    /**
     * Deletes an image from the list with list Id and image Id passed.
     * @param listId List Id of the image list.
     * @param imageId Id of the image.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListManagementImageDeleteImageResponse>
     */
    deleteImage(listId: string, imageId: string, options?: msRest.RequestOptionsBase): Promise<Models.ListManagementImageDeleteImageResponse>;
    /**
     * @param listId List Id of the image list.
     * @param imageId Id of the image.
     * @param callback The callback
     */
    deleteImage(listId: string, imageId: string, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param listId List Id of the image list.
     * @param imageId Id of the image.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteImage(listId: string, imageId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * Add an image to the list with list Id equal to list Id passed.
     * @param listId List Id of the image list.
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListManagementImageAddImageUrlInputResponse>
     */
    addImageUrlInput(listId: string, contentType: string, imageUrl: Models.ImageUrl, options?: Models.ListManagementImageAddImageUrlInputOptionalParams): Promise<Models.ListManagementImageAddImageUrlInputResponse>;
    /**
     * @param listId List Id of the image list.
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param callback The callback
     */
    addImageUrlInput(listId: string, contentType: string, imageUrl: Models.ImageUrl, callback: msRest.ServiceCallback<Models.Image>): void;
    /**
     * @param listId List Id of the image list.
     * @param contentType The content type.
     * @param imageUrl The image url.
     * @param options The optional parameters
     * @param callback The callback
     */
    addImageUrlInput(listId: string, contentType: string, imageUrl: Models.ImageUrl, options: Models.ListManagementImageAddImageUrlInputOptionalParams, callback: msRest.ServiceCallback<Models.Image>): void;
    /**
     * Add an image to the list with list Id equal to list Id passed.
     * @param listId List Id of the image list.
     * @param imageStream The image file.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListManagementImageAddImageFileInputResponse>
     */
    addImageFileInput(listId: string, imageStream: msRest.HttpRequestBody, options?: Models.ListManagementImageAddImageFileInputOptionalParams): Promise<Models.ListManagementImageAddImageFileInputResponse>;
    /**
     * @param listId List Id of the image list.
     * @param imageStream The image file.
     * @param callback The callback
     */
    addImageFileInput(listId: string, imageStream: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.Image>): void;
    /**
     * @param listId List Id of the image list.
     * @param imageStream The image file.
     * @param options The optional parameters
     * @param callback The callback
     */
    addImageFileInput(listId: string, imageStream: msRest.HttpRequestBody, options: Models.ListManagementImageAddImageFileInputOptionalParams, callback: msRest.ServiceCallback<Models.Image>): void;
}
//# sourceMappingURL=listManagementImage.d.ts.map