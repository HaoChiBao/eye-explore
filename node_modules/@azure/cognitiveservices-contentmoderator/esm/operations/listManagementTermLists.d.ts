import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { ContentModeratorClientContext } from "../contentModeratorClientContext";
/** Class representing a ListManagementTermLists. */
export declare class ListManagementTermLists {
    private readonly client;
    /**
     * Create a ListManagementTermLists.
     * @param {ContentModeratorClientContext} client Reference to the service client.
     */
    constructor(client: ContentModeratorClientContext);
    /**
     * Returns list Id details of the term list with list Id equal to list Id passed.
     * @param listId List Id of the image list.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListManagementTermListsGetDetailsResponse>
     */
    getDetails(listId: string, options?: msRest.RequestOptionsBase): Promise<Models.ListManagementTermListsGetDetailsResponse>;
    /**
     * @param listId List Id of the image list.
     * @param callback The callback
     */
    getDetails(listId: string, callback: msRest.ServiceCallback<Models.TermList>): void;
    /**
     * @param listId List Id of the image list.
     * @param options The optional parameters
     * @param callback The callback
     */
    getDetails(listId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TermList>): void;
    /**
     * Deletes term list with the list Id equal to list Id passed.
     * @param listId List Id of the image list.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListManagementTermListsDeleteMethodResponse>
     */
    deleteMethod(listId: string, options?: msRest.RequestOptionsBase): Promise<Models.ListManagementTermListsDeleteMethodResponse>;
    /**
     * @param listId List Id of the image list.
     * @param callback The callback
     */
    deleteMethod(listId: string, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param listId List Id of the image list.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(listId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * Updates an Term List.
     * @param listId List Id of the image list.
     * @param contentType The content type.
     * @param body Schema of the body.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListManagementTermListsUpdateResponse>
     */
    update(listId: string, contentType: string, body: Models.Body, options?: msRest.RequestOptionsBase): Promise<Models.ListManagementTermListsUpdateResponse>;
    /**
     * @param listId List Id of the image list.
     * @param contentType The content type.
     * @param body Schema of the body.
     * @param callback The callback
     */
    update(listId: string, contentType: string, body: Models.Body, callback: msRest.ServiceCallback<Models.TermList>): void;
    /**
     * @param listId List Id of the image list.
     * @param contentType The content type.
     * @param body Schema of the body.
     * @param options The optional parameters
     * @param callback The callback
     */
    update(listId: string, contentType: string, body: Models.Body, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TermList>): void;
    /**
     * Creates a Term List
     * @param contentType The content type.
     * @param body Schema of the body.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListManagementTermListsCreateResponse>
     */
    create(contentType: string, body: Models.Body, options?: msRest.RequestOptionsBase): Promise<Models.ListManagementTermListsCreateResponse>;
    /**
     * @param contentType The content type.
     * @param body Schema of the body.
     * @param callback The callback
     */
    create(contentType: string, body: Models.Body, callback: msRest.ServiceCallback<Models.TermList>): void;
    /**
     * @param contentType The content type.
     * @param body Schema of the body.
     * @param options The optional parameters
     * @param callback The callback
     */
    create(contentType: string, body: Models.Body, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TermList>): void;
    /**
     * gets all the Term Lists
     * @param [options] The optional parameters
     * @returns Promise<Models.ListManagementTermListsGetAllTermListsResponse>
     */
    getAllTermLists(options?: msRest.RequestOptionsBase): Promise<Models.ListManagementTermListsGetAllTermListsResponse>;
    /**
     * @param callback The callback
     */
    getAllTermLists(callback: msRest.ServiceCallback<Models.TermList[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    getAllTermLists(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TermList[]>): void;
    /**
     * Refreshes the index of the list with list Id equal to list ID passed.
     * @param listId List Id of the image list.
     * @param language Language of the terms.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListManagementTermListsRefreshIndexMethodResponse>
     */
    refreshIndexMethod(listId: string, language: string, options?: msRest.RequestOptionsBase): Promise<Models.ListManagementTermListsRefreshIndexMethodResponse>;
    /**
     * @param listId List Id of the image list.
     * @param language Language of the terms.
     * @param callback The callback
     */
    refreshIndexMethod(listId: string, language: string, callback: msRest.ServiceCallback<Models.RefreshIndex>): void;
    /**
     * @param listId List Id of the image list.
     * @param language Language of the terms.
     * @param options The optional parameters
     * @param callback The callback
     */
    refreshIndexMethod(listId: string, language: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RefreshIndex>): void;
}
//# sourceMappingURL=listManagementTermLists.d.ts.map