import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { ContentModeratorClientContext } from "../contentModeratorClientContext";
/** Class representing a TextModeration. */
export declare class TextModeration {
    private readonly client;
    /**
     * Create a TextModeration.
     * @param {ContentModeratorClientContext} client Reference to the service client.
     */
    constructor(client: ContentModeratorClientContext);
    /**
     * Detects profanity in more than 100 languages and match against custom and shared blacklists.
     * @summary Detect profanity and match against custom and shared blacklists
     * @param textContentType The content type. Possible values include: 'text/plain', 'text/html',
     * 'text/xml', 'text/markdown'
     * @param textContent Content to screen.
     * @param [options] The optional parameters
     * @returns Promise<Models.TextModerationScreenTextResponse>
     */
    screenText(textContentType: Models.TextContentType, textContent: msRest.HttpRequestBody, options?: Models.TextModerationScreenTextOptionalParams): Promise<Models.TextModerationScreenTextResponse>;
    /**
     * @param textContentType The content type. Possible values include: 'text/plain', 'text/html',
     * 'text/xml', 'text/markdown'
     * @param textContent Content to screen.
     * @param callback The callback
     */
    screenText(textContentType: Models.TextContentType, textContent: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.Screen>): void;
    /**
     * @param textContentType The content type. Possible values include: 'text/plain', 'text/html',
     * 'text/xml', 'text/markdown'
     * @param textContent Content to screen.
     * @param options The optional parameters
     * @param callback The callback
     */
    screenText(textContentType: Models.TextContentType, textContent: msRest.HttpRequestBody, options: Models.TextModerationScreenTextOptionalParams, callback: msRest.ServiceCallback<Models.Screen>): void;
    /**
     * This operation will detect the language of given input content. Returns the <a
     * href="http://www-01.sil.org/iso639-3/codes.asp">ISO 639-3 code</a> for the predominant language
     * comprising the submitted text. Over 110 languages supported.
     * @param textContentType The content type. Possible values include: 'text/plain', 'text/html',
     * 'text/xml', 'text/markdown'
     * @param textContent Content to screen.
     * @param [options] The optional parameters
     * @returns Promise<Models.TextModerationDetectLanguageResponse>
     */
    detectLanguage(textContentType: Models.TextContentType1, textContent: msRest.HttpRequestBody, options?: msRest.RequestOptionsBase): Promise<Models.TextModerationDetectLanguageResponse>;
    /**
     * @param textContentType The content type. Possible values include: 'text/plain', 'text/html',
     * 'text/xml', 'text/markdown'
     * @param textContent Content to screen.
     * @param callback The callback
     */
    detectLanguage(textContentType: Models.TextContentType1, textContent: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.DetectedLanguage>): void;
    /**
     * @param textContentType The content type. Possible values include: 'text/plain', 'text/html',
     * 'text/xml', 'text/markdown'
     * @param textContent Content to screen.
     * @param options The optional parameters
     * @param callback The callback
     */
    detectLanguage(textContentType: Models.TextContentType1, textContent: msRest.HttpRequestBody, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DetectedLanguage>): void;
}
//# sourceMappingURL=textModeration.d.ts.map